using Bismuth.BismuthLayerInPlayer;
using Bismuth.Content.Buffs;
using Bismuth.Content.Items.Accessories;
using Bismuth.Content.Items.Armor;
using Bismuth.Content.Items.Materials;
using Bismuth.Content.Items.Other;
using Bismuth.Content.Items.Weapons.Assassin;
using Bismuth.Content.Items.Weapons.Melee;
using Bismuth.Content.Items.Weapons.Ranged;
using Bismuth.Content.NPCs;
using Bismuth.Content.Projectiles;
using Bismuth.Content.Tiles;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;
using Terraria;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.ID;
using Terraria.Localization;
using Terraria.ModLoader;
using Terraria.ModLoader.IO;
using static Terraria.ModLoader.PlayerDrawLayer;

namespace Bismuth.Utilities
{
    // if anybody will read this: take care of your psyche.
    // Big thanks to Rockos and his mod. Sources of it were very usefull.
    // Also thanks to Compozius and Zerokk. Their help in coding was essential.
    public class BismuthPlayer : ModPlayer, ILocalizedModType
    {
        public string LocalizationCategory => "BismuthPlayerSystem";

        int count = 0;
        int fallTime = 0;
        bool canTrigger = false;
        public Transformation BatLayer;

        public static int alphabanshee = 0;
        public static int growbanshee = 1;
        public static int alpharing = 0;
        public static int alpharingmax = 0;
        public static int growring = 1;
        public bool CanBeFrozenByElemental = true;
        public Vector2 InkPos = Vector2.Zero;
        public Vector2 DeathPos = Vector2.Zero;
        public bool PhoenixDaily = true;
        public static float whispervolume = 0f;
        public int SoulEaterCounter = 0;
        PlayerDeathReason EmpathyCheck;
        public List<NPC> EmpathyNPCs = new List<NPC>();
        public List<Vector2> BOTDPlaces = new List<Vector2>();
        public bool downedWitch = false;
        public bool downedMinotaur = false;
        public bool CustomChatClose = false;
        public bool movecameratopriest = false;
        public bool NoRPGGameplay = false;
        public int OrcishBarTimer = 0;
        #region SwampMethods
        public static bool ZoneSwamp = false;
        #endregion
        #region CustomPlayerStats
        public float critDmgMult = 1f; // Процентное увеличение крит. урона. Не для скиллов.
        public float critDmgMultForSkills = 1f;// Процентное увеличение крит. урона. Для скиллов.
        public int BlockChance = 0; // Шанс заблокировать удар. Не для скиллов.
        public int BlockChanceForSkills = 0; // Шанс заблокировать удар. Для скиллов.
        public int DodgeChance = 0; // Шанс уворота. Не для скиллов.
        public int DodgeChanceForSkills = 0; // Шанс уворота. Не для скиллов.
        public int ParryChance = 0; // Шанс отражения снаряда. Не для скиллов.
        public int ParryChanceForSkills = 0; // Шанс отражения снаряда. Для скиллов.
        public int ReflectChance = 0; // Шанс отражения снаряда. От первого отличается просто выводимым CombatText-ом. Не для скиллов.
        public int ReflectChanceForSkills = 0;// Шанс отражения снаряда. От первого отличается просто выводимым CombatText-ом. Для скиллов.
        public int Charm = 0; // Обаяние       
        #endregion
        #region TribeCurseVars
        public bool TribeCurse; // Наложено ли на игрока проклятие племени?
        public int TribeCurseFrame = 0; // Кадр анимации черепка проклятия
        public int TribeCurseCounter = 0; // Счетчик между сменой кадров черепка 
        #endregion
        #region EnergyShieldVars
        public int EnergyShieldFrame = 0; // Кадр анимации энергощита
        public int EnergyShieldCounter = 0; // Счетчик между сменой кадров энергощита 
        public int EnergyShieldAlpha = 0;
        #endregion
        #region BoneTrap

        public static bool BoneTrap; // Находится ли игрок в костяной ловушке некроманта?
        public static int BoneTrapCounter;  // Кадр анимации костяной ловушки
        public static int BoneTrapFrame; // // Счетчик между сменой кадров ловушки 
        #endregion
        #region GlaciationVars
        public static int GlaciationCounter;  // Кадр анимации костяной ловушки
        public static int GlaciationFrame; // // Счетчик между сменой кадров ловушки 
        #endregion
        #region HeroBootsExtraJumps
        public static bool jumpAgainHeroSecond = false; // Способен ли игрок в данный момент совершить второй прыжок в ботинках Героя?
        public static bool doubleJumpHeroSecond = false; // Способен ли игрок в принципе совершить второй прыжок в ботинках Героя?
        public static bool jumpAgainHeroThird = false; // Способен ли игрок в данный момент совершить третий прыжок в ботинках Героя?
        public static bool doubleJumpHeroThird = false; // Способен ли игрок в принципе совершить третий прыжок в ботинках Героя?
        #endregion              
        public bool witchsecondatt = false;
        #region QuestsVariables
        public bool IsBoSRead = false; // Прочел ли игрок Книгу Секретов?
        public bool IsReadMazarbul = false; // Прочел ли игрок Книгу Мазарбул?
        public bool IsElessarInInventory = false; // Лежит ли у игрока Элессар в инвентаре?
        public int CasketCount = 0; // Сколько игрок открыл шкатулок?
        public int BosWait = 0; // Время изучения бабкой книги Секретов (интервал между квестами)
       
        public int WaitGlamdring = 0; // Время ковки Гламдринга
        public int WaitSoulScythe = 0;
        public int WaitTabula = 0;
        public int WaitPhilosopherStone = 0;
        public int SoulScytheCharge = 10;
        public int WaitStoneCharging = 0;
        public bool TabulaResearch = false; // Изучил ли игрок Скрижаль?
        #endregion
        #region AccessoriesVariables
        public bool IsEquippedAthenasShield = false; // Надет ли Щит Афины?
        public bool IsEquippedHerosBoots = false; // Надеты ли Сапоги Героя?
        public bool IsEquippedRivetedSet = false; // Надет ли весь клепаный сет?
        public bool OrbitalAlive = false; // Активна ли сфера от Сверкающего Покрова?
        public bool darkorbAlive = false; // Активна ли сфера от сета Некроманта?
        public bool IsEquippedQuiver = false; // Надет ли Колчан Одиссея?
        public bool IsEquippedTribalQuiver = false; // Надет ли племенной колчан?
        public bool killersetbonus = false; // Надет ли сет убийцы?
        public bool nomadsetbonus = false; // Надет ли чет кочевника?
        public int killersettimer = 0; // Кулдаун до активации 4-х кратного урона при ношении фул сета Убийцы (При 600 - активен). Сброс при получении дамага или днем.
        public bool paladinssetbonus = false; // Надет ли сет паладина?
        public bool watersetbonus = false; // Надет ли водный сет?
        public int sanctusdamagecounter = 0; // Сколько урона получено во время ношения Санктуса? (!)
        public bool IsEquippedSanctus = false; // Надет ли Санктус?
        public bool IsFTRead = false; // Прочел ли игрок трактат Веры?
        public bool FTDaily = false; // Активен ли дневной бонус трактата Веры?
        public bool IsEquippedHeartOfSwamp = false; // Надето ли сердце болот?
        public int LichPoints = 0; // Очки убийств во время ношения короны Лича
        public bool IsEquippedLichCrown = false; // Надета ли корона Лича?
        public bool IsEquippedDraculasCover = false; // Надет ли плащ Дракулы?
        public int amuletcounter = 0;
        public bool IsEquippedArchmagesAmulet = false; // Надет ли амулет Архимага?
        public bool IsEquippedMarbleMask = false; // Надета ли Мраморная Маска?
        public bool IsEquippedBansheesHead = false; // Надета ли голова Банши?
        public bool IsEquippedDiceCup = false; // Надет ли игральный стакан?
        public bool IsEquippedGamblersBag = false; // Надет ли мешок игрока?
        public bool IsEquippedHeartOfDesert = false; // Надето ли сердце пустыни?
        public bool IsEquippedPendant = false; // Надет ли Кулон Крови?
        public bool IsEquippedNecklace = false; // Надето ли ожерелье ракушек?
        public bool IsEquippedBelt = false; // Надет ли пояс Алхимика?
        public bool IsEquippedBerserksRing = false;
        public bool IsEquippedRekstrisHelmet = false;
        public bool IsEquippedRekstrisChest = false;
        public bool IsEquippedRekstrisBoots = false;
        public bool mirrordaily = false;
        public static int myhair = 0; // 0 - стандарт, 1 - альтернатива, 2 - лысый.
        public static bool HoSvisual = false;
        bool amuletdaily = false;
        public static bool lichvisual = false;
        public int cursepts = 0;
        public bool IsEquippedOneRing = false;
        public bool PhoenixPendantWasSpawned = false;
        public int OneRingTimer = 0;
        public int RingsCount = 0;
        public bool IsEquippedGoldenRune = false;
        #endregion
        public static string StringBreak(DynamicSpriteFont font, string a, float maxWidth, float startsize = 1f) //CHECK IT!
        {
            int latestspace = 0;
            int stringstart = 0;
            for (int i = 0; i <= a.Length - 1; i++)
            {

                if (a.Substring(i, 1) == " ")
                {
                    latestspace = i;
                }
                if (font.MeasureString(a.Substring(stringstart, i - stringstart + 1)).X * startsize >= maxWidth)
                {
                    a = a.Remove(latestspace, 1);
                    a = a.Insert(latestspace, "\n");
                    stringstart = latestspace + 2;
                }
            }
            return a;
        }
        public override void PreUpdateMovement() // код не идеальный
        {
            if (NPC.downedGolemBoss)
            {
                count = 7;
            }
            if (count >= 7)
            {
                for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                {
                    if (NPC.downedGolemBoss)
                    {
                        if (Player.armor[k].type == ModContent.ItemType<HerosBoots>())
                        {
                            if (Player.velocity.Y > 0)
                            {
                                bootstimer++;
                            }
                            if (bootstimer < 30 && Player.velocity.Y <= 0)
                            {
                                bootstimer = 0;
                            }
                            if (Player.velocity.Y < 0)
                            {
                                fallTime++;
                            }
                            if (fallTime >= 5)
                            {
                                canTrigger = true;
                            }

                            if (canTrigger && bootstimer >= 30)
                            {
                                bootstimer = 30;
                                if (WorldGen.SolidTile(Player.position.ToTileCoordinates().X, Player.position.ToTileCoordinates().Y + 3) || WorldGen.SolidTile(Player.position.ToTileCoordinates().X, Player.position.ToTileCoordinates().Y + 3))
                                {
                                    Projectile.NewProjectile(Player.GetSource_FromThis(), new Vector2(Player.Center.X, Player.Center.Y - 20), Vector2.Zero, ModContent.ProjectileType<HerosBootsBlast>(), 60, 5f, Main.myPlayer);
                                    SoundEngine.PlaySound(SoundID.Item14, Player.Center);
                                    bootstimer = 0;
                                    fallTime = 0;
                                    canTrigger = false;
                                }
                            }
                        }
                    }
                }
            }
        }
        public override void FrameEffects()
        {
            if (IsNaga)
            {
                Player.head = EquipLoader.GetEquipSlot(Mod, "TheRingOfTheSeas", EquipType.Head);
                Player.body = EquipLoader.GetEquipSlot(Mod, "TheRingOfTheSeas", EquipType.Body);
                Player.legs = EquipLoader.GetEquipSlot(Mod, "TheRingOfTheSeas", EquipType.Legs);
            }
            if (IsVampire)
            {
                string headName = Player.Male ? "TheRingOfTheBlood_Head_Male" : "TheRingOfTheBlood_Head_Female";
                Player.head = EquipLoader.GetEquipSlot(Mod, headName, EquipType.Head);
                Player.body = EquipLoader.GetEquipSlot(Mod, "TheRingOfTheBlood", EquipType.Body);
                Player.legs = EquipLoader.GetEquipSlot(Mod, "TheRingOfTheBlood", EquipType.Legs);
            }
        }
        public override void HideDrawLayers(PlayerDrawSet drawInfo)
        {
            if (vampbat)
            {
                BatLayer ??= new BatLayer();
                BatLayer.PreDrawRecursive(ref drawInfo);
            }
        }
        public override void ModifyDrawInfo(ref PlayerDrawSet drawInfo)
        {
            if (vampbat)
            {
                BatLayer?.PostDrawRecursive(ref drawInfo);
            }
            if (IsNaga)
            {
                drawInfo.hideEntirePlayer = false;
                drawInfo.hidesTopSkin = true;
                drawInfo.hidesBottomSkin = true;
            }
        }
        #region ItemsSpecVars
        public float ArrowCharge = 0f;
        public float TheseusCombo = 0f;
        public int DoomhammerTimer = 0;
        public int PoisonTimer = 0;
        public Rectangle NarsilHitbox;

        bool RekstrisHelmRoar = false;
        bool RekstrisChestRoar = false;
        bool RekstrisBootsRoar = false;
        #endregion
        public int PlayerClass = 0;      
        #region Races
        public bool IsNaga = false;
        public bool IsVampire = false;
        public bool vampbat = false;
        public int Wetness = 0;
        public int Hunger = 0;
        #endregion
        #region UI options
        public bool treeopened = false;
        public int SkillPoints = 0;
        public int SpendedPoints = 0;
        public int timer = 0;

        public bool OpenedBook = false;
        Texture2D skillinfopanel = ModContent.Request<Texture2D>("Bismuth/UI/InfoPanel").Value;
        Texture2D UpdatedSkill = ModContent.Request<Texture2D>("Bismuth/UI/GoldenBorder").Value;
        Texture2D ClosedSkill = ModContent.Request<Texture2D>("Bismuth/UI/ClosedSkill").Value;
        Texture2D WarriorPanel = ModContent.Request<Texture2D>("Bismuth/UI/WarriorPanel").Value;
        Texture2D WizardPanel = ModContent.Request<Texture2D>("Bismuth/UI/WizardPanel").Value;
        Texture2D AssassinPanel = ModContent.Request<Texture2D>("Bismuth/UI/AssassinPanel").Value;
        Texture2D RangerPanel = ModContent.Request<Texture2D>("Bismuth/UI/RangerPanel").Value;
        Texture2D ThrowerPanel = ModContent.Request<Texture2D>("Bismuth/UI/ThrowerPanel").Value;
        

        public static Vector2 panelcoord = new Vector2((Main.screenWidth / 2) - 311, 234);
        public static Vector2 RaceBar = new Vector2(10, 80);
        public static Vector2 ScrollBar = new Vector2(panelcoord.X + 400, panelcoord.Y);
        Texture2D ScrollBarTex = ModContent.Request<Texture2D>("Bismuth/UI/ScrollBar").Value;
        public int TreeYOffset = 0;
        #endregion
        #region AbilsVars
        public int killordietaimer = 0;
        #endregion
        #region kllled bosses
        public int KilledBossesCount = 0;
        public bool KilledKingSlime = false;
        public bool KilledEoC = false;
        public bool KilledEoW = false;
        public bool KilledBoC = false;
        public bool KilledWormorBrain = false;
        public bool KilledSkeletron = false;
        public bool KilledQoB = false;
        public bool KilledWoF = false;
        public bool KilledSkeletronPrime = false;
        public bool KilledTwins = false;
        public bool KilledDestroyer = false;
        public bool KilledAnyMechBoss = false;
        public bool KilledPlantera = false;
        public bool KilledGolem = false;
        public bool KilledFishron = false;
        public bool KilledCultist = false;
        public bool KilledMoonLord = false;
        public bool KilledMourningWood = false;
        public bool KilledPumpking = false;
        public bool KilledSantaNK1 = false;
        public bool KilledEverscream = false;
        public bool KilledIceQueen = false;
        public bool KilledFlyingDutchman = false;
        public bool KilledMartianSaucer = false;
        public bool KilledBetsy = false;
        public Vector2 ScreenMoveFrom = Vector2.Zero;
        public Vector2 ScreenMoveTo = Vector2.Zero;

        #endregion
        public override void ModifyScreenPosition()
        {
            Bismuth.CameraUpdate(true); // Обработка тряски
            if(NPC.AnyNPCs(ModContent.NPCType<PriestTeleportation>()))
            {
                NPC priest = Main.npc[NPC.FindFirstNPC(ModContent.NPCType<PriestTeleportation>())];
                Main.screenPosition = priest.Center + new Vector2(-23 * 16, 0) - new Vector2(Main.screenWidth / 2, Main.screenHeight / 2) + ((priest.Center - new Vector2(Main.screenWidth / 2, Main.screenHeight / 2)) - (priest.Center + new Vector2(-23 * 16, 0) - new Vector2(Main.screenWidth / 2, Main.screenHeight / 2))) * screenmovestep;
            }
        }
        // DrawingBodyParts теперь в BismuthPlayerLayer
        #region CustomRecipesConditions
        public static bool GalvornResearch = false;
        public static bool PanaceaResearch = false;
        public static bool SwampWater = false;
        #endregion
        public override void ResetEffects()
        {
            vampbat = false;
            BatLayer = null;
            IsEquippedBerserksRing = false;
            IsEquippedAthenasShield = false;
            Charm = 0;
            IsElessarInInventory = false;
            critDmgMult = 1f;
            BlockChance = 0;
            DodgeChance = 0;
            ParryChance = 0;
            ReflectChance = 0;
            IsEquippedQuiver = false;
            IsEquippedTribalQuiver = false;
            RingsCount = 0;
            IsEquippedHerosBoots = false;
            OrbitalAlive = false;
            darkorbAlive = false;
            GalvornResearch = false;
            PanaceaResearch = false;
            vampbat = false;
            IsEquippedArchmagesAmulet = false;
            IsEquippedMarbleMask = false;
            IsEquippedBansheesHead = false;
            IsEquippedDraculasCover = false;
            IsEquippedDiceCup = false;
            IsEquippedGamblersBag = false;
            IsEquippedHeartOfDesert = false;
            IsEquippedHeartOfSwamp = false;
            lichvisual = false;
            IsEquippedLichCrown = false;
            IsEquippedPendant = false;
            IsEquippedSanctus = false;
            IsEquippedNecklace = false;
            HoSvisual = false;
            IsEquippedOneRing = false;
            IsEquippedGoldenRune = false;
            IsEquippedRekstrisBoots = false;
            IsEquippedRekstrisChest = false;
            IsEquippedRekstrisHelmet = false;
            IsEquippedBelt = false;
          
        }
        const float maxwidth = 396f;
        public override void Initialize()
        {
            // EmpathyNPCs = new List<NPC>();
            NoRPGGameplay = false;
            witchsecondatt = false;
            TabulaResearch = false;
            WaitStoneCharging = 0;
            SoulScytheCharge = 10;
            WaitPhilosopherStone = 0;
            WaitTabula = 0;
            WaitSoulScythe = 0;
            WaitGlamdring = 0;
            BosWait = 0;
            PlayerClass = 0;
            sanctusdamagecounter = 0;
            FTDaily = false;
            IsFTRead = false;
            LichPoints = 0;
            cursepts = 0;
            DeathPos = Vector2.Zero;
           // PhoenixDaily = false;
            IsFTRead = false;
            FTDaily = false;
            LichPoints = 0;
            mirrordaily = false;
            amuletdaily = false;
            IsNaga = false;
            IsVampire = false;
            Wetness = 0;
            downedWitch = false;
            Hunger = 0;
            SkillPoints = 0;
            SpendedPoints = 0;
            CanBeFrozenByElemental = false;         
            InkPos = Vector2.Zero; 
            downedMinotaur = false;
            IsBoSRead = false;
            IsReadMazarbul = false;
            CasketCount = 0;
            PhoenixPendantWasSpawned = false;
            #region bossesinitialization
            KilledBossesCount = 0;
            KilledKingSlime = false;
            KilledEoC = false;
            KilledEoW = false;
            KilledBoC = false;
            KilledWormorBrain = false;
            KilledSkeletron = false;
            KilledQoB = false;
            KilledWoF = false;
            KilledSkeletronPrime = false;
            KilledTwins = false;
            KilledDestroyer = false;
            KilledAnyMechBoss = false;
            KilledPlantera = false;
            KilledGolem = false;
            KilledFishron = false;
            KilledCultist = false;
            KilledMoonLord = false;
            KilledMourningWood = false;
            KilledPumpking = false;
            KilledSantaNK1 = false;
            KilledEverscream = false;
            KilledIceQueen = false;
            KilledFlyingDutchman = false;
            KilledMartianSaucer = false;
            KilledBetsy = false;
            #endregion
            #region skillsinitialization
            skill1lvl = 0;
            skill2lvl = 0;
            skill3lvl = 0;
            skill4lvl = 0;
            skill5lvl = 0;
            skill6lvl = 0;
            skill7lvl = 0;
            skill8lvl = 0;
            skill9lvl = 0;
            skill10lvl = 0;
            skill11lvl = 0;
            skill12lvl = 0;
            skill13lvl = 0;
            skill14lvl = 0;
            skill15lvl = 0;
            skill16lvl = 0;
            skill17lvl = 0;
            skill18lvl = 0;
            skill19lvl = 0;
            skill20lvl = 0;
            skill21lvl = 0;
            skill22lvl = 0;
            skill23lvl = 0;
            skill24lvl = 0;
            skill25lvl = 0;
            skill26lvl = 0;
            skill27lvl = 0;
            skill28lvl = 0;
            skill29lvl = 0;
            skill30lvl = 0;
            skill31lvl = 0;
            skill32lvl = 0;
            skill33lvl = 0;
            skill34lvl = 0;
            skill35lvl = 0;
            skill36lvl = 0;
            skill37lvl = 0;
            skill38lvl = 0;
            skill39lvl = 0;
            skill40lvl = 0;
            skill41lvl = 0;
            skill42lvl = 0;
            skill43lvl = 0;
            skill44lvl = 0;
            skill45lvl = 0;
            skill46lvl = 0;
            skill47lvl = 0;
            skill48lvl = 0;
            skill49lvl = 0;
            skill50lvl = 0;
            skill51lvl = 0;
            skill53lvl = 0;
            skill54lvl = 0;
            skill55lvl = 0;
            skill56lvl = 0;
            skill57lvl = 0;
            skill58lvl = 0;
            skill59lvl = 0;
            skill60lvl = 0;
            skill61lvl = 0;
            skill62lvl = 0;
            skill63lvl = 0;
            skill64lvl = 0;
            skill65lvl = 0;
            skill66lvl = 0;
            skill67lvl = 0;
            skill68lvl = 0;
            skill69lvl = 0;
            skill70lvl = 0;
            skill71lvl = 0;
            skill72lvl = 0;
            skill73lvl = 0;
            skill75lvl = 0;
            skill76lvl = 0;
            skill77lvl = 0;
            skill78lvl = 0;
            skill89lvl = 0;
            skill80lvl = 0;
            skill81lvl = 0;
            skill82lvl = 0;
            skill83lvl = 0;
            skill84lvl = 0;
            skill85lvl = 0;
            skill86lvl = 0;
            skill87lvl = 0;
            skill88lvl = 0;
            skill99lvl = 0;
            skill90lvl = 0;
            skill91lvl = 0;
            skill92lvl = 0;
            skill93lvl = 0;
            skill94lvl = 0;
            skill95lvl = 0;
            skill96lvl = 0;
            skill97lvl = 0;
            skill98lvl = 0;
            skill99lvl = 0;
            skill100lvl = 0;
            skill101lvl = 0;
            skill102lvl = 0;
            skill103lvl = 0;
            skill104lvl = 0;
            skill105lvl = 0;
            skill106lvl = 0;
            skill107lvl = 0;
            skill108lvl = 0;
            skill110lvl = 0;
            skill111lvl = 0;
            skill112lvl = 0;
            skill113lvl = 0;
            skill114lvl = 0;
            skill115lvl = 0;
            skill116lvl = 0;
            skill117lvl = 0;
            skill118lvl = 0;
            skill119lvl = 0;
            skill120lvl = 0;
            skill121lvl = 0;
            skill122lvl = 0;
            skill123lvl = 0;
            skill124lvl = 0;
            skill125lvl = 0;
            skill126lvl = 0;
            skill127lvl = 0;
            skill128lvl = 0;
            skill129lvl = 0;
            skill130lvl = 0;
            skill131lvl = 0;
            skill132lvl = 0;
            skill133lvl = 0;
            skill134lvl = 0;
            skill135lvl = 0;
            skill136lvl = 0;
            skill137lvl = 0;
            skill138lvl = 0;
            skill139lvl = 0;
            skill140lvl = 0;
            skill141lvl = 0;
            skill142lvl = 0;
            skill143lvl = 0;
            skill144lvl = 0;
            skill146lvl = 0;
            skill147lvl = 0;
            #endregion
        }
        public override void SaveData(TagCompound tag)
        {
            tag["witchsecondatt"] = witchsecondatt;
            tag["OneRingTimer"] = OneRingTimer;
            tag["TabulaResearch"] = TabulaResearch;
            tag["WaitStoneCharging"] = WaitStoneCharging;
            tag["BosWait"] = BosWait;
            tag["SoulScytheCharge"] = SoulScytheCharge;
            tag["WaitPhilosopherStone"] = WaitPhilosopherStone;
            tag["WaitTabula"] = WaitTabula;
            tag["WaitSoulScythe"] = WaitSoulScythe;
            tag["WaitGlamdring"] = WaitGlamdring;
            tag["PlayerClass"] = PlayerClass;
            tag["SkillPoints"] = SkillPoints;
            tag["SpendedPoints"] = SpendedPoints;
            tag["cursepts"] = cursepts;
            tag["DeathPos"] = DeathPos;
            tag["PhoenixDaily"] = PhoenixDaily;
            tag["CanBeFrozenByElemental"] = CanBeFrozenByElemental;
            tag["InkPos"] = InkPos;
            tag["downedMinotaur"] = downedMinotaur;
            tag["downedWitch"] = downedWitch;
            tag["IsBoSRead"] = IsBoSRead;
            tag["IsReadMazarbul"] = IsReadMazarbul;
            tag["IsFTRead"] = IsFTRead;
            tag["FTDaily"] = FTDaily;
            tag["LichPoints"] = LichPoints;
            tag["mirrordaily"] = mirrordaily;
            tag["amuletdaily"] = amuletdaily;
            tag["IsNaga"] = IsNaga;
            tag["IsVampire"] = IsVampire;
            tag["Wetness"] = Wetness;
            tag["Hunger"] = Hunger;
            tag["NoRPGGameplay"] = NoRPGGameplay;
            tag["PhoenixPendantWasSpawned"] = PhoenixPendantWasSpawned;
            #region bossessave
            tag["KilledBossesCount"] = KilledBossesCount;
            tag["KilledKingSlime"] = KilledKingSlime;
            tag["KilledEoC"] = KilledEoC;
            tag["KilledEoW"] = KilledEoW;
            tag["KilledBoC"] = KilledBoC;
            tag["KilledWormorBrain"] = KilledWormorBrain;
            tag["KilledSkeletron"] = KilledSkeletron;
            tag["KilledQoB"] = KilledQoB;
            tag["KilledWoF"] = KilledWoF;
            tag["KilledSkeletronPrime"] = KilledSkeletronPrime;
            tag["KilledDestroyer"] = KilledDestroyer;
            tag["KilledAnyMechBoss"] = KilledAnyMechBoss;
            tag["KilledPlantera"] = KilledPlantera;
            tag["KilledGolem"] = KilledGolem;
            tag["KilledFishron"] = KilledFishron;
            tag["KilledCultist"] = KilledCultist;
            tag["KilledMoonLord"] = KilledMoonLord;
            tag["KilledMourningWood"] = KilledMourningWood;
            tag["KilledPumpking"] = KilledPumpking;
            tag["KilledSantaNK1"] = KilledSantaNK1;
            tag["KilledEverscream"] = KilledEverscream;
            tag["KilledIceQueen"] = KilledIceQueen;
            tag["KilledFlyingDutchman"] = KilledFlyingDutchman;
            tag["KilledMartianSaucer"] = KilledMartianSaucer;
            tag["KilledBetsy"] = KilledBetsy;
            tag["KilledTwins"] = KilledTwins;
            #endregion
            #region skillssave
            tag["skill1lvl"] = skill1lvl;
            tag["skill2lvl"] = skill2lvl;
            tag["skill3lvl"] = skill3lvl;
            tag["skill4lvl"] = skill4lvl;
            tag["skill5lvl"] = skill5lvl;
            tag["skill6lvl"] = skill6lvl;
            tag["skill7lvl"] = skill7lvl;
            tag["skill8lvl"] = skill8lvl;
            tag["skill9lvl"] = skill9lvl;
            tag["skill10lvl"] = skill10lvl;
            tag["skill11lvl"] = skill11lvl;
            tag["skill12lvl"] = skill12lvl;
            tag["skill13lvl"] = skill13lvl;
            tag["skill14lvl"] = skill14lvl;
            tag["skill15lvl"] = skill15lvl;
            tag["skill16lvl"] = skill16lvl;
            tag["skill17lvl"] = skill17lvl;
            tag["skill18lvl"] = skill18lvl;
            tag["skill19lvl"] = skill19lvl;
            tag["skill20lvl"] = skill20lvl;
            tag["skill21lvl"] = skill21lvl;
            tag["skill22lvl"] = skill22lvl;
            tag["skill23lvl"] = skill23lvl;
            tag["skill24lvl"] = skill24lvl;
            tag["skill25lvl"] = skill25lvl;
            tag["skill26lvl"] = skill26lvl;
            tag["skill27lvl"] = skill27lvl;
            tag["skill28lvl"] = skill28lvl;
            tag["skill29lvl"] = skill29lvl;
            tag["skill30lvl"] = skill30lvl;
            tag["skill31lvl"] = skill31lvl;
            tag["skill32lvl"] = skill32lvl;
            tag["skill33lvl"] = skill33lvl;
            tag["skill34lvl"] = skill34lvl;
            tag["skill35lvl"] = skill35lvl;
            tag["skill36lvl"] = skill36lvl;
            tag["skill37lvl"] = skill37lvl;
            tag["skill38lvl"] = skill38lvl;
            tag["skill39lvl"] = skill39lvl;
            tag["skill40lvl"] = skill40lvl;
            tag["skill41lvl"] = skill41lvl;
            tag["skill42lvl"] = skill42lvl;
            tag["skill43lvl"] = skill43lvl;
            tag["skill44lvl"] = skill44lvl;
            tag["skill45lvl"] = skill45lvl;
            tag["skill46lvl"] = skill46lvl;
            tag["skill47lvl"] = skill47lvl;
            tag["skill48lvl"] = skill48lvl;
            tag["skill49lvl"] = skill49lvl;
            tag["skill50lvl"] = skill50lvl;
            tag["skill51lvl"] = skill51lvl;
            tag["skill53lvl"] = skill53lvl;
            tag["skill54lvl"] = skill54lvl;
            tag["skill55lvl"] = skill55lvl;
            tag["skill56lvl"] = skill56lvl;
            tag["skill57lvl"] = skill57lvl;
            tag["skill58lvl"] = skill58lvl;
            tag["skill59lvl"] = skill59lvl;
            tag["skill60lvl"] = skill60lvl;
            tag["skill61lvl"] = skill61lvl;
            tag["skill62lvl"] = skill62lvl;
            tag["skill63lvl"] = skill63lvl;
            tag["skill64lvl"] = skill64lvl;
            tag["skill65lvl"] = skill65lvl;
            tag["skill66lvl"] = skill66lvl;
            tag["skill67lvl"] = skill67lvl;
            tag["skill68lvl"] = skill68lvl;
            tag["skill69lvl"] = skill69lvl;
            tag["skill70lvl"] = skill70lvl;
            tag["skill71lvl"] = skill71lvl;
            tag["skill72lvl"] = skill72lvl;
            tag["skill73lvl"] = skill73lvl;
            tag["skill75lvl"] = skill75lvl;
            tag["skill76lvl"] = skill76lvl;
            tag["skill77lvl"] = skill77lvl;
            tag["skill78lvl"] = skill78lvl;
            tag["skill79lvl"] = skill79lvl;
            tag["skill80lvl"] = skill80lvl;
            tag["skill81lvl"] = skill81lvl;
            tag["skill82lvl"] = skill82lvl;
            tag["skill83lvl"] = skill83lvl;
            tag["skill84lvl"] = skill84lvl;
            tag["skill85lvl"] = skill85lvl;
            tag["skill86lvl"] = skill86lvl;
            tag["skill87lvl"] = skill87lvl;
            tag["skill88lvl"] = skill88lvl;
            tag["skill89lvl"] = skill89lvl;
            tag["skill90lvl"] = skill90lvl;
            tag["skill91lvl"] = skill91lvl;
            tag["skill92lvl"] = skill92lvl;
            tag["skill93lvl"] = skill93lvl;
            tag["skill94lvl"] = skill94lvl;
            tag["skill95lvl"] = skill95lvl;
            tag["skill96lvl"] = skill96lvl;
            tag["skill97lvl"] = skill97lvl;
            tag["skill98lvl"] = skill98lvl;
            tag["skill99lvl"] = skill99lvl;
            tag["skill100lvl"] = skill100lvl;
            tag["skill101lvl"] = skill101lvl;
            tag["skill102lvl"] = skill102lvl;
            tag["skill103lvl"] = skill103lvl;
            tag["skill104lvl"] = skill104lvl;
            tag["skill105lvl"] = skill105lvl;
            tag["skill106lvl"] = skill106lvl;
            tag["skill107lvl"] = skill107lvl;
            tag["skill108lvl"] = skill108lvl;
            tag["skill110lvl"] = skill110lvl;
            tag["skill111lvl"] = skill111lvl;
            tag["skill112lvl"] = skill112lvl;
            tag["skill113lvl"] = skill113lvl;
            tag["skill114lvl"] = skill114lvl;
            tag["skill115lvl"] = skill115lvl;
            tag["skill116lvl"] = skill116lvl;
            tag["skill117lvl"] = skill117lvl;
            tag["skill118lvl"] = skill118lvl;
            tag["skill119lvl"] = skill119lvl;
            tag["skill120lvl"] = skill120lvl;
            tag["skill121lvl"] = skill121lvl;
            tag["skill122lvl"] = skill122lvl;
            tag["skill123lvl"] = skill123lvl;
            tag["skill124lvl"] = skill124lvl;
            tag["skill125lvl"] = skill125lvl;
            tag["skill126lvl"] = skill126lvl;
            tag["skill127lvl"] = skill127lvl;
            tag["skill128lvl"] = skill128lvl;
            tag["skill129lvl"] = skill129lvl;
            tag["skill130lvl"] = skill130lvl;
            tag["skill131lvl"] = skill131lvl;
            tag["skill132lvl"] = skill132lvl;
            tag["skill133lvl"] = skill133lvl;
            tag["skill134lvl"] = skill134lvl;
            tag["skill135lvl"] = skill135lvl;
            tag["skill136lvl"] = skill136lvl;
            tag["skill137lvl"] = skill137lvl;
            tag["skill138lvl"] = skill138lvl;
            tag["skill139lvl"] = skill139lvl;
            tag["skill140lvl"] = skill140lvl;
            tag["skill141lvl"] = skill141lvl;
            tag["skill142lvl"] = skill142lvl;
            tag["skill143lvl"] = skill143lvl;
            tag["skill144lvl"] = skill144lvl;
            tag["skill146lvl"] = skill146lvl;
            tag["skill147lvl"] = skill147lvl;
            #endregion

        }
        #region SaveData
        /*public override void SaveData(TagCompound tag)
        {
            TagCompound save_data = new TagCompound();
            tag("witchsecondatt", witchsecondatt);
            tag("OneRingTimer", OneRingTimer);
            tag("TabulaResearch", TabulaResearch);
            tag("WaitStoneCharging", WaitStoneCharging);
            tag("BosWait", BosWait);
            tag("SoulScytheCharge", SoulScytheCharge);
            tag("WaitPhilosopherStone", WaitPhilosopherStone);
            tag("WaitTabula", WaitTabula);
            tag("WaitSoulScythe", WaitSoulScythe);
            tag("WaitGlamdring", WaitGlamdring);           
            tag("PlayerClass", PlayerClass);
            tag("SkillPoints", SkillPoints);
            tag("SpendedPoints", SpendedPoints);
            tag("cursepts", cursepts);
            tag("DeathPos", DeathPos);
            tag("PhoenixDaily", PhoenixDaily);
            tag("CanBeFrozenByElemental", CanBeFrozenByElemental);
            tag("InkPos", InkPos);
            tag("downedMinotaur", downedMinotaur);
            tag("downedWitch", downedWitch);
            tag("IsBoSRead", IsBoSRead);
            tag("IsReadMazarbul", IsReadMazarbul);
            tag("IsFTRead", IsFTRead);
            tag("FTDaily", FTDaily);
            tag("LichPoints", LichPoints);
            tag("mirrordaily", mirrordaily);
            tag("amuletdaily", amuletdaily);
            tag("IsNaga", IsNaga);
            tag("IsVampire", IsVampire);
            tag("Wetness", Wetness);
            tag("Hunger", Hunger);
            tag("NoRPGGameplay", NoRPGGameplay);
            tag("PhoenixPendantWasSpawned", PhoenixPendantWasSpawned);
            #region bossessave
            tag("KilledBossesCount", KilledBossesCount);
            tag("KilledKingSlime", KilledKingSlime);
            tag("KilledEoC", KilledEoC);
            tag("KilledEoW", KilledEoW);
            tag("KilledBoC", KilledBoC);
            tag("KilledWormorBrain", KilledWormorBrain);
            tag("KilledSkeletron", KilledSkeletron);
            tag("KilledQoB", KilledQoB);
            tag("KilledWoF", KilledWoF);
            tag("KilledSkeletronPrime", KilledSkeletronPrime);
            tag("KilledDestroyer", KilledDestroyer);
            tag("KilledAnyMechBoss", KilledAnyMechBoss);
            tag("KilledPlantera", KilledPlantera);
            tag("KilledGolem", KilledGolem);
            tag("KilledFishron", KilledFishron);
            tag("KilledCultist", KilledCultist);
            tag("KilledMoonLord", KilledMoonLord);
            tag("KilledMourningWood", KilledMourningWood);
            tag("KilledPumpking", KilledPumpking);
            tag("KilledSantaNK1", KilledSantaNK1);
            tag("KilledEverscream", KilledEverscream);
            tag("KilledIceQueen", KilledIceQueen);
            tag("KilledFlyingDutchman", KilledFlyingDutchman);
            tag("KilledMartianSaucer", KilledMartianSaucer);
            tag("KilledBetsy", KilledBetsy);
            tag("KilledTwins", KilledTwins);
            #endregion
            #region skillssave
            tag("skill1lvl", skill1lvl);
            tag("skill2lvl", skill2lvl);
            tag("skill3lvl", skill3lvl);
            tag("skill4lvl", skill4lvl);
            tag("skill5lvl", skill5lvl);
            tag("skill6lvl", skill6lvl);
            tag("skill7lvl", skill7lvl);
            tag("skill8lvl", skill8lvl);
            tag("skill9lvl", skill9lvl);
            tag("skill10lvl", skill10lvl);
            tag("skill11lvl", skill11lvl);
            tag("skill12lvl", skill12lvl);
            tag("skill13lvl", skill13lvl);
            tag("skill14lvl", skill14lvl);
            tag("skill15lvl", skill15lvl);
            tag("skill16lvl", skill16lvl);
            tag("skill17lvl", skill17lvl);
            tag("skill18lvl", skill18lvl);
            tag("skill19lvl", skill19lvl);
            tag("skill20lvl", skill20lvl);
            tag("skill21lvl", skill21lvl);
            tag("skill22lvl", skill22lvl);
            tag("skill23lvl", skill23lvl);
            tag("skill24lvl", skill24lvl);
            tag("skill25lvl", skill25lvl);
            tag("skill26lvl", skill26lvl);
            tag("skill27lvl", skill27lvl);
            tag("skill28lvl", skill28lvl);
            tag("skill29lvl", skill29lvl);
            tag("skill30lvl", skill30lvl);
            tag("skill31lvl", skill31lvl);
            tag("skill32lvl", skill32lvl);
            tag("skill33lvl", skill33lvl);
            tag("skill34lvl", skill34lvl);
            tag("skill35lvl", skill35lvl);
            tag("skill36lvl", skill36lvl);
            tag("skill37lvl", skill37lvl);
            tag("skill38lvl", skill38lvl);
            tag("skill39lvl", skill39lvl);
            tag("skill40lvl", skill40lvl);
            tag("skill41lvl", skill41lvl);
            tag("skill42lvl", skill42lvl);
            tag("skill43lvl", skill43lvl);
            tag("skill44lvl", skill44lvl);
            tag("skill45lvl", skill45lvl);
            tag("skill46lvl", skill46lvl);
            tag("skill47lvl", skill47lvl);
            tag("skill48lvl", skill48lvl);
            tag("skill49lvl", skill49lvl);
            tag("skill50lvl", skill50lvl);
            tag("skill51lvl", skill51lvl);
            tag("skill53lvl", skill53lvl);
            tag("skill54lvl", skill54lvl);
            tag("skill55lvl", skill55lvl);
            tag("skill56lvl", skill56lvl);
            tag("skill57lvl", skill57lvl);
            tag("skill58lvl", skill58lvl);
            tag("skill59lvl", skill59lvl);
            tag("skill60lvl", skill60lvl);
            tag("skill61lvl", skill61lvl);
            tag("skill62lvl", skill62lvl);
            tag("skill63lvl", skill63lvl);
            tag("skill64lvl", skill64lvl);
            tag("skill65lvl", skill65lvl);
            tag("skill66lvl", skill66lvl);
            tag("skill67lvl", skill67lvl);
            tag("skill68lvl", skill68lvl);
            tag("skill69lvl", skill69lvl);
            tag("skill70lvl", skill70lvl);
            tag("skill71lvl", skill71lvl);
            tag("skill72lvl", skill72lvl);
            tag("skill73lvl", skill73lvl);
            tag("skill75lvl", skill75lvl);
            tag("skill76lvl", skill76lvl);
            tag("skill77lvl", skill77lvl);
            tag("skill78lvl", skill78lvl);
            tag("skill79lvl", skill79lvl);
            tag("skill80lvl", skill80lvl);
            tag("skill81lvl", skill81lvl);
            tag("skill82lvl", skill82lvl);
            tag("skill83lvl", skill83lvl);
            tag("skill84lvl", skill84lvl);
            tag("skill85lvl", skill85lvl);
            tag("skill86lvl", skill86lvl);
            tag("skill87lvl", skill87lvl);
            tag("skill88lvl", skill88lvl);
            tag("skill89lvl", skill89lvl);
            tag("skill90lvl", skill90lvl);
            tag("skill91lvl", skill91lvl);
            tag("skill92lvl", skill92lvl);
            tag("skill93lvl", skill93lvl);
            tag("skill94lvl", skill94lvl);
            tag("skill95lvl", skill95lvl);
            tag("skill96lvl", skill96lvl);
            tag("skill97lvl", skill97lvl);
            tag("skill98lvl", skill98lvl);
            tag("skill99lvl", skill99lvl);
            tag("skill100lvl", skill100lvl);
            tag("skill101lvl", skill101lvl);
            tag("skill102lvl", skill102lvl);
            tag("skill103lvl", skill103lvl);
            tag("skill104lvl", skill104lvl);
            tag("skill105lvl", skill105lvl);
            tag("skill106lvl", skill106lvl);
            tag("skill107lvl", skill107lvl);
            tag("skill108lvl", skill108lvl);
            tag("skill110lvl", skill110lvl);
            tag("skill111lvl", skill111lvl);
            tag("skill112lvl", skill112lvl);
            tag("skill113lvl", skill113lvl);
            tag("skill114lvl", skill114lvl);
            tag("skill115lvl", skill115lvl);
            tag("skill116lvl", skill116lvl);
            tag("skill117lvl", skill117lvl);
            tag("skill118lvl", skill118lvl);
            tag("skill119lvl", skill119lvl);
            tag("skill120lvl", skill120lvl);
            tag("skill121lvl", skill121lvl);
            tag("skill122lvl", skill122lvl);
            tag("skill123lvl", skill123lvl);
            tag("skill124lvl", skill124lvl);
            tag("skill125lvl", skill125lvl);
            tag("skill126lvl", skill126lvl);
            tag("skill127lvl", skill127lvl);
            tag("skill128lvl", skill128lvl);
            tag("skill129lvl", skill129lvl);
            tag("skill130lvl", skill130lvl);
            tag("skill131lvl", skill131lvl);
            tag("skill132lvl", skill132lvl);
            tag("skill133lvl", skill133lvl);
            tag("skill134lvl", skill134lvl);
            tag("skill135lvl", skill135lvl);
            tag("skill136lvl", skill136lvl);
            tag("skill137lvl", skill137lvl);
            tag("skill138lvl", skill138lvl);
            tag("skill139lvl", skill139lvl);
            tag("skill140lvl", skill140lvl);
            tag("skill141lvl", skill141lvl);
            tag("skill142lvl", skill142lvl);
            tag("skill143lvl", skill143lvl);
            tag("skill144lvl", skill144lvl);
            tag("skill146lvl", skill146lvl);
            tag("skill147lvl", skill147lvl);
            #endregion
            return;
        }*/
        #endregion
        public override void LoadData(TagCompound tag)
        {
            IsReadMazarbul = tag.GetBool("IsReadMazarbul");
            OneRingTimer = tag.GetInt("OneRingTimer");
            IsFTRead = tag.GetBool("IsFTRead");
            LichPoints = tag.GetInt("LichPoints");
            mirrordaily = tag.GetBool("mirrordaily");
            amuletdaily = tag.GetBool("amuletdaily");
            IsNaga = tag.GetBool("IsNaga");
            IsVampire = tag.GetBool("IsVampire");
            Wetness = tag.GetInt("Wetness");
            Hunger = tag.GetInt("Hunger");
            TabulaResearch = tag.GetBool("TabulaResearch");
            WaitStoneCharging = tag.GetInt("WaitStoneCharging");
            SoulScytheCharge = tag.GetInt("SoulScytheCharge");
            WaitPhilosopherStone = tag.GetInt("WaitPhilosopherStone");
            WaitTabula = tag.GetInt("WaitTabula");
            WaitSoulScythe = tag.GetInt("WaitSoulScythe");
            PlayerClass = tag.GetInt("PlayerClass");
            sanctusdamagecounter = tag.GetInt("SanctusDamageCounter");
            FTDaily = tag.GetBool("FTDaily");
            cursepts = tag.GetInt("cursepts");
            DeathPos = tag.Get<Vector2>("DeathPos");
            CanBeFrozenByElemental = tag.GetBool("CanBeFrozenByElemental");
            InkPos = tag.Get<Vector2>("InkPos");
            PhoenixDaily = tag.GetBool("PhoenixDaily");
            downedMinotaur = tag.GetBool("downedMinotaur");
            downedWitch = tag.GetBool("downedWitch");
            WaitGlamdring = tag.GetInt("WaitGlamdring");
            IsBoSRead = tag.GetBool("IsBoSRead");
            CasketCount = tag.GetInt("CasketCount");
            BosWait = tag.GetInt("BosWait");
            witchsecondatt = tag.GetBool("witchsecondatt");
            SkillPoints = tag.GetInt("SkillPoints");
            SpendedPoints = tag.GetInt("SpendedPoints");
            NoRPGGameplay = tag.GetBool("NoRPGGameplay");
            PhoenixPendantWasSpawned = tag.GetBool("PhoenixPendantWasSpawned");
            #region bossesload 
            KilledBossesCount = tag.GetInt("KilledBossesCount");
            KilledKingSlime = tag.GetBool("KilledKingSlime");
            KilledEoC = tag.GetBool("KilledEoC");
            KilledEoW = tag.GetBool("KilledEoW");
            KilledBoC = tag.GetBool("KilledBoC");
            KilledWormorBrain = tag.GetBool("KilledWormorBrain");
            KilledSkeletron = tag.GetBool("KilledSkeletron");
            KilledQoB = tag.GetBool("KilledQoB");
            KilledWoF = tag.GetBool("KilledWoF");
            KilledSkeletronPrime = tag.GetBool("KilledSkeletronPrime");
            KilledDestroyer = tag.GetBool("KilledDestroyer");
            KilledAnyMechBoss = tag.GetBool("KilledAnyMechBoss");
            KilledTwins = tag.GetBool("KilledTwins");
            KilledPlantera = tag.GetBool("KilledPlantera");
            KilledGolem = tag.GetBool("KilledGolem");
            KilledFishron = tag.GetBool("KilledFishron");
            KilledMoonLord = tag.GetBool("KilledMoonLord");
            KilledCultist = tag.GetBool("KilledCultist");
            KilledMourningWood = tag.GetBool("KilledMourningWood");
            KilledPumpking = tag.GetBool("KilledPumpking");
            KilledSantaNK1 = tag.GetBool("KilledSantaNK1");
            KilledEverscream = tag.GetBool("KilledEverscream");
            KilledIceQueen = tag.GetBool("KilledIceQueen");
            KilledFlyingDutchman = tag.GetBool("KilledFlyingDutchman");
            KilledMartianSaucer = tag.GetBool("KilledMartianSaucer");
            KilledBetsy = tag.GetBool("KilledBetsy");
            #endregion
            #region skillsload
            skill1lvl = tag.GetInt("skill1lvl");
            skill2lvl = tag.GetInt("skill2lvl");
            skill3lvl = tag.GetInt("skill3lvl");
            skill4lvl = tag.GetInt("skill4lvl");
            skill5lvl = tag.GetInt("skill5lvl");
            skill6lvl = tag.GetInt("skill6lvl");
            skill7lvl = tag.GetInt("skill7lvl");
            skill8lvl = tag.GetInt("skill8lvl");
            skill9lvl = tag.GetInt("skill9lvl");
            skill10lvl = tag.GetInt("skill10lvl");
            skill11lvl = tag.GetInt("skill11lvl");
            skill12lvl = tag.GetInt("skill12lvl");
            skill13lvl = tag.GetInt("skill13lvl");
            skill14lvl = tag.GetInt("skill14lvl");
            skill15lvl = tag.GetInt("skill15lvl");
            skill16lvl = tag.GetInt("skill16lvl");
            skill17lvl = tag.GetInt("skill17lvl");
            skill18lvl = tag.GetInt("skill18lvl");
            skill19lvl = tag.GetInt("skill19lvl");
            skill20lvl = tag.GetInt("skill20lvl");
            skill21lvl = tag.GetInt("skill21lvl");
            skill22lvl = tag.GetInt("skill22lvl");
            skill23lvl = tag.GetInt("skill23lvl");
            skill24lvl = tag.GetInt("skill24lvl");
            skill25lvl = tag.GetInt("skill25lvl");
            skill26lvl = tag.GetInt("skill26lvl");
            skill27lvl = tag.GetInt("skill27lvl");
            skill28lvl = tag.GetInt("skill28lvl");
            skill29lvl = tag.GetInt("skill29lvl");
            skill30lvl = tag.GetInt("skill30lvl");
            skill31lvl = tag.GetInt("skill31lvl");
            skill32lvl = tag.GetInt("skill32lvl");
            skill33lvl = tag.GetInt("skill33lvl");
            skill34lvl = tag.GetInt("skill34lvl");
            skill35lvl = tag.GetInt("skill35lvl");
            skill36lvl = tag.GetInt("skill36lvl");
            skill37lvl = tag.GetInt("skill37lvl");
            skill38lvl = tag.GetInt("skill38lvl");
            skill39lvl = tag.GetInt("skill39lvl");
            skill40lvl = tag.GetInt("skill40lvl");
            skill41lvl = tag.GetInt("skill41lvl");
            skill42lvl = tag.GetInt("skill42lvl");
            skill43lvl = tag.GetInt("skill43lvl");
            skill44lvl = tag.GetInt("skill44lvl");
            skill45lvl = tag.GetInt("skill45lvl");
            skill46lvl = tag.GetInt("skill46lvl");
            skill47lvl = tag.GetInt("skill47lvl");
            skill48lvl = tag.GetInt("skill48lvl");
            skill49lvl = tag.GetInt("skill49lvl");
            skill50lvl = tag.GetInt("skill50lvl");
            skill51lvl = tag.GetInt("skill51lvl");
            skill53lvl = tag.GetInt("skill53lvl");
            skill54lvl = tag.GetInt("skill54lvl");
            skill55lvl = tag.GetInt("skill55lvl");
            skill56lvl = tag.GetInt("skill56lvl");
            skill57lvl = tag.GetInt("skill57lvl");
            skill58lvl = tag.GetInt("skill58lvl");
            skill59lvl = tag.GetInt("skill59lvl");
            skill60lvl = tag.GetInt("skill60lvl");
            skill61lvl = tag.GetInt("skill61lvl");
            skill62lvl = tag.GetInt("skill62lvl");
            skill63lvl = tag.GetInt("skill63lvl");
            skill64lvl = tag.GetInt("skill64lvl");
            skill65lvl = tag.GetInt("skill65lvl");
            skill66lvl = tag.GetInt("skill66lvl");
            skill67lvl = tag.GetInt("skill67lvl");
            skill68lvl = tag.GetInt("skill68lvl");
            skill69lvl = tag.GetInt("skill69lvl");
            skill70lvl = tag.GetInt("skill70lvl");
            skill71lvl = tag.GetInt("skill71lvl");
            skill72lvl = tag.GetInt("skill72lvl");
            skill73lvl = tag.GetInt("skill73lvl");
            skill75lvl = tag.GetInt("skill75lvl");
            skill76lvl = tag.GetInt("skill76lvl");
            skill77lvl = tag.GetInt("skill77lvl");
            skill78lvl = tag.GetInt("skill78lvl");
            skill79lvl = tag.GetInt("skill79lvl");
            skill80lvl = tag.GetInt("skill80lvl");
            skill81lvl = tag.GetInt("skill81lvl");
            skill82lvl = tag.GetInt("skill82lvl");
            skill83lvl = tag.GetInt("skill83lvl");
            skill84lvl = tag.GetInt("skill84lvl");
            skill85lvl = tag.GetInt("skill85lvl");
            skill86lvl = tag.GetInt("skill86lvl");
            skill87lvl = tag.GetInt("skill87lvl");
            skill88lvl = tag.GetInt("skill88lvl");
            skill89lvl = tag.GetInt("skill89lvl");
            skill90lvl = tag.GetInt("skill90lvl");
            skill91lvl = tag.GetInt("skill91lvl");
            skill92lvl = tag.GetInt("skill92lvl");
            skill93lvl = tag.GetInt("skill93lvl");
            skill94lvl = tag.GetInt("skill94lvl");
            skill95lvl = tag.GetInt("skill95lvl");
            skill96lvl = tag.GetInt("skill96lvl");
            skill97lvl = tag.GetInt("skill97lvl");
            skill98lvl = tag.GetInt("skill98lvl");
            skill99lvl = tag.GetInt("skill99lvl");
            skill100lvl = tag.GetInt("skill100lvl");
            skill101lvl = tag.GetInt("skill101lvl");
            skill102lvl = tag.GetInt("skill102lvl");
            skill103lvl = tag.GetInt("skill103lvl");
            skill104lvl = tag.GetInt("skill104lvl");
            skill105lvl = tag.GetInt("skill105lvl");
            skill106lvl = tag.GetInt("skill106lvl");
            skill107lvl = tag.GetInt("skill107lvl");
            skill108lvl = tag.GetInt("skill108lvl");
            skill110lvl = tag.GetInt("skill110lvl");
            skill111lvl = tag.GetInt("skill111lvl");
            skill112lvl = tag.GetInt("skill112lvl");
            skill113lvl = tag.GetInt("skill113lvl");
            skill114lvl = tag.GetInt("skill114lvl");
            skill115lvl = tag.GetInt("skill115lvl");
            skill116lvl = tag.GetInt("skill116lvl");
            skill117lvl = tag.GetInt("skill117lvl");
            skill118lvl = tag.GetInt("skill118lvl");
            skill119lvl = tag.GetInt("skill119lvl");
            skill120lvl = tag.GetInt("skill120lvl");
            skill121lvl = tag.GetInt("skill121lvl");
            skill122lvl = tag.GetInt("skill122lvl");
            skill123lvl = tag.GetInt("skill123lvl");
            skill124lvl = tag.GetInt("skill124lvl");
            skill125lvl = tag.GetInt("skill125lvl");
            skill126lvl = tag.GetInt("skill126lvl");
            skill127lvl = tag.GetInt("skill127lvl");
            skill128lvl = tag.GetInt("skill128lvl");
            skill129lvl = tag.GetInt("skill129lvl");
            skill130lvl = tag.GetInt("skill130lvl");
            skill131lvl = tag.GetInt("skill131lvl");
            skill132lvl = tag.GetInt("skill132lvl");
            skill133lvl = tag.GetInt("skill133lvl");
            skill134lvl = tag.GetInt("skill134lvl");
            skill135lvl = tag.GetInt("skill135lvl");
            skill136lvl = tag.GetInt("skill136lvl");
            skill137lvl = tag.GetInt("skill137lvl");
            skill138lvl = tag.GetInt("skill138lvl");
            skill139lvl = tag.GetInt("skill139lvl");
            skill140lvl = tag.GetInt("skill140lvl");
            skill141lvl = tag.GetInt("skill141lvl");
            skill142lvl = tag.GetInt("skill142lvl");
            skill143lvl = tag.GetInt("skill143lvl");
            skill144lvl = tag.GetInt("skill144lvl");
            skill146lvl = tag.GetInt("skill146lvl");
            skill147lvl = tag.GetInt("skill147lvl");
            #endregion
        }
       
        public override void DrawEffects(PlayerDrawSet drawInfo, ref float r, ref float g, ref float b, ref float a, ref bool fullBright)
        {
            Player drawPlayer = drawInfo.drawPlayer;
            Mod mod = ModLoader.GetMod("Bismuth");
            BismuthPlayer modPlayer = (BismuthPlayer)drawPlayer.GetModPlayer<BismuthPlayer>();
            #region EmpathyChainDrawing
            if (modPlayer.EmpathyNPCs.Count > 0)
            {
                for (int i = 0; i < modPlayer.EmpathyNPCs.Count; i++)
                {
                    Texture2D texture = ModContent.Request<Texture2D>("Bismuth/Glow/EmpathyChain").Value;
                    Vector2 vector = Main.player[Main.myPlayer].Center;
                    Vector2 mountedCenter = Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().EmpathyNPCs[i].Center;
                    Rectangle? sourceRectangle = null;
                    Vector2 origin = new Vector2((float)texture.Width * 0.5f, (float)texture.Height * 0.5f);
                    float num = (float)texture.Height;
                    Vector2 vector2 = mountedCenter - vector;
                    float rotation = (float)Math.Atan2((double)vector2.Y, (double)vector2.X) - 1.57f;
                    bool flag = true;
                    if (float.IsNaN(vector.X) && float.IsNaN(vector.Y))
                    {
                        flag = false;
                    }
                    if (float.IsNaN(vector2.X) && float.IsNaN(vector2.Y))
                    {
                        flag = false;
                    }
                    while (flag)
                    {
                        if ((double)vector2.Length() < (double)num + 1.0)
                        {
                            flag = false;
                        }
                        else
                        {
                            Vector2 value = vector2;
                            value.Normalize();
                            vector += value * num;
                            vector2 = mountedCenter - vector;
                            Color color = new Color(255, 255, 255, 80);
                            //  color = Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().EmpathyNPCs[i].GetAlpha(color);
                            //   spriteBatch.Draw();
                             Main.spriteBatch.Draw(texture, vector - Main.screenPosition, sourceRectangle, color, rotation, origin, 1f, SpriteEffects.None, 0);
                            Lighting.AddLight(vector, 0.496f, 0.394f, 0.116f);
                            //  Main.playerDrawData.Add(drawData);
                        }
                    }
                }
            }
            #endregion
        }
        public override void PostUpdateEquips()
        {            
            #region TribeCurseUpdate
            if (TribeCurse)
            {
                ++this.TribeCurseCounter;
                if (this.TribeCurseCounter > 4)
                {
                    ++this.TribeCurseFrame;
                    this.TribeCurseCounter = 0;
                }
                if (this.TribeCurseFrame > 9)
                    this.TribeCurseFrame = 0;
            }
            #endregion
            #region BoneTrapUpdate
            if (BoneTrap)
            {
                if (BoneTrapFrame < 4)
                {
                    if (BoneTrapCounter % 8 == 0)
                        BoneTrapFrame++;
                }
                if (BoneTrapCounter > 164 && BoneTrapCounter <= 180)
                {
                    if (BoneTrapCounter % 8 == 0)
                        BoneTrapFrame++;
                }
            }
            else
            {
                BoneTrapCounter = 0;
                BoneTrapFrame = 0;
            }
            #endregion
            #region EnergyShieldUpdate
            if (Player.FindBuffIndex(ModContent.BuffType<EnergyShield>()) != -1)
            {
                ++this.EnergyShieldCounter;
                if (this.EnergyShieldCounter > 4)
                {
                    ++this.EnergyShieldFrame;
                    this.EnergyShieldCounter = 0;
                }
                if (this.EnergyShieldFrame > 4)
                    this.EnergyShieldFrame = 0;
            }
            #endregion
            #region GlaciationUpdate
            if (Player.FindBuffIndex(ModContent.BuffType<Glaciation>()) != -1)
            {
                if (GlaciationFrame < 5)
                {
                    if (GlaciationCounter % 8 == 0)
                        GlaciationFrame++;
                }
                if (GlaciationCounter > 388 && GlaciationCounter <= 420)
                {
                    if (GlaciationCounter % 8 == 0)
                        GlaciationFrame++;
                }
            }
            else
            {
                GlaciationCounter = 0;
                GlaciationFrame = 0;
            }
            #endregion
        }
        private void ApplyCritBonus(ref int damage, bool crit)
        {

            if (crit)
            {
                damage *= (int)(critDmgMult + critDmgMultForSkills) / 2;
            }
        }
        public override IEnumerable<Item> AddStartingItems(bool mediumCoreDeath)
        {
            if (!mediumCoreDeath)
            {
                yield return new Item(ModContent.ItemType<AdventurersBook>());
                yield return new Item(ModContent.ItemType<ClassEngraving>());
                yield return new Item(ModContent.ItemType<BismuthumCasket>());
                //yield return new Item(ModContent.ItemType<Items.Other.GrannyGun>()); были комментирование  
                //yield return new Item(ItemID.EndlessMusketPouch);
            }
        }

        #region RaceDrawing
        // впемено отключено и перемишено в BismuthPlayerLayer
        #endregion
        public void TeleportPlayer()
        {
            int checkmaze = Player.FindBuffIndex(ModContent.BuffType<FearOfMaze>());
            int checkcooldown = Player.FindBuffIndex(ModContent.BuffType<TeleportCooldown>());
            if (checkmaze == -1 && checkcooldown == -1 && skill72lvl > 0)
            {
                Vector2 oldpos = Player.position;
                for (int i = 0; i < 20; i++)
                {
                    int teleportdust = Dust.NewDust(oldpos, Player.width / 2, Player.height / 2, 62);
                    Main.dust[teleportdust].noGravity = true;
                    Main.dust[teleportdust].velocity *= 0f;
                    Main.dust[teleportdust].scale = 1f;
                }
                Player.position = Main.MouseWorld;
                Vector2 newpos = Player.position;
                Vector2 way = newpos - oldpos;
                for (int i = 0; i < 20; i++)
                {
                    int teleportdust2 = Dust.NewDust(newpos, Player.width / 2, Player.height / 2, 62);
                    Main.dust[teleportdust2].noGravity = true;
                    Main.dust[teleportdust2].velocity *= 0f;
                    Main.dust[teleportdust2].scale = 1f;
                }
                for (int i = 0; i < 150; i++)
                {
                    oldpos += (way / 150);
                    int teleportdust3 = Dust.NewDust(oldpos, Player.width / 2, Player.height / 2, 62);
                    Main.dust[teleportdust3].noGravity = true;
                    Main.dust[teleportdust3].scale = 1f;
                    if (skill75lvl > 0)
                        Projectile.NewProjectile(Player.GetSource_FromThis(), oldpos, new Vector2(0, 0), ModContent.ProjectileType<TeleportTrail>(), 500, 4f, Main.myPlayer);
                }
                if (skill73lvl > 0)
                    Player.AddBuff(ModContent.BuffType<TeleportCooldown>(), 480);
                else
                    Player.AddBuff(ModContent.BuffType<TeleportCooldown>(), 900);
            } 
        }
        public override void OnHurt(Player.HurtInfo info)
        {
            if (skill11lvl > 0)
                Player.AddBuff(ModContent.BuffType<WoundHealing>(), 240);
            if (skill56lvl > 0)
            {
                int manabonus = (int)info.Damage / 2;
                manabonus = Math.Max(1, manabonus);
                Player.statMana += manabonus;
                Player.ManaEffect(manabonus);
            }
            if (Player.FindBuffIndex(ModContent.BuffType<MagiciansAura>()) != -1)
            {
                int manabonus;
                if (Player.statMana > Player.statManaMax2 / 2)                
                    manabonus = (int)info.Damage / 10;                
                else
                    manabonus = (int)info.Damage / 4;
                manabonus = Math.Max(1, manabonus);
                Player.statMana += manabonus;
                Player.ManaEffect(manabonus);
            }
            if (sanctusdamagecounter < 10000)
                sanctusdamagecounter += (int)info.Damage;
            else
                sanctusdamagecounter = 10000;

            if (IsNaga && !Player.stoned && !Player.frostArmor)
            {
              //  playSound = false;
                SoundEngine.PlaySound(SoundID.NPCHit23, Player.position);
            }
            if (FTDaily && IsFTRead && (Player.statLife > info.Damage) && (float)((Player.statLife - info.Damage) / Player.statLifeMax2) < 0.2f)
            {
                Player.HealEffect((int)(Player.statLifeMax2 * 0.4f) - Player.statLife);
                Player.statLife = (int)(Player.statLifeMax2 * 0.4f) + (int)info.Damage;
                FTDaily = false;
            }
        }
        #region VampireMethods
        public void vampireHeal(int dmg, Vector2 Position)
        {            
            Projectile.NewProjectile(Player.GetSource_FromThis(), Position.X, Position.Y, 0f, 0f, 305, 0, 0f);
        }
        public void Manasteel(int dmg, Vector2 Position)
        {
            Projectile.NewProjectile(Player.GetSource_FromThis(), Position.X, Position.Y, 0f, 0f, ModContent.ProjectileType<ManaVamp>(), 0, 0f);
        }
        public void Lich(int dmg, Vector2 Position)
        {
            Projectile.NewProjectile(Player.GetSource_FromThis(), Position.X, Position.Y, 0f, 0f, ModContent.ProjectileType<LichP>(), 0, 0f);
        }
        #endregion
        public override bool PreKill(double damage, int hitDirection, bool pvp, ref bool playSound, ref bool genGore, ref PlayerDeathReason damageSource)
        {
            bool temp = false;
           
            for (int num66 = 0; num66 < 58; num66++)
            {
                if (Player.inventory[num66].type == ModContent.ItemType<TruePhilosopherStone>() && Player.inventory[num66].stack > 0)
                {
                    Player.AddBuff(ModContent.BuffType<Reviving>(), 300);
                    Player.statLife = 1;
                    temp = true;
                    return false;
                }
            }
            if (!temp)
                return true;

            if (KilledBossesCount == 6 && amuletdaily && IsEquippedArchmagesAmulet)
            {
                Player.AddBuff(ModContent.BuffType<MagicFreezing>(), 480);
                Player.AddBuff(ModContent.BuffType<Absorption>(), 660);
                amuletdaily = false;
                return false;
            }

            NetworkText DeathReason1 = NetworkText.FromLiteral(Player.name + this.GetLocalization("Chat.Death").Value);
            NetworkText DeathReason2 = NetworkText.FromLiteral(Player.name + this.GetLocalization("Chat.Death2").Value);
            if (Player.FindBuffIndex(ModContent.BuffType<DeathWish>()) != -1)
            {
                damageSource = PlayerDeathReason.ByCustomReason(DeathReason1);
            }            
            if(OneRingTimer > 3600)
                damageSource = PlayerDeathReason.ByCustomReason(DeathReason2);
         
            return true;
        }

        public override void Kill(double damage, int hitDirection, bool pvp, PlayerDeathReason damageSource)
        {
            if (cursepts < 5)
            {
                for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                {
                    if (Player.armor[k].type == ModContent.ItemType<SignOfUndead>())
                    {
                        cursepts++;
                    }
                }
            }
            if (IsVampire && Hunger == 0)
                Hunger = 30;
            if (IsNaga && Wetness == 0) 
                Wetness = 30;
            sanctusdamagecounter = 0;
            DeathPos = Player.position;
            if (IsEquippedOneRing)
            {
                if (Player.lavaWet)
                {
                    for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                    {
                        if (Player.armor[k].type == ModContent.ItemType<RingOfOmnipotence>())
                        {
                            Player.armor[k].stack--;
                        }
                    }
                    SoundEngine.PlaySound(SoundID.NPCDeath6, Player.position);
                    OneRingTimer = 0;
                }
                else
                {
                    OneRingTimer = 3600;
                   
                }
            }
            if (EmpathyNPCs.Count > 0)
            {
                for (int i = EmpathyNPCs.Count - 1; i != -1; i--)
                {
                    NPC npc = EmpathyNPCs[i];
                    npc.life = -1;
                    npc.active = false;
                    EmpathyNPCs.Remove(npc);
                }
            }
        }
        public override void PostUpdate()
        {
            if (CustomChatClose)
            {
                Main.CloseNPCChatOrSign();
                CustomChatClose = false;
            }
            if (IsEquippedRekstrisBoots && !RekstrisBootsRoar)
            {
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/RekstrisRoar"), Player.position);
                RekstrisBootsRoar = true;
            }
            if (!IsEquippedRekstrisBoots && RekstrisBootsRoar)
            {
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/RekstrisRoar"), Player.position);
                RekstrisBootsRoar = false;
            }
            if (IsEquippedRekstrisChest && !RekstrisChestRoar)
            {
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/RekstrisRoar"), Player.position);
                RekstrisChestRoar = true;
            }
            if (!IsEquippedRekstrisChest && RekstrisChestRoar)
            {
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/RekstrisRoar"), Player.position);
                RekstrisChestRoar = false;
            }
            if (IsEquippedRekstrisHelmet && !RekstrisHelmRoar)
            {
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/RekstrisRoar"), Player.position);
                RekstrisHelmRoar = true;
            }
            if (!IsEquippedRekstrisHelmet && RekstrisHelmRoar)
            {
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/RekstrisRoar"), Player.position);
                RekstrisHelmRoar = false;
            }          
        }
        public override void UpdateEquips()
        {
            if (IsEquippedArchmagesAmulet && KilledBossesCount > 3 && Player.statLife < Player.statLifeMax2 / 2)
            {
                Player.AddBuff(ModContent.BuffType<MagiciansAura>(), 2);
            }
            Player.statLifeMax2 = (int)(Player.statLifeMax2 * (1 - ((float)cursepts * 0.1f)));
            for (int i = 0; i < Main.npc.Length; ++i)
            {
                if (IsEquippedBansheesHead && Main.npc[i].active && !Main.npc[i].friendly && Vector2.Distance(Main.npc[i].position, Player.position) < 500f && (Main.npc[i].lifeMax - Main.npc[i].life) < Main.npc[i].lifeMax / 10 && Main.npc[i].type != NPCID.TargetDummy)
                {
                    Main.npc[i].life -= Main.npc[i].lifeMax / 10;
                    Main.npc[i].defense = 0;
                    Lich(0, Main.npc[i].position);
                    // Тут отрисовка эффекта
                }
               
            }          
            if (IsEquippedGoldenRune && Player.statLife < Player.statLifeMax2 / 2 && Player.statMana > 0)
            {
                if (Main.time % 6 == 0)
                {
                    Player.statLife++;

                }
                if (Main.time % 2 == 0)
                    Player.statMana--;
            }
            if (LichPoints >= 50)
                LichPoints = 50;
            if (IsEquippedLichCrown)
            {
                // int temp = player.statLifeMax2; были комментирование  
                // player.statLifeMax2 /= 5;
                Player.statLifeMax2 = (int)((float)Player.statLifeMax2 * (0.2f + (float)LichPoints / 50));
                lichvisual = true;
            }
            if (IsEquippedNecklace && IsNaga)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.01f * (float)(Wetness / 5);
                Player.GetCritChance(DamageClass.Throwing) += Wetness / 5;
            }
            if (!IsEquippedLichCrown)
            {
                lichvisual = false;
                LichPoints = 0;
            }
            //if (OneRingTimer > 3600 && Main.HoverItem.type == ModContent.ItemType<RingOfOmnipotence>()) // dsa
            //{
            //    Main.mouseLeft = false;
            //    Main.mouseLeftRelease = false;
            //}
            if (cursepts > 0 && Player.lifeRegen > 0)
            {
                Player.lifeRegen = 0;
            }
            if (!IsEquippedSanctus)
                sanctusdamagecounter = 0;
            if (IsFTRead)
            {
                Player.lifeRegen += 4;
            }
            if (Main.time == 1 && !FTDaily)
                FTDaily = true;
            if (Main.time == 1 && IsEquippedArchmagesAmulet)
                amuletdaily = true;
            if (Main.time == 1 && IsEquippedMarbleMask)
                mirrordaily = true;
            if (Main.time == 1 && !PhoenixDaily)
                PhoenixDaily = true;
            if (IsEquippedOneRing)
            {
                OneRingTimer++;
                if (OneRingTimer > 3600)
                {
                    if (Player.lifeRegen > 0)
                        Player.lifeRegen = 0;
                    Player.lifeRegen -= (OneRingTimer - 3600) / 60;
                            
                }      
                if(OneRingTimer > 1800)
                {

                    alpharingmax = alpharingmax > 255 ? 255 : (OneRingTimer - 1800) / 20;
                    if (alpharing >= alpharingmax)
                        growring = -1;
                    else if (alpharing <= 0)
                        growring = 1;
                    alpharing += 2 * growring;
                }
            }
            else
            {
                if(OneRingTimer > 0)
                    OneRingTimer--;
                alpharing = 0;
                alpharingmax = 0;
            }
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<Doomhammer>() && Player.itemAnimation > 0 && Player.itemAnimation < 30)
            {
                DoomhammerTimer++;
            }
            else
                DoomhammerTimer = 0;
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<Content.Items.Other.Luceat>() && Player.itemAnimation == 1)
            {

                for (int k = 0; k < 80; k++)
                {
                    Dust.NewDust(Player.position, Player.width, Player.height, DustID.AmberBolt, 0, 0, 0, default(Color), 0.8f);
                }
            }
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<PoisonFlask>() && Player.itemAnimation > 0 && Player.itemAnimation < 20)
            {
                PoisonTimer++;
                if(PoisonTimer == 1)
                    Player.inventory[Player.selectedItem].stack--;
            }
            else
                PoisonTimer = 0;
            NetworkText DeathReason3 = NetworkText.FromLiteral(Player.name + this.GetLocalization("Chat.Death3").Value);
            if (PoisonTimer == 19)
                Player.KillMe(PlayerDeathReason.ByCustomReason(DeathReason3), 50000, 0);
            if (Player.ownedProjectileCounts[ModContent.ProjectileType<Fireball>()] < 1 && OrbitalAlive)
                Projectile.NewProjectile(Player.GetSource_FromThis(), Player.position, new Microsoft.Xna.Framework.Vector2(0, 0), ModContent.ProjectileType<Fireball>(), 50, 4f, Main.myPlayer);
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<SacrificialDagger>())
            {
                critDmgMult += 2f;
            }
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<ManGosh>())
            {
                BlockChance += 25;
            }
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<BowOfOdysseus>() && Main.mouseRight && ArrowCharge != 100)
            {
                if (ArrowCharge == 1)
                    SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/BowstringTighten"), Player.position);
                ArrowCharge++;
                if(ArrowCharge == 99)
                    SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/BowstringReady"), Player.position);
            }
            if (!Main.mouseRight && ArrowCharge < 100 && Player.inventory[Player.selectedItem].type == ModContent.ItemType<BowOfOdysseus>())
            {
                ArrowCharge = 0;
                Player.itemAnimation = 0;
            }
            if (Player.inventory[Player.selectedItem].type != ModContent.ItemType<TheseusSword>() && TheseusCombo != 0)
            {
                TheseusCombo = 0;
            }
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<TheseusSword>())
            {
                if (TheseusCombo >= 100)
                    TheseusCombo = 100;
                else
                {
                    if (Main.time % 4 == 0 && TheseusCombo > 0)
                        TheseusCombo--;
                }
            }          
            bool flag = false;
            if (Player.inventory[Player.selectedItem].CountsAsClass(DamageClass.Magic))
            {
                for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                {
                    if (Player.armor[k].type == ModContent.ItemType<ArchmagesAmulet>()) 
                    {
                        flag = true;
                        if (KilledBossesCount == 4)
                            critDmgMult += 0.2f;
                        if (KilledBossesCount == 5)
                            critDmgMult += 0.5f;
                        if (KilledBossesCount == 6)
                            critDmgMult += 0.8f;
                        if(amuletcounter < 3180)
                            amuletcounter++;
                    }
                }
            }
            if(!flag)
                amuletcounter = 0;
                if (Player.inventory[Player.selectedItem].CountsAsClass(DamageClass.Ranged))
                {
                    if (IsEquippedTribalQuiver)
                    {
                        critDmgMult += 0.1f;
                    }

                    /*if (skill101lvl > 0 && player.inventory[player.selectedItem].useTime > 45 && player.inventory[player.selectedItem].useAnimation > 45) были комментирование  
                    {
                        player.inventory[player.selectedItem].useTime = 45;
                        player.inventory[player.selectedItem].useAnimation = 45;
                    }
                    if (skill101lvl > 1 && player.inventory[player.selectedItem].useTime > 38 && player.inventory[player.selectedItem].useAnimation > 38)
                    {
                        player.inventory[player.selectedItem].useTime = 38;
                        player.inventory[player.selectedItem].useAnimation = 38;
                    }
                    if (skill101lvl > 2 && player.inventory[player.selectedItem].useTime > 32 && player.inventory[player.selectedItem].useAnimation > 32)
                    {
                        player.inventory[player.selectedItem].useTime = 32;
                        player.inventory[player.selectedItem].useAnimation = 32;
                    }*/
                }
            if (Player.inventory[Player.selectedItem].CountsAsClass(DamageClass.Ranged) && skill121lvl > 0)
                Player.inventory[Player.selectedItem].autoReuse = true;
            for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
            {
                if (Player.armor[k].Name.Contains("Ring"))
                {
                    RingsCount++;
                }
            }

        }
        int revivingtaimer = 0;
        
        int bootstimer = 0;
        bool covered = false;
        int helmettimer = 0;
        int oldhp = 0;
        int bald = -1;
        int alt = -1;
        int full = -1;
        int whispertime = 0;
        int whispercurrent = 0;
        public string oldmanname;
        public string necrosname;
        public static float screenmovestep = 0f;
        
        public override void PreUpdateBuffs()
        {
            if (!PhoenixPendantWasSpawned && Player.name == "Spinal111")
            {
                PhoenixPendantWasSpawned = true;
                Player.QuickSpawnItem(Player.GetSource_FromThis(), ModContent.ItemType<PhoenixPendant>());
            }
            if (Main.tile[Player.position.ToTileCoordinates().X, Player.position.ToTileCoordinates().Y + 3].TileType == ModContent.TileType<SwampMud>() || Main.tile[Player.position.ToTileCoordinates().X + 1, Player.position.ToTileCoordinates().Y + 3].TileType == ModContent.TileType<SwampMud>())
            {
                Player.AddBuff(ModContent.BuffType<SwampQuagmire>(), 2);
            }
            if (BismuthWorld.MazeStartX != 0 && BismuthWorld.MazeStartY != 0 && BismuthWorld.downedEoC && !BismuthWorld.OpenedRedChest)//
            {
                if (Player.Center.ToTileCoordinates().X > BismuthWorld.MazeStartX && Player.Center.ToTileCoordinates().X < BismuthWorld.MazeStartX + 58 && Player.Center.ToTileCoordinates().Y > BismuthWorld.MazeStartY && Player.Center.ToTileCoordinates().Y < BismuthWorld.MazeStartY + 57 && !BismuthWorld.DestroyedMaze)
                    Player.AddBuff(ModContent.BuffType<FearOfMaze>(), 100);
            }
            if (Player.Center.ToTileCoordinates().X > BismuthWorld.WaterTempleX + 13 && Player.Center.ToTileCoordinates().X < BismuthWorld.WaterTempleX + 36 && Player.Center.ToTileCoordinates().Y > BismuthWorld.WaterTempleY + 5 && Player.Center.ToTileCoordinates().Y < BismuthWorld.WaterTempleY + 17 && !BismuthWorld.downedBanshee && !NPC.AnyNPCs(ModContent.NPCType<Banshee>()))
            {
                NPC.NewNPC(Player.GetSource_FromThis(), (BismuthWorld.WaterTempleX + 25) * 16, (BismuthWorld.WaterTempleY + 16) * 16, ModContent.NPCType<Banshee>());
            }
            if (Vector2.Distance(Player.Center, new Vector2(BismuthWorld.WaterTempleX * 16, BismuthWorld.WaterTempleY * 16)) > 2000f && !NPC.AnyNPCs(ModContent.NPCType<NagaMerchant>()) && BismuthWorld.downedBanshee)
            {
                NPC.NewNPC(Player.GetSource_FromThis(), (BismuthWorld.WaterTempleX + 25) * 16, (BismuthWorld.WaterTempleY + 16) * 16, ModContent.NPCType<NagaMerchant>());
            }
            if (Player.Center.ToTileCoordinates().X > Main.spawnTileX - 100 && Player.Center.ToTileCoordinates().X < Main.spawnTileX + 105 && Player.Center.ToTileCoordinates().Y > Main.spawnTileY - 30 && Player.Center.ToTileCoordinates().Y < Main.spawnTileY + 30)
                Player.AddBuff(ModContent.BuffType<AuraOfEmpire>(), 2);
            if (Player.Center.ToTileCoordinates().X > BismuthWorld.TotemX - 115 && Player.Center.ToTileCoordinates().X < BismuthWorld.TotemX + 50 && Player.Center.ToTileCoordinates().Y > BismuthWorld.TotemY - 40 && Player.Center.ToTileCoordinates().Y < BismuthWorld.TotemY + 40 && BismuthWorld.IsTotemActive)
            {
                Player.AddBuff(ModContent.BuffType<TribeCurse>(), 2);
                if (Main.rand.Next(0, 1080) == 0)
                    NPC.NewNPC(Player.GetSource_FromThis(), BismuthWorld.TotemX * 16, (BismuthWorld.TotemY + 2) * 16, ModContent.NPCType<Papuan>());
                if (Main.rand.Next(0, 1260) == 0)
                    NPC.NewNPC(Player.GetSource_FromThis(), BismuthWorld.TotemX * 16, (BismuthWorld.TotemY + 2) * 16, ModContent.NPCType<PapuanArcher>());
                if (Main.rand.Next(0, 1800) == 0)
                    NPC.NewNPC(Player.GetSource_FromThis(), BismuthWorld.TotemX * 16, (BismuthWorld.TotemY + 2) * 16, ModContent.NPCType<PapuanWarrior>());
                if (Main.rand.Next(0, 2700) == 0 && BismuthWorld.downedEoC)
                    NPC.NewNPC(Player.GetSource_FromThis(), BismuthWorld.TotemX * 16, (BismuthWorld.TotemY + 5) * 16, ModContent.NPCType<SandWormHead>());
                if (Main.hardMode && Main.rand.Next(0, 4000) == 0 && !NPC.AnyNPCs(ModContent.NPCType<PapuanWizard>()) && !BismuthWorld.WizardDay && Main.dayTime)
                {
                    BismuthWorld.WizardDay = true;
                    NPC.NewNPC(Player.GetSource_FromThis(), BismuthWorld.TotemX * 16, (BismuthWorld.TotemY + 2) * 16, ModContent.NPCType<PapuanWizard>());
                }

            }
            if (NPC.AnyNPCs(ModContent.NPCType<PriestTeleportation>()))
            {
                if(screenmovestep < 1f)
                    screenmovestep += 0.01f;

            }
            if (Player.FindBuffIndex(ModContent.BuffType<MagiciansAura>()) == -1)
                //Buffs.MagiciansAura.timealive = 0;
            if(NPC.AnyNPCs(ModContent.NPCType<StrangeOldman>()))
                oldmanname = Main.npc[NPC.FindFirstNPC(ModContent.NPCType<StrangeOldman>())].GivenName;
            if (NPC.AnyNPCs(ModContent.NPCType<Priest>()))
                necrosname = Main.npc[NPC.FindFirstNPC(ModContent.NPCType<Priest>())].GivenName;
            if (BismuthWorld.OrcishInvasionStage == 1)
                OrcishBarTimer = 300;
            else if (BismuthWorld.OrcishInvasionStage == 2)
            {
                if (OrcishBarTimer > 0)
                    OrcishBarTimer--;
            }
            else
                OrcishBarTimer = 0;
            #region EnergyShieldReflection
            if (Player.FindBuffIndex(ModContent.BuffType<EnergyShield>()) != -1 && skill108lvl == 0)
            {
                if (EnergyShieldAlpha > 100)
                    EnergyShieldAlpha--;
                else
                    EnergyShieldAlpha = 100;
                for (int i = 0; i < Main.projectile.Length; i++)
                {
                    if (Main.projectile[i].active && Main.projectile[i].hostile)
                    {
                        Rectangle rect1 = new Rectangle((int)(Player.position.X - 10f), (int)(Player.position.Y), 38, 42);
                        Rectangle rect2 = new Rectangle((int)(Player.position.X - 4f), (int)(Player.position.Y - 4f), 26, 50);
                        Rectangle rect3 = new Rectangle((int)(Player.position.X - 14f), (int)(Player.position.Y + 6f), 46, 30);
                        Rectangle rect4 = new Rectangle((int)(Player.position.X - 18f), (int)(Player.position.Y + 14f), 54, 14);
                        Projectile proj = Main.projectile[i];
                        if (rect1.Intersects(proj.Hitbox) || rect2.Intersects(proj.Hitbox) || rect3.Intersects(proj.Hitbox) || rect4.Intersects(proj.Hitbox))
                        {
                            if (proj.Center.X > Player.Center.X * 0.5f)
                            {

                                proj.direction = 1;
                                proj.spriteDirection = 1;
                            }
                            else
                            {
                                proj.direction = -1;
                                proj.spriteDirection = -1;
                            }
                            proj.timeLeft = proj.timeLeft / 2;
                            proj.hostile = false;
                            proj.friendly = true;
                            proj.owner = Player.whoAmI;
                            proj.velocity *= -1f;
                            proj.penetrate = 1;
                            proj.netUpdate = true;
                            EnergyShieldAlpha = 180;
                        }
                    }
                }
            }
            #endregion
            #region StingUpdate
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<Sting>())
            {
                Player.AddBuff(BuffID.Dangersense, 3);
                for (int i = 0; i < Main.npc.Length; i++)
                {
                    if (Main.npc[i].active && Main.npc[i].life > 0 && (Main.npc[i].type == ModContent.NPCType<Orc>() || Main.npc[i].type == ModContent.NPCType<OrcCrossbower>() || Main.npc[i].type == ModContent.NPCType<OrcDefender>() || Main.npc[i].type == ModContent.NPCType<OrcWizard>() || /*Main.npc[i].type == ModContent.NPCType<OrcRider>() ||*/ Main.npc[i].type == ModContent.NPCType<RhinoOrc>()) && Vector2.Distance(Player.Center, Main.npc[i].Center) < 1000f)
                        Lighting.AddLight(Player.Center, new Vector3(0.1f, 0.1f, 0.4f));
                }
            }
            #endregion
            #region SoulEaterUpdate
            if (NPC.AnyNPCs(ModContent.NPCType<RestlessSoul>()))
            {
                Player.GetDamage(DamageClass.Magic) += 0.1f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetDamage(DamageClass.Melee) += 0.1f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetDamage(DamageClass.Ranged) += 0.1f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetDamage(DamageClass.Summon) += 0.1f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetModPlayer<ModP>().assassinDamage += 0.1f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetDamage(DamageClass.Throwing) += 0.1f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetCritChance(DamageClass.Magic) += 10 * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetCritChance(DamageClass.Melee) += 10 * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetCritChance(DamageClass.Ranged) += 10 * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetCritChance(DamageClass.Throwing) += 10 * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                Player.GetModPlayer<ModP>().assassinCrit += 10 * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());
                critDmgMult += 0.5f * NPC.CountNPCS(ModContent.NPCType<RestlessSoul>());         
                Player.lifeRegen = -40;
            }
            if (SoulEaterCounter > 0)
                SoulEaterCounter--;
            #endregion
            if (!CanBeFrozenByElemental && Main.time % 108000 == 1)
                CanBeFrozenByElemental = true;
            #region EmpathyMirrorUpdate
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<EmpathyMirror>() && Main.mouseLeft)
            {
                for (int j = 0; j < Main.npc.Length; j++)
                {
                    NPC npc = Main.npc[j];
                    if (npc.active && npc.townNPC && npc.aiStyle != -1 && npc.life > 0 && npc.friendly && EmpathyNPCs.Count < 3 && !EmpathyNPCs.Contains(npc) && new Rectangle((int)npc.position.X, (int)npc.position.Y, npc.width, npc.height).Contains((int)Main.MouseWorld.X, (int)Main.MouseWorld.Y))
                    {
                        EmpathyNPCs.Add(npc);
                    }
                }
            }
            if (Player.inventory[Player.selectedItem].type == ModContent.ItemType<EmpathyMirror>() && Main.mouseRight)
            {
                for (int j = 0; j < Main.npc.Length; j++)
                {
                    NPC npc = Main.npc[j];
                    if (npc.active && npc.townNPC && npc.life > 0 && npc.friendly && EmpathyNPCs.Contains(npc) && new Rectangle((int)npc.position.X, (int)npc.position.Y, npc.width, npc.height).Contains((int)Main.MouseWorld.X, (int)Main.MouseWorld.Y))
                    {
                        EmpathyNPCs.Remove(npc);
                    }
                }
            }
            if (EmpathyNPCs.Count > 0)
            {
                for (int i = EmpathyNPCs.Count - 1; i != -1; i--)
                {
                    NPC npc = EmpathyNPCs[i];
                    if (npc.life < 0 || !npc.active)
                    {
                        NetworkText DeathReason4 = NetworkText.FromLiteral(Player.name + this.GetLocalization("Chat.Death4").Value);
                        Player.KillMe(PlayerDeathReason.ByCustomReason(DeathReason4), 10000, 1);
                        for (int k = 0; k < EmpathyNPCs.Count; k++)
                        {
                            NPC npctokill = EmpathyNPCs[i];
                            npctokill.life = -1;
                            npctokill.active = false;
                        }
                        EmpathyNPCs.Clear();
                        break;
                    }
                }
            }
            #endregion
            if (BOTDPlaces.Count > 0)
            {
                for (int i = BOTDPlaces.Count - 1; i != -1; i--)
                {
                    Vector2 pos = BOTDPlaces[i];
                    if (Vector2.Distance(Player.position, pos) > 600f)
                        BOTDPlaces.Remove(pos);
                }
            }
            #region InsanityUpdate
            if (Player.FindBuffIndex(ModContent.BuffType<BansheesScream>()) == -1)
            {
                if (alphabanshee != 0)
                    alphabanshee -= 2;
                growbanshee = 1;
            }
            if (OneRingTimer > 3000)
            {
                if (whispervolume <= 0.99f)
                    whispervolume += 0.0002f;
                if (OneRingTimer % 60 == 0)
                    SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/Heartbeat"), Player.position);

                whispercurrent++;

                if (whispercurrent == 441)
                {                 
                    whispercurrent = 0;
                    SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/Whisper"), Player.position);            
                }
            }
            else
            {
                whispervolume = 0;
                whispertime = 0;
                whispercurrent = 0;
            }
            #endregion
            #region CustomHairUpdate
            full = -1;
            if (!IsEquippedHeartOfSwamp)
                alt = -1;
            if (!IsEquippedLichCrown)
                bald = -1;            
            for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
            {
                if (Player.armor[k].faceSlot != 0 && Player.armor[k].type != 0 && Player.armor[k].type != ModContent.ItemType<LichCrown>() && Player.armor[k].type != ModContent.ItemType<HeartOfSwamp>())
                {
                    full = k;
                }
                if (Player.armor[k].type == ModContent.ItemType<LichCrown>())
                {
                    bald = k;
                }
                if (Player.armor[k].type == ModContent.ItemType<HeartOfSwamp>())
                {
                    alt = k;
                }
            }
            
            if (alt != -1 || bald != -1)
            {
                if (full > alt && full > bald)
                    myhair = 0;
                if (alt > bald && alt > full)
                    myhair = 1;
                if (bald > alt && bald > full)
                    myhair = 2;
            }
            else
                myhair = 0;
            #endregion            
            #region NarsilUpdate
            if (NarsilHitbox != null && (Player.inventory[Player.selectedItem].type != ModContent.ItemType<Narsil>() || Player.itemAnimation == 0))
            {
                NarsilHitbox = Rectangle.Empty;
            }
            for (int i = 0; i < Main.projectile.Length; i++)
            {
                if (Main.projectile[i].active && NarsilHitbox != null && Main.projectile[i].hostile)
                {
                    Projectile proj = Main.projectile[i];
                    if (NarsilHitbox.Intersects(proj.Hitbox))
                    {
                        if (proj.Center.X > Player.Center.X * 0.5f)
                        {

                            proj.direction = 1;
                            proj.spriteDirection = 1;
                        }
                        else
                        {
                            proj.direction = -1;
                            proj.spriteDirection = -1;
                        }
                        proj.timeLeft = proj.timeLeft / 2;
                        proj.hostile = false;
                        proj.friendly = true;
                        proj.owner = Player.whoAmI;
                        proj.velocity *= -1f;
                        proj.penetrate = 1;
                        proj.netUpdate = true;
                        Dust.NewDust(proj.position, 20, 20, 133, Main.rand.NextFloat(-1f, 1f), -5f);
                        Dust.NewDust(proj.position, 20, 20, 133, Main.rand.NextFloat(-1f, 1f), -5f);
                        Dust.NewDust(proj.position, 20, 20, 133, Main.rand.NextFloat(-1f, 1f), -5f);
                        CombatText.NewText(new Rectangle((int)Player.position.X, (int)Player.position.Y, Player.width, Player.height), Color.LightGoldenrodYellow, "Reflected!");
                        SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/Parry"), Player.position);
                    }
                }
            }
            #endregion
            #region DoomhammerUpdate
           
            if (DoomhammerTimer == 15)
            {
                int X1 = Player.position.ToTileCoordinates().X + (Player.direction > 0 ? 3 : -2);
                int X2 = Player.position.ToTileCoordinates().X + (Player.direction > 0 ? 4 : -3);
                int Y = Player.position.ToTileCoordinates().Y + 3;
                bool check = WorldGen.SolidTile(X1, Y) && WorldGen.SolidTile(X2, Y);
                if (check)
                {
                    Projectile.NewProjectile(Player.GetSource_FromThis(), new Vector2(X1 * 16 + (Player.direction > 0 ? 32 : 0), Y * 16), Vector2.Zero, ModContent.ProjectileType<DoomhammerP>(), 50, 4f, Main.myPlayer);
                    SoundEngine.PlaySound(SoundID.Item14, Player.position);
                }
            }
            #endregion
           
            if (Player.statLife < Player.statLifeMax2 * 0.2f && mirrordaily && IsEquippedMarbleMask)
            {
                Player.AddBuff(ModContent.BuffType<Specularity>(), 720);
                mirrordaily = false;
            }
            if (PlayerClass != 0)
            {
                switch (PlayerClass)
                {
                    case 1:
                        Player.GetModPlayer<Quests>().ActualPanel = WarriorPanel;
                        break;
                    case 2:
                        Player.GetModPlayer<Quests>().ActualPanel = RangerPanel;
                        break;
                    case 3:
                        Player.GetModPlayer<Quests>().ActualPanel = WizardPanel;
                        break;
                    case 4:
                        Player.GetModPlayer<Quests>().ActualPanel = ThrowerPanel;
                        break;
                    case 5:
                        Player.GetModPlayer<Quests>().ActualPanel = AssassinPanel;
                        break;
                }             
            }
            
           
            #region BossesUpdate
            #endregion
          
            
            #region NagaUpdate
            for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
            {
                if (Player.armor[k].type == ModContent.ItemType<TheRingOfTheSeas>())
                {
                    if (!IsNaga && !IsVampire)
                    {
                        IsNaga = true;
                        Wetness = 100;
                    }
                }
            }
            
            if (IsNaga)
            {
                if (!Main.raining && !Player.wet)
                {
                    if (Player.ZoneDesert)
                    {
                        if (Main.time % 180 == 0)
                            Wetness--;
                    }
                    else
                    {
                        if (Main.time % 900 == 0)
                            Wetness--;
                    }

                }
                if (Main.raining)
                {
                    if (Main.time % 600 == 0)
                        Wetness++;
                }
                if (Player.wet)
                {
                    if (Main.time % 240 == 0)
                        Wetness++;
                }
                if (Wetness <= 0)
                    Wetness = 0;
                if (Wetness >= 100)
                    Wetness = 100;
                if (Wetness >= 70 && Wetness <= 100)
                {
                    if (Player.lifeRegen > 0)
                    {
                        Player.lifeRegen *= 2;
                    }
                    Player.runAcceleration *= 1.15f;
                    Player.maxRunSpeed *= 1.15f;
                }
                if (Wetness >= 40 && Wetness <= 69)
                {
                    Player.runAcceleration *= 1.05f;
                    Player.maxRunSpeed *= 1.05f;
                    Player.lifeRegen += 4;
                }
                if (Wetness >= 1 && Wetness <= 39)
                {
                    Player.runAcceleration *= 0.8f;
                    Player.maxRunSpeed *= 0.8f;
                    if (Player.lifeRegen > 0)
                        Player.lifeRegen = 0;
                }
                if (Wetness == 0)
                {
                    if (Player.lifeRegen > 0)
                        Player.lifeRegen = 0;
                    Player.lifeRegen -= 50;
                }
                Player.accFlipper = true;
                Player.gills = true;
                #region WatersArmorBonus
                if (Player.armor[0].type == ModContent.ItemType<WatersHelmet>())
                {
                    Player.GetCritChance(DamageClass.Melee) += Wetness / 10;
                    Player.GetCritChance(DamageClass.Ranged) += Wetness / 10;
                    Player.GetCritChance(DamageClass.Magic) += Wetness / 10;
                    Player.GetCritChance(DamageClass.Throwing) += Wetness / 10;
                    Player.GetModPlayer<ModP>().assassinCrit += Wetness / 10;
                }
                if (Player.armor[1].type == ModContent.ItemType<WatersBreastplate>())
                {
                    Player.GetDamage(DamageClass.Melee) += (Wetness / 7) * 0.01f;
                    Player.GetDamage(DamageClass.Ranged) += (Wetness / 7) * 0.01f;
                    Player.GetDamage(DamageClass.Magic) += (Wetness / 7) * 0.01f;
                    Player.GetDamage(DamageClass.Summon) += (Wetness / 7) * 0.01f;
                    Player.GetDamage(DamageClass.Throwing) += (Wetness / 7) * 0.01f;
                    Player.GetModPlayer<ModP>().assassinDamage += Wetness / 7;
                    Player.lifeRegen += Wetness / 15;
                }
                if (Player.armor[2].type == ModContent.ItemType<WatersLeggings>())
                {
                    Player.runAcceleration *= 1 + ((float)Wetness / 200);
                    Player.maxRunSpeed *= 1 + ((float)Wetness / 200);
                }
                if (watersetbonus)
                    if (Main.time % 1800 == 0)
                        Wetness++;
                #endregion
            }
            #endregion
            #region VampireUpdate
            for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
            {
                if (Player.armor[k].type == ModContent.ItemType<TheRingOfTheBlood>())
                {
                    if (!IsNaga && !IsVampire)
                    {
                        IsVampire = true;
                        Hunger = 100;
                    }
                }
            }
            if (IsVampire)
            {
                Charm -= 10;
                if (Player.FindBuffIndex(ModContent.BuffType<VampireBat>()) != -1)
                {
                    if (Hunger < 70 && !IsEquippedDraculasCover)
                        Player.ClearBuff(ModContent.BuffType<VampireBat>());
                    if (Main.time % 240 == 0)
                        Hunger--;
                }
                else if (Main.time % 600 == 0)
                    Hunger--;
                    if (IsEquippedPendant)
                    {
                        if (Main.time % 1800 == 0)
                            Hunger++;
                        Player.GetModPlayer<ModP>().assassinDamage += ((float)(100 - Hunger) / 100) * 0.1f;
                    }               
                if (Hunger >= 100)
                    Hunger = 100;
                if (Hunger <= 0)
                    Hunger =  0;
                if (Player.armor[0].type <= 0 && Main.dayTime)
                {
                    for (int i = 0; i < Player.position.ToTileCoordinates().Y - 5; i++)
                    {
                        if (WorldGen.SolidTile(Main.tile[Player.position.ToTileCoordinates().X, Player.position.ToTileCoordinates().Y - i]))
                        {
                            covered = true;
                            break;
                        }
                        else
                            covered = false;
                    }
                    if (!covered)
                    {
                        if (Player.lifeRegen > 0)
                            Player.lifeRegen = 0;
                        Player.lifeRegen -= 40;
                    }
                }
                if (Player.armor[0].type > 0 && Main.dayTime)
                {
                    for (int i = 0; i < Player.position.ToTileCoordinates().Y - 5; i++)
                    {
                        if (WorldGen.SolidTile(Main.tile[Player.position.ToTileCoordinates().X, Player.position.ToTileCoordinates().Y - i]))
                        {
                            covered = true;
                            helmettimer = 0;
                            break;
                        }
                        else
                            covered = false;
                    }
                    if (!covered)
                    {
                        helmettimer++;
                        if (helmettimer >= 600)
                        {
                            if (Player.lifeRegen > 0)
                                Player.lifeRegen = 0;
                            Player.lifeRegen -= (int)(helmettimer / 100);
                        }
                        if (helmettimer >= 7200)
                            helmettimer = 7200;
                    }                    
                }
                if (Main.dayTime)
                {
                    Player.GetDamage(DamageClass.Melee) -= 0.1f;
                    Player.GetDamage(DamageClass.Ranged) -= 0.1f;
                    Player.GetDamage(DamageClass.Magic) -= 0.1f;
                    Player.GetDamage(DamageClass.Summon) -= 0.1f;
                    Player.GetDamage(DamageClass.Throwing) -= 0.1f;
                    Player.GetModPlayer<ModP>().assassinDamage -= 0.1f;
                }
                else
                {
                    Player.GetDamage(DamageClass.Melee) += 0.15f;
                    Player.GetDamage(DamageClass.Ranged) += 0.15f;
                    Player.GetDamage(DamageClass.Magic) += 0.15f;
                    Player.GetDamage(DamageClass.Summon) += 0.15f;
                    Player.GetDamage(DamageClass.Throwing) += 0.15f;
                    Player.GetModPlayer<ModP>().assassinDamage += 0.2f;
                    Player.endurance += 0.1f;
                    helmettimer = 0;
                }
                if (Hunger >= 70 && Hunger <= 100)
                {
                    Player.GetDamage(DamageClass.Melee) += 0.15f;
                    Player.GetDamage(DamageClass.Ranged) += 0.15f;
                    Player.GetDamage(DamageClass.Magic) += 0.15f;
                    Player.GetDamage(DamageClass.Summon) += 0.15f;
                    Player.GetDamage(DamageClass.Throwing) += 0.15f;
                    Player.GetModPlayer<ModP>().assassinDamage += 0.15f;
                    Player.runAcceleration *= 1.2f;
                    Player.maxRunSpeed *= 1.2f;
                }
                if (Hunger >= 1 && Hunger <= 24)
                {
                    Player.statDefense -= 30;
                    if (Player.lifeRegen > 0)
                        Player.lifeRegen = 0;
                    Player.runAcceleration *= 1.4f;
                    Player.maxRunSpeed *= 1.4f;
                    Player.AddBuff(BuffID.Hunter, 60);
                }
                if (Hunger == 0)
                {
                    if (Player.lifeRegen > 0)
                        Player.lifeRegen = 0;
                    Player.lifeRegen -= 50;
                }
            }
            #endregion
            #region PhilosopherStoneReviving
            if (Player.FindBuffIndex(ModContent.BuffType<Reviving>()) != -1)
            {
                if (revivingtaimer == 1)
                {
                    Projectile.NewProjectile(Player.GetSource_FromThis(), Player.position + new Vector2(-40f, -40f), new Vector2(0f, -0.4f), ModContent.ProjectileType<RevivingEagleP>(), 0, 0f, Main.player[Main.myPlayer].whoAmI);
                }
                revivingtaimer++;
                if (revivingtaimer >= 120)
                {
                    Player.ClearBuff(ModContent.BuffType<Reviving>());
                    Player.statLife = Player.statLifeMax2;
                    revivingtaimer = 0;
                    for (int num66 = 0; num66 < 58; num66++)
                    {
                        if (Player.inventory[num66].type == ModContent.ItemType<TruePhilosopherStone>() && Player.inventory[num66].stack > 0)
                        {
                            Player.inventory[num66].stack--;
                            Player.QuickSpawnItem(Player.GetSource_FromThis(), ModContent.ItemType<UnchargedTruePhilosopherStone>());
                        }
                    }
                }
            }
            #endregion
            #region HeroBootsUpdate
            #region ExtraJumps
            if (Player.mount.Active && Player.mount.BlockExtraJumps)
            {
                jumpAgainHeroThird = false;
                jumpAgainHeroSecond = false;

            }
            else
            {
                if (!doubleJumpHeroThird)
                {
                    jumpAgainHeroThird = false;
                }
                else if (Player.velocity.Y == 0f || Player.sliding)
                {
                    jumpAgainHeroThird = true;
                }
                if (!doubleJumpHeroSecond)
                {
                    jumpAgainHeroSecond = false;
                }
                else if (Player.velocity.Y == 0f || Player.sliding)
                {
                    jumpAgainHeroSecond = true;
                }
            }
            #endregion
            #region Blast
            int count = 0;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledEoC)
                count++;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledWormorBrain)
                count++;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledSkeletron)
                count++;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledWoF)
                count++;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledAnyMechBoss)
                count++;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledPlantera)
                count++;
            if (Main.player[Main.myPlayer].GetModPlayer<BismuthPlayer>().KilledGolem)
                count++;
            if (count >= 7)
            {
            }
            #endregion
            #endregion
            if (Player.FindBuffIndex(ModContent.BuffType<BoneTrap>()) == -1)
            {
                BoneTrap = false;
            }
            #region DesertVillageUpdate
            if (Player.FindBuffIndex(ModContent.BuffType<TribeCurse>()) == -1)
            {
                TribeCurse = false;
            }
            
            int checktribecurse = Player.FindBuffIndex(ModContent.BuffType<TribeCurse>());
            if (checktribecurse != -1)
            {
                Player.lifeRegen = 0;
                if (timer > 600 && timer < 1800)
                    Player.lifeRegen -= 10;
                if (timer > 1800 && timer < 3600)
                    Player.lifeRegen -= 30;
                if (timer > 3600)
                    Player.lifeRegen -= 60;
            }
            if (checktribecurse == -1)
            {
                timer = 0;
            }
            #endregion
            #region SourScytheChargeUpdate
            if (SoulScytheCharge == 0)
            {
                for (int num66 = 0; num66 < 58; num66++)
                {
                    if (Player.inventory[num66].type == ModContent.ItemType<SoulScythe>() && Player.inventory[num66].stack > 0)
                    {
                        Player.inventory[num66].stack = 0;
                        Player.QuickSpawnItem(Player.GetSource_FromThis(), ModContent.ItemType<UnchargedSoulScythe>());
                        SoulScytheCharge = -1;
                    }
                }
            }
            #endregion
            #region WaitTimeQuests
            #region BoSUpdate
            if (Player.GetModPlayer<Quests>().BookOfSecretsQuest == 100 && Player.GetModPlayer<Quests>().ElessarQuest <= 10)
            {
                if (BosWait < 86400)
                    BosWait++;
                else
                    BosWait = 86400;
            }
            else
                BosWait = 0;
            #endregion
            #region GlamdringUpdate
            if (Player.GetModPlayer<Quests>().GlamdringQuest == 30)
            {
                if (WaitGlamdring < 10800)
                    WaitGlamdring++;
                if (WaitGlamdring >= 10800)
                    WaitGlamdring = 10800;
            }
            else
                WaitGlamdring = 0;
            #endregion
            #region SoulScytheUpdate
            if (Player.GetModPlayer<Quests>().SoulScytheQuest == 10)
            {
                if (WaitSoulScythe < 1800)
                    WaitSoulScythe++;
                if (WaitSoulScythe >= 1800)
                    WaitSoulScythe = 1800;
            }
            else
                WaitSoulScythe = 0;
            #endregion
            #region PhilosopherStoneUpdate
            if (Player.GetModPlayer<Quests>().PhilosopherStoneQuest == 30)
            {
                if (WaitTabula < 86400)
                    WaitTabula++;
                if (WaitTabula >= 86400)
                    WaitTabula = 86400;
            }
            else
                WaitTabula = 0;
            #endregion
            #region StoneChargingUpdate
            if (Player.GetModPlayer<Quests>().PhilosopherStoneCharging == 10)
            {
                if (WaitStoneCharging < 1800)
                    WaitStoneCharging++;
                if (WaitStoneCharging >= 1800)
                    WaitStoneCharging = 1800;
            }
            else
                WaitStoneCharging = 0;
            #endregion
            #endregion
            #region SwampWaterUpdate
            if (Player.wet && ZoneSwamp)
            {
                Player.AddBuff(ModContent.BuffType<HealthDevourment>(), 60);
            }
            if (Player.FindBuffIndex(ModContent.BuffType<HealthDevourment>()) != -1)
            {
                Player.lifeRegen -= 120;
            }
            #endregion
            #region HeartOfSwampUpdate
            if (ZoneSwamp)
            {
                for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                {
                    if (Player.armor[k].type == ModContent.ItemType<HeartOfSwamp>())
                    {
                        Player.lifeRegen += 10;
                        break;
                    }
                }
            }
            #endregion
            
            #region OldmanTeleport
            if (Main.LocalPlayer.GetModPlayer<Quests>().LuceatQuest == 30 && Player.talkNPC == -1)
            {
                for (int i = 0; i < Main.npc.Length; ++i)
                {
                    if (Main.npc[i].active && Main.npc[i].type == ModContent.NPCType<StrangeOldman>() && Vector2.Distance(Main.npc[i].position, new Vector2((Main.spawnTileX + 45) * 16, (Main.spawnTileY - 10) * 16)) > 200f)
                    {
                        Main.npc[i].position = new Vector2((Main.spawnTileX + 45) * 16, (Main.spawnTileY - 10) * 16);
                        SoundEngine.PlaySound(SoundID.Item6);
                        for (int k = 0; k < 150; k++)
                        {
                            Dust.NewDust(new Vector2((BismuthWorld.MazeStartX + 4) * 16, (BismuthWorld.MazeStartY + 3) * 16 - 4), 20, 20, DustID.AmberBolt, 0, 0, 0, default(Color), 0.8f);
                        }
                        Main.LocalPlayer.GetModPlayer<Quests>().LuceatQuest = 40;
                        break;
                    }                   
                }
            }
            #endregion
            #region BabaYagaTransform
            if (Main.LocalPlayer.GetModPlayer<Quests>().ElessarQuest == 200 && Player.talkNPC == -1 && !witchsecondatt)
            {
                for (int i = 0; i < Main.npc.Length; ++i)
                {

                    if (Main.npc[i].active && Main.npc[i].type == ModContent.NPCType<BabaYaga>())
                    {
                        Main.npc[i].Transform(ModContent.NPCType<EvilBabaYaga>());

                    }
                }
            }
            #endregion
            #region RaceBarUpdate
            {
                if (Main.playerInventory)
                {
                    if (Main.npcShop != 0 || Player.chest != -1)
                        RaceBar = new Vector2(25, 434);
                    else
                        RaceBar = new Vector2(25, 260);
                }
                else
                {
                    if (Player.buffType.Count(x => x > 0) > 0)
                    {
                        RaceBar = new Vector2(25, 112);
                    }
                    else
                        RaceBar = new Vector2(25, 82);
                }
            }
            #endregion
            if (killersetbonus)
            {
                if (!Main.dayTime)
                {
                    killersettimer++;
                }
                if (killersettimer >= 600)
                {
                    Player.AddBuff(ModContent.BuffType<HiddenInTheShadows>(), 10);
                    killersettimer = 600;
                }
            }
            else
                killersettimer = 0;
            if (nomadsetbonus && Player.mount.Active)
                Player.lifeRegen += 20;
            if (Player.armor[0].type != ModContent.ItemType<KillersHood>() || Player.armor[1].type != ModContent.ItemType<KillersJacket>() || Player.armor[2].type != ModContent.ItemType<KillersBoots>())
            {
                killersetbonus = false;
            }
            if (Player.armor[0].type != ModContent.ItemType<PaladinsMask>() || Player.armor[1].type != ModContent.ItemType<PaladinsShell>() || Player.armor[2].type != ModContent.ItemType<PaladinsLeggings>())
            {
                paladinssetbonus = false;
            }
            if (Player.armor[0].type != ModContent.ItemType<NomadsHood>() || Player.armor[1].type != ModContent.ItemType<NomadsJacket>() || Player.armor[2].type != ModContent.ItemType<NomadsBoots>())
            {
                nomadsetbonus = false;
            }
            if (Player.armor[0].type != ModContent.ItemType<WatersHelmet>() || Player.armor[1].type != ModContent.ItemType<WatersBreastplate>() || Player.armor[2].type != ModContent.ItemType<WatersLeggings>())
            {
                watersetbonus = false;
            }
            Quests quests = (Quests)Main.player[Main.myPlayer].GetModPlayer<Quests>();
            #region MazeMapProhibition
            if (Player.FindBuffIndex(ModContent.BuffType<FearOfMaze>()) != -1)
            {
                Main.mapStyle = 0;
                Main.mapFullscreen = false;
            }
            #endregion
            #region RaceUpdate
            #endregion
            Item item = Player.inventory[Player.selectedItem];
            #region KillOrDieUpdate
            int checkbuff = Player.FindBuffIndex(ModContent.BuffType<DeathWish>());
            if (checkbuff == -1)
                killordietaimer = 0;
            if (checkbuff != -1 && killordietaimer >= 180)
            {
                Player.lifeRegen = 0;
                if (killordietaimer >= 240)
                {
                    Player.lifeRegen -= 20;
                    if (killordietaimer >= 360)
                    {
                        Player.lifeRegen -= 40;
                        if (killordietaimer >= 480)
                        {
                            Player.lifeRegen -= 100;
                        }
                    }
                }
            }
            #endregion
            #region SkillsBonusesUpdate
            int checkslime = Player.FindBuffIndex(64);
            int checkhornet = Player.FindBuffIndex(125);
            int checkimp = Player.FindBuffIndex(126);
            int checkspider = Player.FindBuffIndex(133);
            int checkeye = Player.FindBuffIndex(134);
            int checkpirate = Player.FindBuffIndex(135);
            int checkpygmy = Player.FindBuffIndex(49);
            int checkraven = Player.FindBuffIndex(83);
            int checkshark = Player.FindBuffIndex(139);
            int checkufo = Player.FindBuffIndex(140);
            int checkdragon = Player.FindBuffIndex(188);
            int checksphere = Player.FindBuffIndex(161);
            if (skill1lvl > 0)
            {
                Player.GetDamage(DamageClass.Melee) += 0.05f;
                Player.GetDamage(DamageClass.Ranged) -= 0.2f;
                Player.GetDamage(DamageClass.Magic) -= 0.2f;
                Player.GetDamage(DamageClass.Summon) -= 0.2f;
                Player.GetDamage(DamageClass.Throwing) -= 0.2f;
                Player.GetModPlayer<ModP>().assassinDamage -= 0.2f;
            }
            if (skill2lvl > 0)
            {
                Player.statDefense += 2;
                Player.endurance += 0.04f;
            }
            if (skill3lvl > 0)
            {
                Player.statLifeMax2 += 10;
            }
            if (skill3lvl > 1)
            {
                Player.statLifeMax2 += 15;
            }
            if (skill3lvl > 2)
            {
                Player.statLifeMax2 += 25;
            }
            if (skill3lvl > 3)
            {
                Player.statLifeMax2 += 25;
            }
            if (skill3lvl > 4)
            {
                Player.statLifeMax2 += 40;
            }
            if (skill3lvl > 5)
            {
                Player.statLifeMax2 += 60;
            }
            if (skill3lvl > 6)
            {
                Player.statLifeMax2 += 80;
            }
            if (skill8lvl > 0)
            {
                Player.statDefense += 1;
            }
            if (skill8lvl > 1)
            {
                Player.statDefense += 2;
            }
            if (skill8lvl > 2)
            {
                Player.statDefense += 2;
            }
            if (skill8lvl > 3)
            {
                Player.statDefense += 4;
            }
            if (skill8lvl > 4)
            {
                Player.statDefense += 5;
            }
            if (skill8lvl > 5)
            {
                Player.statDefense += 6;
            }
            if (skill9lvl > 0)
            {
                Player.lifeRegen += 8;
                if (Player.statLife < 300)
                    Player.lifeRegen += 2;
                if (Player.statLife < 150)
                    Player.lifeRegen += 4;
                if (Player.statLife < 100)
                    Player.lifeRegen += 4;
                if (Player.statLife < 50)
                    Player.lifeRegen += 6;
            }
            if (skill10lvl == skill10lvlmax)
                if (Player.ZoneCorrupt || Player.ZoneCrimson)
                    Player.endurance += 0.25f;
            if (skill12lvl > 0)
            {
                Player.endurance += 0.1f;
            }
            if (skill16lvl > 0)
            {
                Player.statDefense += 10;
                Player.endurance += 0.1f;
                Player.lifeRegen += 12;
                Player.moveSpeed -= 0.25f;
                Player.statLifeMax2 += 20;
                Player.potionDelay -= 600;
                Player.potionDelayTime -= 600;
            }
            if (skill17lvl > 0)
                Player.thorns += 0.05f;
            if (skill17lvl > 1)
                Player.thorns += 0.05f;
            if (skill17lvl > 2)
                Player.thorns += 0.07f;
            if (skill18lvl > 0)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.06f;
                Player.GetCritChance(DamageClass.Melee) += 3;
            }
            if (skill19lvl > 0)
            {
                int NPCsCount = 0;
                for (int i = 0; i < Main.npc.Length; i++)
                {
                    if (Main.npc[i].active && Main.npc[i].townNPC && Main.npc[i].life > 0 && Main.npc[i].aiStyle != -1)
                        NPCsCount++;
                }
                if(NPCsCount < 15)
                    Player.GetDamage(DamageClass.Melee) += 0.01f * NPCsCount;
                else
                    Player.GetDamage(DamageClass.Melee) += 0.15f;               
            }
            if (skill20lvl > 0)
            {
                int vanillabosscount = 0;
                if (KilledEoC)
                    vanillabosscount++;
                if (KilledEoW)
                    vanillabosscount++;
                if (KilledBoC)
                    vanillabosscount++;
                if (KilledSkeletron)
                    vanillabosscount++;
                if (KilledWoF)
                    vanillabosscount++;
                if (KilledKingSlime)
                    vanillabosscount++;
                if (KilledQoB)
                    vanillabosscount++;
                if (KilledSkeletronPrime)
                    vanillabosscount++;
                if (KilledTwins)
                    vanillabosscount++;
                if (KilledDestroyer)
                    vanillabosscount++;
                if (KilledPlantera)
                    vanillabosscount++;
                if (KilledGolem)
                    vanillabosscount++;
                if (KilledFishron)
                    vanillabosscount++;
                if (KilledCultist)
                    vanillabosscount++;
                if (KilledMoonLord)
                    vanillabosscount++;
                if (KilledMourningWood)
                    vanillabosscount++;
                if (KilledPumpking)
                    vanillabosscount++;
                if (KilledSantaNK1)
                    vanillabosscount++;
                if (KilledEverscream)
                    vanillabosscount++;
                if (KilledIceQueen)
                    vanillabosscount++;
                if (KilledFlyingDutchman)
                    vanillabosscount++;
                if (KilledMartianSaucer)
                    vanillabosscount++;
                if (KilledBetsy)
                    vanillabosscount++;
                if (vanillabosscount < 15)
                    Player.GetDamage(DamageClass.Melee) += 0.01f * vanillabosscount;
                else
                    Player.GetDamage(DamageClass.Melee) += 0.15f;
            }

            if (skill21lvl > 0)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.03f;
            }
            if (skill21lvl > 1)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.03f;
            }
            if (skill21lvl > 2)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.04f;
            }
            if (skill21lvl > 3)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.04f;
            }
            if (skill21lvl > 4)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.06f;
            }
            if (skill21lvl > 5)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.08f;
            }
            if (skill21lvl > 6)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.1f;
            }
            if (skill21lvl > 7)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.1f;
            }


            if (skill25lvl > 0)
            {
                Player.GetDamage(DamageClass.Melee) += 0.02f;
            }
            if (skill25lvl > 1)
            {
                Player.GetDamage(DamageClass.Melee) += 0.03f;
            }
            if (skill25lvl > 2)
            {
                Player.GetDamage(DamageClass.Melee) += 0.03f;
            }
            if (skill25lvl > 3)
            {
                Player.GetDamage(DamageClass.Melee) += 0.04f;
            }
            if (skill25lvl > 4)
            {
                Player.GetDamage(DamageClass.Melee) += 0.05f;
            }
            if (skill25lvl > 5)
            {
                Player.GetDamage(DamageClass.Melee) += 0.05f;
            }
            if (skill26lvl > 0)
            {
                Player.GetCritChance(DamageClass.Melee) += 10;
                if (Player.statLife < 300)
                    Player.GetCritChance(DamageClass.Melee) += 4;
                if (Player.statLife < 150)
                    Player.GetCritChance(DamageClass.Melee) += 9;
                if (Player.statLife < 100)
                    Player.GetCritChance(DamageClass.Melee) += 15;
                if (Player.statLife < 50)
                    Player.GetCritChance(DamageClass.Melee) += 20;
            }
            if (skill27lvl == skill27lvlmax && Player.ZoneJungle)
            {
                Player.GetDamage(DamageClass.Melee) += 0.2f;
            }
            if (skill28lvl > 0)
            {
                Player.GetAttackSpeed(DamageClass.Melee) += 0.15f;
                Player.moveSpeed += 0.2f;
            }
            if (skill29lvl > 0)
            {
                Player.GetDamage(DamageClass.Melee) -= 0.15f;
            }
            if (skill30lvl > 0)
            {
                Player.GetDamage(DamageClass.Melee) += 0.1f;
                Player.GetCritChance(DamageClass.Melee) += 10;
                Player.GetAttackSpeed(DamageClass.Melee) -= 0.25f;
            }
            if (skill31lvl > 0)
            {
                Player.GetCritChance(DamageClass.Melee) += 10;
            }
            if (skill35lvl > 0)
            {
                Player.GetDamage(DamageClass.Melee) += 0.15f;
                Player.GetCritChance(DamageClass.Melee) += 20;
            }
            if (skill36lvl > 0)
            {
                Player.GetDamage(DamageClass.Magic) += 0.05f;
                Player.GetDamage(DamageClass.Summon) += 0.05f;
                Player.GetDamage(DamageClass.Melee) -= 0.2f;
                Player.GetDamage(DamageClass.Throwing) -= 0.2f;
                Player.GetDamage(DamageClass.Ranged) -= 0.2f;
                Player.GetModPlayer<ModP>().assassinDamage -= 0.2f;
            }
            if (skill37lvl > 0)
            {
                Player.GetDamage(DamageClass.Magic) += 0.04f;
                Player.GetDamage(DamageClass.Summon) += 0.06f;
            }
            if (skill38lvl > 0 && Player.ZoneJungle)
            {
                Player.lifeRegen += Player.numMinions * 2;
            }
            if (skill41lvl > 0)
            {
                if (checkslime != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkhornet != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkimp != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkeye != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkspider != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkpirate != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkpygmy != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkraven != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkshark != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkufo != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checkdragon != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
                if (checksphere != -1)
                    Player.GetDamage(DamageClass.Summon) += 0.09f;
            }
            if (skill42lvl > 0)
            {
                if (checkslime != -1)
                {
                    Player.npcTypeNoAggro[1] = true;
                    Player.npcTypeNoAggro[16] = true;
                    Player.npcTypeNoAggro[59] = true;
                    Player.npcTypeNoAggro[71] = true;
                    Player.npcTypeNoAggro[81] = true;
                    Player.npcTypeNoAggro[138] = true;
                    Player.npcTypeNoAggro[121] = true;
                    Player.npcTypeNoAggro[122] = true;
                    Player.npcTypeNoAggro[141] = true;
                    Player.npcTypeNoAggro[147] = true;
                    Player.npcTypeNoAggro[183] = true;
                    Player.npcTypeNoAggro[184] = true;
                    Player.npcTypeNoAggro[204] = true;
                    Player.npcTypeNoAggro[225] = true;
                    Player.npcTypeNoAggro[244] = true;
                    Player.npcTypeNoAggro[302] = true;
                    Player.npcTypeNoAggro[333] = true;
                    Player.npcTypeNoAggro[335] = true;
                    Player.npcTypeNoAggro[334] = true;
                    Player.npcTypeNoAggro[336] = true;
                    Player.npcTypeNoAggro[537] = true;
                }
                if (checkhornet != -1)
                {
                    Player.npcTypeNoAggro[42] = true;
                    Player.npcTypeNoAggro[176] = true;
                    Player.npcTypeNoAggro[231] = true;
                    Player.npcTypeNoAggro[232] = true;
                    Player.npcTypeNoAggro[233] = true;
                    Player.npcTypeNoAggro[234] = true;
                    Player.npcTypeNoAggro[235] = true;
                }
                if (checkimp != -1)
                {
                    Player.npcTypeNoAggro[24] = true;
                    Player.npcTypeNoAggro[25] = true;
                }
                if (checkeye != -1)
                {
                    Player.npcTypeNoAggro[2] = true;
                    Player.npcTypeNoAggro[5] = true;
                    Player.npcTypeNoAggro[76] = true;
                    Player.npcTypeNoAggro[133] = true;
                    Player.npcTypeNoAggro[190] = true;
                    Player.npcTypeNoAggro[191] = true;
                    Player.npcTypeNoAggro[192] = true;
                    Player.npcTypeNoAggro[193] = true;
                    Player.npcTypeNoAggro[194] = true;
                }
                if (checkspider != -1)
                {
                    Player.npcTypeNoAggro[163] = true;
                    Player.npcTypeNoAggro[164] = true;
                    Player.npcTypeNoAggro[165] = true;
                    Player.npcTypeNoAggro[236] = true;
                    Player.npcTypeNoAggro[237] = true;
                    Player.npcTypeNoAggro[238] = true;
                    Player.npcTypeNoAggro[239] = true;
                    Player.npcTypeNoAggro[240] = true;
                }
                if (checkpirate != -1)
                {
                    Player.npcTypeNoAggro[212] = true;
                    Player.npcTypeNoAggro[213] = true;
                    Player.npcTypeNoAggro[214] = true;
                    Player.npcTypeNoAggro[215] = true;
                    Player.npcTypeNoAggro[216] = true;
                    Player.npcTypeNoAggro[252] = true;
                }
                if (checkraven != -1)
                {
                    Player.npcTypeNoAggro[301] = true;
                }
                if (checkshark != -1)
                {
                    Player.npcTypeNoAggro[65] = true;
                    Player.npcTypeNoAggro[373] = true;
                }
                if (checksphere != -1)
                {
                    Player.npcTypeNoAggro[467] = true;
                }
            }
            if (skill43lvl > 0)
                Player.GetDamage(DamageClass.Summon) += 0.02f;
            if (skill43lvl > 1)
                Player.GetDamage(DamageClass.Summon) += 0.03f;
            if (skill43lvl > 2)
                Player.GetDamage(DamageClass.Summon) += 0.03f;
            if (skill43lvl > 3)
                Player.GetDamage(DamageClass.Summon) += 0.04f;
            if (skill43lvl > 4)
                Player.GetDamage(DamageClass.Summon) += 0.05f;
            if (skill43lvl > 5)
                Player.GetDamage(DamageClass.Summon) += 0.05f;
            if (skill44lvl > 0)
                Player.maxMinions += 1;
            if (skill44lvl > 1)
                Player.maxMinions += 1;
            if (skill44lvl > 2)
                Player.maxMinions += 2;
            if (skill44lvl > 3)
                Player.maxMinions += 2;
            if (skill45lvl > 0)
                Player.statLifeMax2 += (Player.numMinions * 8);
            if (skill46lvl > 0)
            {
                Player.statDefense -= (Player.numMinions * 2);
                Player.GetDamage(DamageClass.Summon) += 0.25f;
            }
            if (skill47lvl > 0)
            {
                Player.GetDamage(DamageClass.Summon) -= 0.2f;
                Player.statDefense += (Player.numMinions * 2);
                Player.endurance += Player.numMinions;
            }
            if (skill48lvl > 0)
                Player.GetKnockback(DamageClass.Summon).Base *= 2f;
            if (skill49lvl > 0)
                Player.manaCost -= 0.03f;
            if (skill49lvl > 1)
                Player.manaCost -= 0.05f;
            if (skill49lvl > 2)
                Player.manaCost -= 0.07f;
            if (skill49lvl > 3)
                Player.manaCost -= 0.08f;
            if (skill49lvl > 4)
                Player.manaCost -= 0.1f;
            if (skill49lvl > 5)
                Player.manaCost -= 0.1f;
            if (skill50lvl > 0)
            {
                Player.manaCost -= 0.08f;
                Player.GetDamage(DamageClass.Magic) += 0.08f;
            }
            if (skill53lvl > 0)
                Player.GetDamage(DamageClass.Magic) += 0.02f;
            if (skill53lvl > 1)
                Player.GetDamage(DamageClass.Magic) += 0.03f;
            if (skill53lvl > 2)
                Player.GetDamage(DamageClass.Magic) += 0.03f;
            if (skill53lvl > 3)
                Player.GetDamage(DamageClass.Magic) += 0.04f;
            if (skill53lvl > 4)
                Player.GetDamage(DamageClass.Magic) += 0.05f;
            if (skill53lvl > 5)
                Player.GetDamage(DamageClass.Magic) += 0.05f;
            if (skill54lvl > 0)
                Player.GetCritChance(DamageClass.Magic) += 15;
            if (skill55lvl > 0)
                Player.manaRegenBonus += 8;
            if (skill55lvl > 1)
                Player.manaRegenBonus += 4;
            if (skill55lvl > 2)
                Player.manaRegenBonus += 12;
            if (skill58lvl > 0 && Main.dayTime)
            {
                Player.GetDamage(DamageClass.Magic) += 0.15f;
                Player.GetCritChance(DamageClass.Magic) += 15;
            }
            if (skill59lvl > 0)
                Player.ClearBuff(BuffID.ManaSickness);
            if (skill60lvl > 0)
            {
                if (Player.statMana < (int)((float)item.mana * Player.manaCost))
                {
                    Player.QuickMana();
                }
            }
            if (skill64lvl > 0)
            {
                Player.GetDamage(DamageClass.Magic) += 0.15f;
                Player.GetDamage(DamageClass.Summon) += 0.2f;
                Player.GetCritChance(DamageClass.Magic) += 15;
                Player.maxMinions += 2;
                Player.moveSpeed += 0.2f;
                Player.manaMagnet = true;
            }
            if (skill65lvl > 0)
            {
                Player.GetModPlayer<ModP>().assassinDamage += 0.05f;
                Player.GetDamage(DamageClass.Ranged) -= 0.2f;
                Player.GetDamage(DamageClass.Magic) -= 0.2f;
                Player.GetDamage(DamageClass.Summon) -= 0.2f;
                Player.GetDamage(DamageClass.Throwing) -= 0.2f;
            }
            if (skill66lvl > 0)
            {
                Player.GetModPlayer<ModP>().assassinDamage += 0.05f;
                Player.GetModPlayer<ModP>().assassinCrit += 5;
                if (item.useStyle == 3 && item.ModItem != null && item.ModItem is AssassinItem)
                {
                    Player.GetModPlayer<ModP>().assassinDamage += 0.4f;
                }
                if (item.useStyle == 3 && item.CountsAsClass(DamageClass.Melee))
                    Player.GetDamage(DamageClass.Melee) += 0.4f;
            }
            if (skill68lvl > 0)
                Player.moveSpeed += 0.03f;
            if (skill68lvl > 1)
                Player.moveSpeed += 0.04f;
            if (skill68lvl > 2)
                Player.moveSpeed += 0.04f;
            if (skill68lvl > 3)
                Player.moveSpeed += 0.06f;
            if (skill68lvl > 4)
                Player.moveSpeed += 0.06f;
            if (skill68lvl > 5)
                Player.moveSpeed += 0.09f;
            if (skill68lvl > 6)
                Player.moveSpeed += 0.11f;
            if (skill76lvl > 0)
            {
                Player.GetCritChance(DamageClass.Melee) += 2;
                Player.GetCritChance(DamageClass.Ranged) += 2;
                Player.GetCritChance(DamageClass.Magic) += 2;
                Player.GetCritChance(DamageClass.Throwing) += 2;
                Player.GetModPlayer<ModP>().assassinCrit += 2;
            }
            if (skill76lvl > 1)
            {
                Player.GetCritChance(DamageClass.Melee) += 3;
                Player.GetCritChance(DamageClass.Ranged) += 3;
                Player.GetCritChance(DamageClass.Magic) += 3;
                Player.GetCritChance(DamageClass.Throwing) += 3;
                Player.GetModPlayer<ModP>().assassinCrit += 3;
            }
            if (skill76lvl > 2)
            {
                Player.GetCritChance(DamageClass.Melee) += 5;
                Player.GetCritChance(DamageClass.Ranged) += 5;
                Player.GetCritChance(DamageClass.Magic) += 5;
                Player.GetCritChance(DamageClass.Throwing) += 5;
                Player.GetModPlayer<ModP>().assassinCrit += 5;
            }
            if (skill76lvl > 3)
            {
                Player.GetCritChance(DamageClass.Melee) += 5;
                Player.GetCritChance(DamageClass.Ranged) += 5;
                Player.GetCritChance(DamageClass.Magic) += 5;
                Player.GetCritChance(DamageClass.Throwing) += 5;
                Player.GetModPlayer<ModP>().assassinCrit += 5;
            }
            if (skill76lvl > 4)
            {
                Player.GetCritChance(DamageClass.Melee) += 7;
                Player.GetCritChance(DamageClass.Ranged) += 7;
                Player.GetCritChance(DamageClass.Magic) += 7;
                Player.GetCritChance(DamageClass.Throwing) += 7;
                Player.GetModPlayer<ModP>().assassinCrit += 7;
            }
            if (skill77lvl > 0)
                Player.GetModPlayer<ModP>().assassinDamage += 0.02f;
            if (skill77lvl > 1)
                Player.GetModPlayer<ModP>().assassinDamage += 0.03f;
            if (skill77lvl > 2)
                Player.GetModPlayer<ModP>().assassinDamage += 0.03f;
            if (skill77lvl > 3)
                Player.GetModPlayer<ModP>().assassinDamage += 0.04f;
            if (skill77lvl > 4)
                Player.GetModPlayer<ModP>().assassinDamage += 0.05f;
            if (skill77lvl > 5)
                Player.GetModPlayer<ModP>().assassinDamage += 0.05f;
            if (skill82lvl > 0)
            {
                if (Player.wet)
                {
                    Player.GetModPlayer<ModP>().assassinDamage += 0.35f;
                    Player.GetCritChance(DamageClass.Melee) += 20;
                    Player.GetCritChance(DamageClass.Ranged) += 20;
                    Player.GetCritChance(DamageClass.Magic) += 20;
                    Player.GetCritChance(DamageClass.Throwing) += 20;
                    Player.GetModPlayer<ModP>().assassinCrit += 20;
                    Player.lifeRegen += 20;
                }
            }
            if (skill83lvl > 0)
            {
                Main.reforgeItem.value = (int)((double)Main.reforgeItem.value * 0.65);

            }
            if (skill90lvl > 0)
            {
                Player.GetModPlayer<ModP>().assassinDamage += 0.15f;
                Player.GetModPlayer<ModP>().assassinCrit += 15;
                if (!Main.dayTime)
                {
                    Player.GetModPlayer<ModP>().assassinDamage += 0.21f;
                    if (Main.moonPhase == 1)
                    {
                        Player.GetDamage(DamageClass.Melee) += 0.2f;
                        Player.GetDamage(DamageClass.Ranged) += 0.2f;
                        Player.GetDamage(DamageClass.Magic) += 0.2f;
                        Player.GetDamage(DamageClass.Summon) += 0.2f;
                        Player.GetDamage(DamageClass.Throwing) += 0.2f;
                        Player.GetModPlayer<ModP>().assassinDamage += 0.2f;
                    }
                }
            }
            if (skill91lvl > 0)
            {
                Player.GetDamage(DamageClass.Ranged) += 0.05f;
                Player.GetDamage(DamageClass.Melee) -= 0.2f;
                Player.GetDamage(DamageClass.Magic) -= 0.2f;
                Player.GetDamage(DamageClass.Summon) -= 0.2f;
                Player.GetDamage(DamageClass.Throwing) -= 0.2f;
                Player.GetModPlayer<ModP>().assassinDamage -= 0.2f;
            }
            if (skill92lvl > 0)
            {
                Player.GetDamage(DamageClass.Ranged) += 0.06f;
                Player.GetCritChance(DamageClass.Ranged) += 4;
            }
            if (skill93lvl > 0)
                Player.GetCritChance(DamageClass.Ranged) += 4;
            if (skill93lvl > 1)
                Player.GetCritChance(DamageClass.Ranged) += 5;
            if (skill93lvl > 2)
                Player.GetCritChance(DamageClass.Ranged) += 7;
            if (skill93lvl > 3)
                Player.GetCritChance(DamageClass.Ranged) += 9;
            if (skill93lvl > 4)
                Player.GetCritChance(DamageClass.Ranged) += 12;
            if (skill97lvl > 0 && item.CountsAsClass(DamageClass.Ranged))
                Player.scope = true;
            if (skill99lvl > 0)
                Player.GetCritChance(DamageClass.Ranged) += 10;
            if (skill100lvl > 0 && Player.ZoneUnderworldHeight)
            {
                DodgeChance += 4;
                Player.GetDamage(DamageClass.Ranged) += 0.23f;
            }
            if (skill104lvl > 0)
            {
                Player.GetDamage(DamageClass.Ranged) += 0.25f;
                Player.statLifeMax2 = (int)(Player.statLifeMax2 * 0.85);
            }
            if (skill105lvl > 0)
                Player.GetDamage(DamageClass.Ranged) += 0.02f;
            if (skill105lvl > 1)
                Player.GetDamage(DamageClass.Ranged) += 0.03f;
            if (skill105lvl > 2)
                Player.GetDamage(DamageClass.Ranged) += 0.06f;
            if (skill113lvl > 0)
            {
                if (Player.inventory[Player.selectedItem].type == ItemID.Grenade || Player.inventory[Player.selectedItem].type == ItemID.StickyGrenade || Player.inventory[Player.selectedItem].type == ItemID.BouncyGrenade || Player.inventory[Player.selectedItem].type == ItemID.PartyGirlGrenade || Player.inventory[Player.selectedItem].type == ItemID.Bomb || Player.inventory[Player.selectedItem].type == ItemID.StickyBomb || Player.inventory[Player.selectedItem].type == ItemID.BouncyBomb || Player.inventory[Player.selectedItem].type == ItemID.Dynamite || Player.inventory[Player.selectedItem].type == ItemID.StickyDynamite || Player.inventory[Player.selectedItem].type == ItemID.BouncyDynamite || Player.inventory[Player.selectedItem].type == ItemID.LandMine || Player.inventory[Player.selectedItem].type == ItemID.Beenade || Player.inventory[Player.selectedItem].type == ItemID.MolotovCocktail || Player.inventory[Player.selectedItem].type == ItemID.BombFish)
                {
                    Player.GetDamage(DamageClass.Throwing) += 0.25f;
                }
            }
            if (skill116lvl > 0)
            {
                if (item.type == ItemID.GrenadeLauncher || item.type == ItemID.RocketLauncher || item.type == ItemID.ProximityMineLauncher || item.type == ItemID.SnowmanCannon || item.type == ItemID.ElectrosphereLauncher || item.type == 3546)
                    Player.statDefense += 10;
            }
            if (skill117lvl > 0)
                Player.arrowDamage += 0.04f;
            if (skill117lvl > 1)
                Player.arrowDamage += 0.06f;
            if (skill117lvl > 2)
                Player.arrowDamage += 0.09f;
            if (skill118lvl > 0)
                Player.bulletDamage += 0.04f;
            if (skill118lvl > 1)
                Player.bulletDamage += 0.06f;
            if (skill118lvl > 2)
                Player.bulletDamage += 0.09f;
            if (skill119lvl > 0)
                Player.specialistDamage += 0.04f;
            if (skill119lvl > 1)
                Player.specialistDamage += 0.06f;
            if (skill119lvl > 2)
                Player.specialistDamage += 0.09f;
            if (skill121lvl > 0)
                Player.GetDamage(DamageClass.Ranged) += 0.25f;
            if (skill122lvl > 0)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.05f;
                Player.GetDamage(DamageClass.Ranged) -= 0.2f;
                Player.GetDamage(DamageClass.Melee) -= 0.2f;
                Player.GetDamage(DamageClass.Magic) -= 0.2f;
                Player.GetDamage(DamageClass.Summon) -= 0.2f;
                Player.GetModPlayer<ModP>().assassinDamage -= 0.2f;
            }
            if (skill123lvl > 0)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.06f;
                Player.GetCritChance(DamageClass.Throwing) += 3;
            }
            if (skill130lvl > 0)
                Player.ThrownVelocity += 0.05f;
            if (skill130lvl > 1)
                Player.ThrownVelocity += 0.07f;
            if (skill130lvl > 2)
                Player.ThrownVelocity += 0.08f;
            if (skill130lvl > 3)
                Player.ThrownVelocity += 0.1f;
            if (skill130lvl > 4)
                Player.ThrownVelocity += 0.12f;
            if (skill130lvl > 5)
                Player.ThrownVelocity += 0.15f;
            if (skill130lvl > 6)
                Player.ThrownVelocity += 0.18f;
            if (skill131lvl > 0)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.02f;
            }
            if (skill131lvl > 1)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.03f;
            }
            if (skill131lvl > 2)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.03f;
            }
            if (skill131lvl > 3)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.04f;
            }
            if (skill131lvl > 4)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.05f;
            }
            if (skill131lvl > 5)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.05f;
            }
            if (skill132lvl > 0)
            {
                if (Player.inventory[Player.selectedItem].type == ItemID.Grenade || Player.inventory[Player.selectedItem].type == ItemID.StickyGrenade || Player.inventory[Player.selectedItem].type == ItemID.BouncyGrenade || Player.inventory[Player.selectedItem].type == ItemID.PartyGirlGrenade || Player.inventory[Player.selectedItem].type == ItemID.Bomb || Player.inventory[Player.selectedItem].type == ItemID.StickyBomb || Player.inventory[Player.selectedItem].type == ItemID.BouncyBomb || Player.inventory[Player.selectedItem].type == ItemID.Dynamite || Player.inventory[Player.selectedItem].type == ItemID.StickyDynamite || Player.inventory[Player.selectedItem].type == ItemID.BouncyDynamite || Player.inventory[Player.selectedItem].type == ItemID.LandMine || Player.inventory[Player.selectedItem].type == ItemID.Beenade || Player.inventory[Player.selectedItem].type == ItemID.MolotovCocktail || Player.inventory[Player.selectedItem].type == ItemID.BombFish)
                {
                    Player.GetDamage(DamageClass.Throwing) += 0.2f;
                }
            }
            if (skill135lvl > 0)
            {
                Player.statLifeMax2 += Player.buffType.Count(x => x > 0) * 10;
                Player.lifeRegen += Player.buffType.Count(x => x > 0) * 4;
            }
            if (skill139lvl > 0)
            {
                Player.GetCritChance(DamageClass.Throwing) += 15;
            }
            if (skill140lvl > 0 && Player.inventory[Player.selectedItem].CountsAsClass(DamageClass.Throwing) && Player.inventory[Player.selectedItem].consumable)
            {
                Player.inventory[Player.selectedItem].damage = (int)(Player.inventory[Player.selectedItem].damage * 1.25);
            }
            if (skill143lvl > 0 && Player.inventory[Player.selectedItem].CountsAsClass(DamageClass.Throwing) && Player.inventory[Player.selectedItem].consumable)
            {
                Player.ThrownVelocity += 0.4f;
            }
            if (skill146lvl > 0)
                Player.extraAccessorySlots++;
            if (skill147lvl > 0)
            {
                Player.GetDamage(DamageClass.Throwing) += 0.25f;
                Player.GetCritChance(DamageClass.Throwing) += 25;
                Player.statDefense += 10;
            }
            #endregion
        }
        public override void OnEnterWorld()
        {
            string OnEnterText1 = this.GetLocalization("Chat.OnEnterText1").Value;
            string OnEnterText2 = this.GetLocalization("Chat.OnEnterText2").Value;
            string OnEnterText3 = this.GetLocalization("Chat.OnEnterText3").Value;

            Main.NewText(OnEnterText1);
            Main.NewText(OnEnterText2);
            if (!BismuthWorld.IsSwampSuccess || !BismuthWorld.GeneratedCaslte || !BismuthWorld.IsDesertSuccess)
                Main.NewText(OnEnterText3);
        }
        public override bool CanConsumeAmmo(Item weapon, Item ammo)
        {
            #region SkillsBonusesUpdate
            #region Skill110
            if (skill110lvl > 0)
            {
                if (Main.rand.Next(1, 101) <= 15)
                    return false;
                else
                    return true;
            }
            #endregion
            #region Skill137
            if (skill137lvl > 0)
            {
                if (Main.rand.Next(1, 101) <= 20 && weapon.CountsAsClass(DamageClass.Throwing) && weapon.consumable)
                    return false;
                else
                    return true;
            }
            #endregion
            #region Skill147
            if (skill147lvl > 0)
            {
                if (Main.rand.Next(1, 101) <= 30 && weapon.CountsAsClass(DamageClass.Throwing) && weapon.consumable)
                    return false;
                else
                    return true;
            }
            #endregion
            #endregion
            return base.CanConsumeAmmo(weapon, ammo);
        }
        public override void OnHitByNPC(NPC npc, Player.HurtInfo hurtInfo)
        {
           
            int buffcheck = Player.FindBuffIndex(ModContent.BuffType<SteelSkin>());
            if (buffcheck != -1)
            {
                if (skill6lvl > 0)
                    npc.AddBuff(BuffID.OnFire, 600);
                if (skill7lvl > 0)
                    npc.AddBuff(BuffID.Frostburn, 600);
            }
            killersettimer = 0;
            if (paladinssetbonus)
            {
                float num = Player.position.X;
                float num7 = Player.position.X + 600;
                float num8 = Player.position.X - 600;
                float num2 = Player.position.Y - 600;
                Vector2 vector = new Vector2(num, num2);
                Vector2 vector2 = new Vector2(num7, num2);
                Vector2 vector3 = new Vector2(num8, num2);
                float num3 = Player.position.X - vector.X;
                float num4 = Player.position.Y - vector.Y;
                float num9 = Player.position.X - vector2.X;
                float num10 = Player.position.Y - vector2.Y;
                float num11 = Player.position.X - vector3.X;
                float num12 = Player.position.Y - vector3.Y;
                num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num9 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num10 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num11 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num12 += (float)Main.rand.Next(-50, 51) * 0.1f;
                int num5 = 24;
                float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                num6 = (float)num5 / num6;
                num3 *= num6;
                num4 *= num6;
                num9 *= num6;
                num10 *= num6;
                num11 *= num6;
                num12 *= num6;
                int projj = Projectile.NewProjectile(Player.GetSource_FromThis(), num, num2, num3 * 1.5f, num4 * 1.5f, ModContent.ProjectileType<SphereOfLight>(), 36, 0f, Player.whoAmI, 0f, 0f);
                int projj2 = Projectile.NewProjectile(Player.GetSource_FromThis(), num7, num2, num9 * 1.5f, num10 * 1.5f, ModContent.ProjectileType<SphereOfLight>(), 36, 0f, Player.whoAmI, 0f, 0f);
                int projj3 = Projectile.NewProjectile(Player.GetSource_FromThis(), num8, num2, num11 * 1.5f, num12 * 1.5f, ModContent.ProjectileType<SphereOfLight>(), 36, 0f, Player.whoAmI, 0f, 0f);
                Vector2 direction = Main.projectile[projj].Center - Player.Center;
                Vector2 direction2 = Main.projectile[projj2].Center - Player.Center;
                Vector2 direction3 = Main.projectile[projj3].Center - Player.Center;
                float rotation = (float)Math.Atan2(direction.Y, direction.X);
                float rotation2 = (float)Math.Atan2(direction2.Y, direction2.X);
                float rotation3 = (float)Math.Atan2(direction3.Y, direction3.X);
                Main.projectile[projj].rotation = rotation + ((float)Math.PI * 0.5f);
                Main.projectile[projj2].rotation = rotation2 + ((float)Math.PI * 0.5f);
                Main.projectile[projj3].rotation = rotation3 + ((float)Math.PI * 0.5f);
            }
        }
        public override void OnHitNPCWithItem(Item item, NPC target, NPC.HitInfo hit, int damageDone)
        {
            if (target.life <= 0)
            {
                
                if (target.type == 4 && !KilledEoC)
                {
                    KilledEoC = true;
                    KilledBossesCount++;
                }
                if (target.type == 50 && !KilledKingSlime)
                    KilledKingSlime = true;
                if ((target.type == 13 || target.type == 14 || target.type == 15 || target.type == 266) && !KilledWormorBrain)
                {
                    KilledWormorBrain = true;
                }
                if (target.type == NPCID.SkeletronHead && !KilledSkeletron)
                {
                    KilledBossesCount++;
                    KilledSkeletron = true;
                }
                if (target.type == NPCID.QueenBee && !KilledQoB)
                    KilledQoB = true;
                if (target.type == NPCID.WallofFlesh && !KilledWoF)
                {
                    KilledBossesCount++;
                    KilledWoF = true;
                }
                if ((target.type == 125 || target.type == 126 || target.type == 134 || target.type == 127) && !Player.GetModPlayer<BismuthPlayer>().KilledAnyMechBoss)
                {
                    KilledBossesCount++;
                    KilledAnyMechBoss = true;
                }
                if ((target.type == NPCID.Spazmatism || target.type == NPCID.Retinazer) && !KilledTwins)
                    KilledTwins = true;
                if (target.type == NPCID.SkeletronPrime && !KilledSkeletronPrime)
                    KilledSkeletronPrime = true;
                if (target.type == NPCID.TheDestroyer && !KilledDestroyer)
                    KilledDestroyer = true;
                if (target.type == NPCID.Plantera && !KilledPlantera)
                {
                    KilledBossesCount++;
                    KilledPlantera = true;
                }
                if (target.type == NPCID.Golem && !KilledGolem)
                {
                    KilledBossesCount++;
                    KilledGolem = true;
                } 
                if (target.type == NPCID.DukeFishron && !KilledFishron)
                    KilledFishron = true;
                if (target.type == NPCID.CultistBoss && !KilledCultist)
                    KilledCultist = true;
                if (target.type == NPCID.MoonLordCore && !KilledMoonLord)
                    KilledMoonLord = true;
            }
            if (killersetbonus)
            {
                killersettimer = 0;
            }
            if (IsEquippedLichCrown)
            {
                if (target.life <= 0)
                    LichPoints++;
                if (target.type != NPCID.TargetDummy && LichPoints <= 50)
                    Lich(hit.Damage, target.Center);
            }

            if (target.type != NPCID.TargetDummy && IsVampire)
            {                  

                    if (IsEquippedPendant)
                    {
                        vampireHeal(hit.Damage, target.Center);
                        int heal = (int)((Player.statLifeMax2 - Player.statLife) / 20);
                        heal = Math.Max(1, heal);
                        Player.statLife += heal;
                        Player.HealEffect(heal);
                    }
                }
            
            if (!Main.dayTime && target.type != NPCID.TargetDummy)
            {
                for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                {
                    if (Player.armor[k].type == ModContent.ItemType<SignOfUndead>())
                    {
                        vampireHeal(hit.Damage, target.Center);
                        int heal = (int)(hit.Damage * 0.02f);
                        heal = Math.Max(1, heal);
                        Player.statLife += heal;
                        Player.HealEffect(heal);
                    }
                }
            }
            if (IsVampire && target.type != NPCID.TargetDummy)
            {
                vampireHeal(hit.Damage, target.Center);
                int heal = (int)(hit.Damage * 0.08f);
                heal = Math.Max(1, heal);
                Player.statLife += heal;
                Player.HealEffect(heal);
            }
            if (skill144lvl > 0)
            {
                float num = Player.position.X;
                float num7 = Player.position.X + 600;
                float num8 = Player.position.X - 600;
                float num2 = Player.position.Y - 600;
                Vector2 vector = new Vector2(num, num2);
                Vector2 vector2 = new Vector2(num7, num2);
                Vector2 vector3 = new Vector2(num8, num2);
                float num3 = target.position.X - vector.X;
                float num4 = target.position.Y - vector.Y;
                float num9 = target.position.X - vector2.X;
                float num10 = target.position.Y - vector2.Y;
                float num11 = target.position.X - vector3.X;
                float num12 = target.position.Y - vector3.Y;
                num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num9 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num10 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num11 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num12 += (float)Main.rand.Next(-50, 51) * 0.1f;
                int num5 = 24;
                float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                num6 = (float)num5 / num6;
                num3 *= num6;
                num4 *= num6;
                num9 *= num6;
                num10 *= num6;
                num11 *= num6;
                num12 *= num6;
                int projj = Projectile.NewProjectile(Player.GetSource_FromThis(), num, num2, num3, num4, ModContent.ProjectileType<FallingDagger>(), 36, 0f, Player.whoAmI, 0f, 0f);
                int projj2 = Projectile.NewProjectile(Player.GetSource_FromThis(), num7, num2, num9, num10, ModContent.ProjectileType<FallingDagger>(), 36, 0f, Player.whoAmI, 0f, 0f);
                int projj3 = Projectile.NewProjectile(Player.GetSource_FromThis(), num8, num2, num11, num12, ModContent.ProjectileType<FallingDagger>(), 36, 0f, Player.whoAmI, 0f, 0f);
                Vector2 direction = Main.projectile[projj].Center - target.Center;
                Vector2 direction2 = Main.projectile[projj2].Center - target.Center;
                Vector2 direction3 = Main.projectile[projj3].Center - target.Center;
                float rotation = (float)Math.Atan2(direction.Y, direction.X);
                float rotation2 = (float)Math.Atan2(direction2.Y, direction2.X);
                float rotation3 = (float)Math.Atan2(direction3.Y, direction3.X);
                Main.projectile[projj].rotation = rotation + ((float)Math.PI * 0.5f);
                Main.projectile[projj2].rotation = rotation2 + ((float)Math.PI * 0.5f);
                Main.projectile[projj3].rotation = rotation3 + ((float)Math.PI * 0.5f);
            }
            if (IsEquippedRivetedSet && hit.Crit)
                Player.AddBuff(BuffID.RapidHealing, 300);        
            if (Player.FindBuffIndex(ModContent.BuffType<BismuthumPoisoningPlayer>()) != -1)
                target.AddBuff(ModContent.BuffType<BismuthumPoisoningEnemy>(), 400);
            int check1 = Player.FindBuffIndex(ModContent.BuffType<KillingSpreeI>());
            int check2 = Player.FindBuffIndex(ModContent.BuffType<KillingSpreeII>());
            int check3 = Player.FindBuffIndex(ModContent.BuffType<KillingSpreeIII>());
            if (skill91lvl > 0 && target.life < 0 && item.CountsAsClass(DamageClass.Ranged))
            {               
                if (check1 == -1 && check2 == -1 && check3 == -1)
                    Player.AddBuff(ModContent.BuffType<KillingSpreeI>(), 300);
                if (check1 != -1 && check2 == -1 && check3 == -1)
                {
                    Player.ClearBuff(ModContent.BuffType<KillingSpreeI>());
                    Player.AddBuff(ModContent.BuffType<KillingSpreeII>(), 300);
                }
                if (check1 == -1 && check2 != -1 && check3 == -1)
                {
                    Player.ClearBuff(ModContent.BuffType<KillingSpreeII>());
                    Player.AddBuff(ModContent.BuffType<KillingSpreeIII>(), 300);
                }
                if (check3 != -1)
                    Player.AddBuff(ModContent.BuffType<KillingSpreeIII>(), 300);

            }
            if (skill102lvl > 0)
            {
                if (Main.rand.Next(1, 101) <= 3)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 150);
                }
            }
            int check = Player.FindBuffIndex(ModContent.BuffType<StunningWeapons>());
            if (check != -1)
            {
                if (skill94lvl > 0 && skill95lvl < 1)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 90);
                }

                if (skill95lvl > 0 && skill96lvl < 1)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 120);
                }

                if (skill96lvl > 0)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 180);
                }
            }
            if (Player.FindBuffIndex(ModContent.BuffType<DeathWish>()) != -1)
                killordietaimer = 0;
            if (skill13lvl > 0 && !Main.dayTime && item.CountsAsClass(DamageClass.Melee) && target.type != NPCID.TargetDummy)
            {
                vampireHeal(hit.Damage, target.Center);
                int heal = (int)(hit.Damage * 0.04f);
                heal = Math.Max(1, heal);
                Player.statLife += heal;
                Player.HealEffect(heal);
            }
            if (skill29lvl > 0 && item.CountsAsClass(DamageClass.Melee) && target.type != NPCID.TargetDummy)
            {
                vampireHeal(hit.Damage, target.Center);
                int heal = (int)(hit.Damage * 0.06f);
                heal = Math.Max(1, heal);
                Player.statLife += heal;
                Player.HealEffect(heal);
            }
            //------------------------------------------//
            if (skill57lvl > 0 && item.CountsAsClass(DamageClass.Magic) && hit.Crit && target.active && !target.friendly)
            {
                Manasteel(hit.Damage, target.Center);
                int mana = (int)(Player.statManaMax2 * 0.2f);
                mana = Math.Max(1, mana);
                Player.statMana += mana;
                Player.ManaEffect(mana);
            }
            if (skill63lvl > 0 && item.CountsAsClass(DamageClass.Magic) && !target.friendly)
            {
                Manasteel(hit.Damage, target.Center);
                int mana = (int)(hit.Damage * 0.07f);
                mana = Math.Max(1, mana);
                Player.statMana += mana;
                Player.ManaEffect(mana);
            }           
            int buffcheck1 = Player.FindBuffIndex(BuffID.Hunter);
            int buffcheck2 = Player.FindBuffIndex(BuffID.NightOwl);
            if (buffcheck1 != -1 && buffcheck2 != -1 && skill71lvl > 0 && !target.friendly)
            {
                Player.AddBuff(ModContent.BuffType<Persecution>(), 480);
            }
            if (amuletcounter > 180)
            {
                Manasteel(hit.Damage, target.Center);
                int mana = (int)(Player.statManaMax2 * (amuletcounter - 180) / 600);
                mana = Math.Max(1, mana);
                Player.statMana += mana;
                Player.ManaEffect(mana);
            }
        }
        public override void OnHitNPCWithProj(Projectile proj, NPC target, NPC.HitInfo hit, int damageDone)
        {
            if (target.life <= 0)
            {
                if (target.type == 4)
                {
                    KilledEoC = true;
                    KilledBossesCount++;
                }
                if (target.type == 50 && !KilledKingSlime)
                    KilledKingSlime = true;
                if ((target.type == 13 || target.type == 14 || target.type == 15 || target.type == 266) && !KilledWormorBrain)
                {
                    KilledWormorBrain = true;
                }
                if (target.type == NPCID.SkeletronHead && !KilledSkeletron)
                {
                    KilledBossesCount++;
                    KilledSkeletron = true;
                }
                if (target.type == NPCID.QueenBee && !KilledQoB)
                    KilledQoB = true;
                if (target.type == NPCID.WallofFlesh && !KilledWoF)
                {
                    KilledBossesCount++;
                    KilledWoF = true;
                }
                if ((target.type == 125 || target.type == 126 || target.type == 134 || target.type == 127) && !Player.GetModPlayer<BismuthPlayer>().KilledAnyMechBoss)
                {
                    KilledBossesCount++;
                    KilledAnyMechBoss = true;
                }
                if ((target.type == NPCID.Spazmatism || target.type == NPCID.Retinazer) && !KilledTwins)
                    KilledTwins = true;
                if (target.type == NPCID.SkeletronPrime && !KilledSkeletronPrime)
                    KilledSkeletronPrime = true;
                if (target.type == NPCID.TheDestroyer && !KilledDestroyer)
                    KilledDestroyer = true;
                if (target.type == NPCID.Plantera && !KilledPlantera)
                {
                    KilledBossesCount++;
                    KilledPlantera = true;
                }
                if (target.type == NPCID.Golem && !KilledGolem)
                {
                    KilledBossesCount++;
                    KilledGolem = true;
                }
                if (target.type == NPCID.DukeFishron && !KilledFishron)
                    KilledFishron = true;
                if (target.type == NPCID.CultistBoss && !KilledCultist)
                    KilledCultist = true;
                if (target.type == NPCID.MoonLordCore && !KilledMoonLord)
                    KilledMoonLord = true;
            }
            if (IsEquippedLichCrown)
            {
                if (target.life <= 0)
                    LichPoints++;
                if (target.type != NPCID.TargetDummy && LichPoints <= 50)
                    Lich(hit.Damage, target.Center);
            }

            if (killersetbonus)
            {
                killersettimer = 0;
            }
            if (target.type != NPCID.TargetDummy)
            {
                    if (IsEquippedPendant)
                    {
                        vampireHeal(hit.Damage, target.Center);
                        int heal = (int)((Player.statLifeMax2 - Player.statLife) / 100);
                        heal = Math.Max(1, heal);
                        Player.statLife += heal;
                        Player.HealEffect(heal);
                    }                
            }
            if (!Main.dayTime && target.type != NPCID.TargetDummy)
            {
                for (int k = 3; k < 8 + Player.extraAccessorySlots; k++)
                {
                    if (Player.armor[k].type == ModContent.ItemType<SignOfUndead>())
                    {
                        vampireHeal(hit.Damage, target.Center);
                        int heal = (int)(hit.Damage * 0.02f);
                        heal = Math.Max(1, heal);
                        Player.statLife += heal;
                        Player.HealEffect(heal);
                        break;
                    }
                }
            }
            if (IsVampire && target.type != NPCID.TargetDummy)
            {
                vampireHeal(hit.Damage, target.Center);
                int heal = (int)(hit.Damage * 0.08f);
                heal = Math.Max(1, heal);
                Player.statLife += heal;
                Player.HealEffect(heal);
                if (target.life < 0)
                    Hunger += 3;
            }
            if (Player.FindBuffIndex(ModContent.BuffType<BismuthumPoisoningPlayer>()) != -1)
                target.AddBuff(ModContent.BuffType<BismuthumPoisoningEnemy>(), 400);
            int check1 = Player.FindBuffIndex(ModContent.BuffType<KillingSpreeI>());
            int check2 = Player.FindBuffIndex(ModContent.BuffType<KillingSpreeII>());
            int check3 = Player.FindBuffIndex(ModContent.BuffType<KillingSpreeIII>());
            if (skill103lvl > 0 && target.life < 0 && proj.CountsAsClass(DamageClass.Ranged))
            {
                if (check1 == -1 && check2 == -1 && check3 == -1)
                    Player.AddBuff(ModContent.BuffType<KillingSpreeI>(), 300);
                if (check1 != -1 && check2 == -1 && check3 == -1)
                {
                    Player.ClearBuff(ModContent.BuffType<KillingSpreeI>());
                    Player.AddBuff(ModContent.BuffType<KillingSpreeII>(), 300);
                }
                if (check1 == -1 && check2 != -1 && check3 == -1)
                {
                    Player.ClearBuff(ModContent.BuffType<KillingSpreeII>());
                    Player.AddBuff(ModContent.BuffType<KillingSpreeIII>(), 300);
                }
                if (check3 != -1)
                    Player.AddBuff(ModContent.BuffType<KillingSpreeIII>(), 300);

            }
            if (skill144lvl > 0)
            {            
                float num = Player.position.X;
                float num7 = Player.position.X + 600;
                float num8 = Player.position.X - 600;
                float num2 = Player.position.Y - 600;
                Vector2 vector = new Vector2(num, num2);
                Vector2 vector2 = new Vector2(num7, num2);
                Vector2 vector3 = new Vector2(num8, num2);
                float num3 = target.position.X - vector.X;
                float num4 = target.position.Y - vector.Y;
                float num9 = target.position.X - vector2.X;
                float num10 = target.position.Y - vector2.Y;
                float num11 = target.position.X - vector3.X;
                float num12 = target.position.Y - vector3.Y;
                num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num9 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num10 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num11 += (float)Main.rand.Next(-50, 51) * 0.1f;
                num12 += (float)Main.rand.Next(-50, 51) * 0.1f;
                int num5 = 24;
                float num6 = (float)Math.Sqrt((double)(num3 * num3 + num4 * num4));
                num6 = (float)num5 / num6;
                num3 *= num6;
                num4 *= num6;
                num9 *= num6;
                num10 *= num6;
                num11 *= num6;
                num12 *= num6;
                int projj = Projectile.NewProjectile(Player.GetSource_FromThis(), num, num2, num3, num4, ModContent.ProjectileType<FallingDagger>(), 36, 0f, Player.whoAmI, 0f, 0f);
                int projj2 = Projectile.NewProjectile(Player.GetSource_FromThis(), num7, num2, num9, num10, ModContent.ProjectileType<FallingDagger>(), 36, 0f, Player.whoAmI, 0f, 0f);
                int projj3 = Projectile.NewProjectile(Player.GetSource_FromThis(), num8, num2, num11, num12, ModContent.ProjectileType<FallingDagger>(), 36, 0f, Player.whoAmI, 0f, 0f);
                Vector2 direction = Main.projectile[projj].Center - target.Center;
                Vector2 direction2 = Main.projectile[projj2].Center - target.Center;
                Vector2 direction3 = Main.projectile[projj3].Center - target.Center;
                float rotation = (float)Math.Atan2(direction.Y, direction.X);
                float rotation2 = (float)Math.Atan2(direction2.Y, direction2.X);
                float rotation3 = (float)Math.Atan2(direction3.Y, direction3.X);
                Main.projectile[projj].rotation = rotation + ((float)Math.PI * 0.5f);
                Main.projectile[projj2].rotation = rotation2 + ((float)Math.PI * 0.5f);
                Main.projectile[projj3].rotation = rotation3 + ((float)Math.PI * 0.5f);
            }                                     
            if (skill142lvl > 0 && hit.Crit)
            {
                Player.AddBuff(ModContent.BuffType<Hypersonic>(), 300);
            }
            if (skill102lvl > 0)
            {
                if (Main.rand.Next(1, 101) <= 3)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 150);
                }
            }
            int check = Player.FindBuffIndex(ModContent.BuffType<StunningWeapons>());
            if (check != -1)
            {
                if (skill94lvl > 0 && skill95lvl < 1)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 90);
                }

                if (skill95lvl > 0 && skill96lvl < 1)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 120);
                }

                if (skill96lvl > 0)
                {
                    if (target.FindBuffIndex(ModContent.BuffType<Paralisys>()) == -1)
                    {
                        CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, target.width, target.height), Color.LightGray, "Stunned!");
                    }
                    target.AddBuff(ModContent.BuffType<Paralisys>(), 180);
                }
            }
            if (Player.FindBuffIndex(ModContent.BuffType<DeathWish>()) != -1)
                    killordietaimer = 0;
                if (skill13lvl > 0 && !Main.dayTime && proj.CountsAsClass(DamageClass.Melee) && target.type != NPCID.TargetDummy)
                {
                    vampireHeal(hit.Damage, target.Center);
                    int heal = (int)(hit.Damage * 0.04f);
                    heal = Math.Max(1, heal);
                    Player.statLife += heal;
                    Player.HealEffect(heal);
                }
                if (skill29lvl > 0 && proj.CountsAsClass(DamageClass.Melee) && target.type != NPCID.TargetDummy)
                {
                    vampireHeal(hit.Damage, target.Center);
                    int heal = (int)(hit.Damage * 0.06f);
                    heal = Math.Max(1, heal);
                    Player.statLife += heal;
                    Player.HealEffect(heal);
                }
                //------------------------------------//
                if (skill57lvl > 0 && proj.CountsAsClass(DamageClass.Magic) && hit.Crit && target.active && !target.friendly)
                {
                    Manasteel(hit.Damage, target.Center);
                    int mana = (int)(Player.statManaMax2 * 0.2f);
                    mana = Math.Max(1, mana);
                    Player.statMana += mana;
                    Player.ManaEffect(mana);                  
                }

                if (skill63lvl > 0 && proj.CountsAsClass(DamageClass.Magic) && !target.friendly)
                {
                    Manasteel(hit.Damage, target.Center);
                    int mana = (int)(hit.Damage * 0.07f);
                    mana = Math.Max(1, mana);
                    Player.statMana += mana;
                    Player.ManaEffect(mana);
                }
                //------------------------------------//
                int buffcheck1 = Player.FindBuffIndex(BuffID.Hunter);
                int buffcheck2 = Player.FindBuffIndex(BuffID.NightOwl);
                if (buffcheck1 != -1 && buffcheck2 != -1 && skill71lvl > 0 && !target.friendly)
                {
                    Player.AddBuff(ModContent.BuffType<Persecution>(), 480);
                }

            //-----------------------------------------//
            if (skill85lvl > 0 && hit.Crit)
            {
                Player.AddBuff(ModContent.BuffType<WoundHealing>(), 240);
            }
        }           
        public override void ModifyHitNPCWithItem(Item item, NPC target, ref NPC.HitModifiers modifiers)
        {
            if (killersettimer >= 600)
            {
                modifiers.SourceDamage *= 4f;
            }
            if (item.type == ModContent.ItemType<TheBladeOfWoe>() && target.townNPC && target.aiStyle != -1)
            {
                Vector2 point1 = target.Center + new Vector2(0f, -100f);
                Vector2 point2 = target.Center + new Vector2(96f, -30f);
                Vector2 point3 = target.Center + new Vector2(61f, 90f);
                Vector2 point4 = target.Center + new Vector2(-61, 90f);
                Vector2 point5 = target.Center + new Vector2(-96f, -30f);
                modifiers.SourceDamage *= 100;
                Projectile.NewProjectile(Player.GetSource_FromThis(), point1, (point3 - point1) / 30, ModContent.ProjectileType<BladeOfWoeP>(), 0, 0f);
                Projectile.NewProjectile(Player.GetSource_FromThis(), point2, (point4 - point2) / 30, ModContent.ProjectileType<BladeOfWoeP>(), 0, 0f);
                Projectile.NewProjectile(Player.GetSource_FromThis(), point3, (point5 - point3) / 30, ModContent.ProjectileType<BladeOfWoeP>(), 0, 0f);
                Projectile.NewProjectile(Player.GetSource_FromThis(), point4, (point1 - point4) / 30, ModContent.ProjectileType<BladeOfWoeP>(), 0, 0f);
                Projectile.NewProjectile(Player.GetSource_FromThis(), point5, (point2 - point5) / 30, ModContent.ProjectileType<BladeOfWoeP>(), 0, 0f);
                Item.NewItem(Player.GetSource_FromThis(), (int)target.position.X, (int)target.position.Y, target.width, target.height, ModContent.ItemType<DarkEssence>(), Main.rand.Next(1, 4));
            }
            int checkbuff = Player.FindBuffIndex(ModContent.BuffType<Stealth>());
            if (skill31lvl > 0 && Main.rand.Next(0, 100) < 1 && item.CountsAsClass(DamageClass.Melee))
            {
                modifiers.SourceDamage *= 3;
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, Player.width, Player.height), new Color(255, 100, 30, 255), "x3 damage!");
            }
            if (skill31lvl > 0 && item.CountsAsClass(DamageClass.Melee))
                modifiers.CritDamage *= 1.5f;
            if (skill32lvl > 0 && item.CountsAsClass(DamageClass.Melee))
                modifiers.Knockback *= 2;
            if (skill35lvl > 0 && Main.rand.Next(0, 100) < 2 && item.CountsAsClass(DamageClass.Melee))
            {
                modifiers.SourceDamage *= 5;
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, (int)(Player.width * 1.5), (int)(Player.height * 1.5)), new Color(255, 100, 30, 255), "x5 damage!");
            }
            //--------------------------------------------------//
            if (skill54lvl > 0 && item.CountsAsClass(DamageClass.Magic))
                modifiers.CritDamage *= 1.25f;
            if (skill64lvl > 0 && item.CountsAsClass(DamageClass.Magic))
                modifiers.CritDamage *= 1.35f;
            //--------------------------------------//
            if (item.useStyle == 3 && item.CountsAsClass(DamageClass.Melee) && skill66lvl > 0)
            {
                modifiers.SourceDamage = modifiers.SourceDamage.Scale(1.4f);
            }           
            if (skill78lvl > 0 && Main.rand.Next(1, 101) == 1)
            {
                modifiers.SourceDamage *= 5;
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, (int)(Player.width * 1.5), (int)(Player.height * 1.5)), new Color(255, 100, 30, 255), "x5 damage!");
                if (skill80lvl > 0 && target.type != NPCID.TargetDummy)
                {
                    int sourceDamage = (int)modifiers.SourceDamage.Base; 
                    vampireHeal(sourceDamage, target.Center);
                    int heal = (Player.statLifeMax2 / 4);
                    heal = Math.Max(1, heal);
                    Player.statLife += heal;
                    Player.HealEffect(heal);
                }
            }
            if (Main.rand.Next(1, 51) == 1 && skill79lvl > 0)
            {
                if (skill81lvl > 0)
                    Player.AddBuff(BuffID.ShadowDodge, 9999999);
                if (target.boss)
                    modifiers.SourceDamage *= 10;
                else
                {
                    modifiers.SourceDamage = new StatModifier { Base = target.lifeMax - 1 };
                }

                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, (int)(Player.width * 1.5), (int)(Player.height * 1.5)), new Color(255, 100, 30, 255), "Lethal Hit!");
            }
            if (checkbuff != -1 && item.ModItem != null && item.ModItem is AssassinItem)
            {
                modifiers.CritDamage *= 1.75f;
                if (skill88lvl > 0 && Main.rand.Next(1, 3) == 1)
                    target.AddBuff(BuffID.Poisoned, 600);
            }
            if (skill90lvl > 0 && !Main.dayTime)
                modifiers.CritDamage *= 1.3f;
            //--------------------------------------------------//
            if (item.CountsAsClass(DamageClass.Ranged) && skill99lvl > 0)
                modifiers.CritDamage *= 1.25f;
            //--------------------------------------------------//
            if (item.CountsAsClass(DamageClass.Throwing) && skill139lvl > 0)
                modifiers.CritDamage *= 1.3f;
            if (item.CountsAsClass(DamageClass.Throwing) && skill147lvl > 0)
                modifiers.CritDamage *= 1.25f;
            //--------------------------------------------------//           
        }
        public override void ModifyHitNPCWithProj(Projectile proj, NPC target, ref NPC.HitModifiers modifiers)
        {
            //ApplyCritBonus(ref damage, ref crit);
            if (killersettimer >= 600)
            {
                modifiers.SourceDamage *= 4f;
            }
            if (proj.type == ModContent.ProjectileType<LifestealP>() && target.type != NPCID.TargetDummy)
            {
                int sourceDamage = (int)modifiers.SourceDamage.Base;
                vampireHeal(sourceDamage, target.Center);
                int heal = (int)(modifiers.SourceDamage.Base *= 0.05f);
                heal = Math.Max(1, heal);
                Player.statLife += heal;
                Player.HealEffect(heal);
            }
            int checkbuff = Player.FindBuffIndex(ModContent.BuffType<Stealth>());
            if (skill31lvl > 0 && Main.rand.Next(0, 100) < 1 && proj.CountsAsClass(DamageClass.Melee))
            {
                modifiers.SourceDamage *= 3;
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, Player.width, Player.height), new Color(255, 100, 30, 255), "x3 damage!");
            }
            if (skill31lvl > 0 && proj.CountsAsClass(DamageClass.Melee))
                modifiers.CritDamage *= 1.25f;
            if (skill32lvl > 0 && proj.CountsAsClass(DamageClass.Melee))
                modifiers.Knockback *= 2;
            if (skill35lvl > 0 && Main.rand.Next(0, 100) < 2 && proj.CountsAsClass(DamageClass.Melee))
            {
                modifiers.SourceDamage *= 5;
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, (int)(Player.width * 1.5), (int)(Player.height * 1.5)), new Color(255, 100, 30, 255), "x5 damage!");
            }
            //------------------------------------------------------------//
            if (skill54lvl > 0 && proj.CountsAsClass(DamageClass.Magic))
                modifiers.CritDamage *= 1.25f;
            if (skill64lvl > 0 && proj.CountsAsClass(DamageClass.Magic))
                modifiers.CritDamage *= 1.35f;
            //------------------------------------------------------------//
            if (skill78lvl > 0 && Main.rand.Next(1, 101) == 1)
            {
                modifiers.SourceDamage *= 5;
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, (int)(Player.width * 1.5), (int)(Player.height * 1.5)), new Color(255, 100, 30, 255), "x5 damage!");
                if (skill80lvl > 0 && target.active && !target.friendly && target.type != NPCID.TargetDummy)
                {
                    int sourceDamage = (int)modifiers.SourceDamage.Base;
                    vampireHeal(sourceDamage, target.Center);
                    int heal = (Player.statLifeMax2 / 4);
                    heal = Math.Max(1, heal);
                    Player.statLife += heal;
                    Player.HealEffect(heal);
                }
            }
            if (skill79lvl > 0 && Main.rand.Next(1, 51) == 1)
            {
                if (skill81lvl > 0)
                    Player.AddBuff(BuffID.ShadowDodge, 9999999);
                if (target.boss)
                    modifiers.SourceDamage *= 10;
                else
                    modifiers.SourceDamage = new StatModifier { Base = target.lifeMax - 1 };
                CombatText.NewText(new Rectangle((int)target.position.X, (int)target.position.Y, (int)(Player.width * 1.5), (int)(Player.height * 1.5)), new Color(255, 100, 30, 255), "Lethal Hit!");
            }
            if (checkbuff != -1)
            {
                modifiers.CritDamage *= 1.75f;
                if (skill88lvl > 0 && Main.rand.Next(1, 3) == 1)
                    target.AddBuff(BuffID.Poisoned, 600);
            }
            if (skill90lvl > 0 && !Main.dayTime)
                modifiers.CritDamage *= 1.3f;
            //------------------------------------------------------------//
            if (proj.CountsAsClass(DamageClass.Ranged) && skill99lvl > 0)
                modifiers.CritDamage *= 1.25f;
            if (proj.CountsAsClass(DamageClass.Ranged) && skill121lvl > 0)
                modifiers.CritDamage *= 1.25f;
            //------------------------------------------------------------//
            if (proj.CountsAsClass(DamageClass.Throwing) && skill139lvl > 0)
                modifiers.CritDamage *= 1.25f;
            if (proj.CountsAsClass(DamageClass.Throwing) && skill147lvl > 0)
                modifiers.SourceDamage *= 1.25f;
            //------------------------------------------------------------//                
        }
        public override void ModifyHitByNPC(NPC npc, ref Player.HurtModifiers modifiers)
        {            
           
            if (KilledBossesCount == 2)
            {
                if ((int)(Player.statLifeMax2 * 0.2f) > Player.statLife && IsEquippedAthenasShield)
                    Player.HealEffect((int)(modifiers.SourceDamage.Base / 4));
            }
            if (KilledBossesCount >= 3 && KilledBossesCount < 6)
            {
                if ((int)(Player.statLifeMax2 * 0.35f) > Player.statLife && IsEquippedAthenasShield)
                {
                    Player.HealEffect((int)(modifiers.SourceDamage.Base * 0.35f));
                    Player.AddBuff(BuffID.RapidHealing, 300);
                }
            }
            if (KilledBossesCount == 6)
            {
                if ((int)(Player.statLifeMax2 * 0.5f) > Player.statLife && IsEquippedAthenasShield)
                {
                    Player.HealEffect((int)(modifiers.SourceDamage.Base * 0.35f));
                    Player.AddBuff(BuffID.RapidHealing, 420);
                    Player.AddBuff(ModContent.BuffType<Invulnerability>(), 180);
                }
            }
            if (EmpathyNPCs.Count > 0)
            {
                //foreach (NPC netednpc in EmpathyNPCs) // времено отключено
                //{
                //    netednpc.StrikeNPCNoInteraction((int)damage / (EmpathyNPCs.Count + 1), 0f, 1);
                //}
                //modifiers.SourceDamage /= (EmpathyNPCs.Count + 1);
            }
        }
        public override void ModifyHitByProjectile(Projectile proj, ref Player.HurtModifiers modifiers)
        {
            if (Main.rand.Next(1, 101) <= (ReflectChance + ReflectChanceForSkills) || Player.FindBuffIndex(ModContent.BuffType<Specularity>()) != -1)
            {
                if (proj.Hitbox.Intersects(Player.Hitbox))
                {
                    if (proj.Center.X > Player.Center.X * 0.5f)
                    {

                        proj.direction = 1;
                        proj.spriteDirection = 1;
                    }
                    else
                    {
                        proj.direction = -1;
                        proj.spriteDirection = -1;
                    }
                    proj.timeLeft = proj.timeLeft / 2;
                    proj.hostile = false;
                    proj.friendly = true;
                    proj.owner = Player.whoAmI;
                    proj.velocity *= -1f;
                    proj.penetrate = 1;
                    proj.netUpdate = true;
                    CombatText.NewText(new Rectangle((int)Player.position.X, (int)Player.position.Y, Player.width, Player.height), Color.LightGoldenrodYellow, "Reflected!");
                }
            }
            else if (EmpathyNPCs.Count > 0)
            {
                //foreach (NPC netednpc in EmpathyNPCs) //времено отключено
                //{
                //    netednpc.StrikeNPCNoInteraction((int)damage / (EmpathyNPCs.Count + 1), 0f, 1);
                //}
                //damage /= (EmpathyNPCs.Count + 1);
            }
        }
        public override bool CanBeHitByProjectile(Projectile proj)
        {           
            if (Main.rand.Next(1, 101) <= (ParryChance + ParryChanceForSkills))
            {
                if (proj.Hitbox.Intersects(Player.Hitbox))
                {
                    if (proj.Center.X > Player.Center.X * 0.5f)
                    {
                        proj.direction = 1;
                        proj.spriteDirection = 1;
                    }
                    else
                    {
                        proj.direction = -1;
                        proj.spriteDirection = -1;
                    }
                    proj.timeLeft = proj.timeLeft / 2;
                    proj.hostile = false;
                    proj.friendly = true;
                    proj.owner = Player.whoAmI;
                    proj.velocity *= -1f;
                    proj.penetrate = 1;
                    proj.netUpdate = true;
                    CombatText.NewText(new Rectangle((int)Player.position.X, (int)Player.position.Y, Player.width, Player.height), Color.LightGoldenrodYellow, "Parried!");
                }
                return false;
            }
            if (Player.FindBuffIndex(ModContent.BuffType<EnergyShield>()) != -1 && skill108lvl != 0)
            {
                if (EnergyShieldAlpha > 100)
                    EnergyShieldAlpha--;
                else
                    EnergyShieldAlpha = 100;
                for (int i = 0; i < Main.projectile.Length; i++)
                {
                    if (Main.projectile[i].active && Main.projectile[i].hostile)
                    {
                        Rectangle rect1 = new Rectangle((int)(Player.position.X - 10f), (int)(Player.position.Y), 38, 42);
                        Rectangle rect2 = new Rectangle((int)(Player.position.X - 4f), (int)(Player.position.Y - 4f), 26, 50);
                        Rectangle rect3 = new Rectangle((int)(Player.position.X - 14f), (int)(Player.position.Y + 6f), 46, 30);
                        Rectangle rect4 = new Rectangle((int)(Player.position.X - 18f), (int)(Player.position.Y + 14f), 54, 14);
                        Projectile projj = Main.projectile[i];
                        if (rect1.Intersects(projj.Hitbox) || rect2.Intersects(projj.Hitbox) || rect3.Intersects(projj.Hitbox) || rect4.Intersects(projj.Hitbox))
                        {
                            if (projj.Center.X > Player.Center.X * 0.5f)
                            {

                                projj.direction = 1;
                                projj.spriteDirection = 1;
                            }
                            else
                            {
                                projj.direction = -1;
                                projj.spriteDirection = -1;
                            }
                            projj.timeLeft = proj.timeLeft / 2;
                            projj.hostile = false;
                            projj.friendly = true;
                            projj.owner = Player.whoAmI;
                            projj.velocity *= -1f;
                            projj.penetrate = 1;
                            projj.netUpdate = true;
                            EnergyShieldAlpha = 180;
                        }
                        return false;
                    }
                }
            }
            return CanBeHitByProjectile(proj);
        }
        public override bool? CanHitNPCWithItem(Item item, NPC target)
        {
            if (item.type == ModContent.ItemType<TheBladeOfWoe>() && target.townNPC && target.aiStyle != -1)
                return true;
            return base.CanHitNPCWithItem(item, target);
        }
        #region skills
        #region warrior's skills
        //skill1
        public int skill1X = (int)(Quests.treecoord.X + 308);
        public int skill1Y = (int)(Quests.treecoord.Y + 6);
        public string skill1name = "Warrior is my Choose!";
        public int skill1lvl = 0;
        public int skill1lvlmax = 1;
        public string skill1text = "+8% to melee damage, -20% to other types.";
        public Texture2D skill1texture = ModContent.Request<Texture2D>("Bismuth/UI/skill1texture").Value;
        public Color skill1color = Color.White;
        //skill2
        public int skill2X = (int)(Quests.treecoord.X + 392);
        public int skill2Y = (int)(Quests.treecoord.Y + 76);
        public string skill2name = "Defender-Apprentice";
        public int skill2lvl = 0;
        public int skill2lvlmax = 1;
        public string skill2text = "+2 defence, +5% damage resistance.";
        public Texture2D skill2texture = ModContent.Request<Texture2D>("Bismuth/UI/skill2texture").Value;
        public Color skill2color = Color.Gray;
        //skill3
        public int skill3X = (int)(Quests.treecoord.X + 423);
        public int skill3Y = (int)(Quests.treecoord.Y + 182);
        public string skill3name = "Tenacious";
        public int skill3lvl = 0;
        public int skill3lvlmax = 7;
        public string skill3text = "Increases maximum HP.";
        public Texture2D skill3texture = ModContent.Request<Texture2D>("Bismuth/UI/skill3texture").Value;
        public Color skill3color = Color.Gray;
        //skill4
        public int skill4X = (int)(Quests.treecoord.X + 536);
        public int skill4Y = (int)(Quests.treecoord.Y + 210);
        public string skill4name = "Hold the Line!";
        public int skill4lvl = 0;
        public int skill4lvlmax = 1;
        public string skill4text = "+6hp/sec and +7 defence, when you stay.";
        public Texture2D skill4texture = ModContent.Request<Texture2D>("Bismuth/UI/skill4texture").Value;
        public Color skill4color = Color.Gray;
        //skill5
        public int skill5X = (int)(Quests.treecoord.X + 649);
        public int skill5Y = (int)(Quests.treecoord.Y + 234);
        public string skill5name = "Like a Stone Wall";
        public int skill5lvl = 0;
        public int skill5lvlmax = 1;
        public string skill5text = "+15hp/sec and +18 defence, when you stay.";
        public Texture2D skill5texture = ModContent.Request<Texture2D>("Bismuth/UI/skill5texture").Value;
        public Color skill5color = Color.Gray;
        //skill6
        public int skill6X = (int)(Quests.treecoord.X + 709);
        public int skill6Y = (int)(Quests.treecoord.Y + 155);
        public string skill6name = "Hot Revenge";
        public int skill6lvl = 0;
        public int skill6lvlmax = 1;
        public string skill6text = "+20hp/sec, +30 defence, and +10% damage \nresistance when you stay. Mobs get ''On Fire!''";
        public Texture2D skill6texture = ModContent.Request<Texture2D>("Bismuth/UI/skill6texture").Value;
        public Color skill6color = Color.Gray;
        //skill7 
        public int skill7X = (int)(Quests.treecoord.X + 709);
        public int skill7Y = (int)(Quests.treecoord.Y + 313);
        public string skill7name = "Cold Revenge";
        public int skill7lvl = 0;
        public int skill7lvlmax = 1;
        public string skill7text = "+20hp/sec, +30 defence, and +10% damage \nresistance when you stay. Mobs get \n''Frostburn''.";
        public Texture2D skill7texture = ModContent.Request<Texture2D>("Bismuth/UI/skill7texture").Value;
        public Color skill7color = Color.Gray;
        //skill8
        public int skill8X = (int)(Quests.treecoord.X + 439);
        public int skill8Y = (int)(Quests.treecoord.Y + 307);
        public string skill8name = "Armored";
        public int skill8lvl = 0;
        public int skill8lvlmax = 6;
        public string skill8text = "Increases maximum defence.";
        public Texture2D skill8texture = ModContent.Request<Texture2D>("Bismuth/UI/skill8texture").Value;
        public Color skill8color = Color.Gray;
        //skill9
        public int skill9X = (int)(Quests.treecoord.X + 453);
        public int skill9Y = (int)(Quests.treecoord.Y + 431);
        public string skill9name = "Thirst for Life";
        public int skill9lvl = 0;
        public int skill9lvlmax = 1;
        public string skill9text = "+4hp/sec, less HP - more life regeneration.";      
        public Texture2D skill9texture = ModContent.Request<Texture2D>("Bismuth/UI/skill9texture").Value;
        public Color skill9color = Color.Gray;
        //skill10
        public int skill10X = (int)(Quests.treecoord.X + 549);
        public int skill10Y = (int)(Quests.treecoord.Y + 431);
        public string skill10name = "Protected from Evil";
        public int skill10lvl = 0;
        public int skill10lvlmax = 1;
        public bool skill10activated = false;
        public string skill10text = "+15% damage resistance, if you are in \ncrimson or corruption.";
        public Texture2D skill10texture = ModContent.Request<Texture2D>("Bismuth/UI/skill10texture").Value;
        public Color skill10color = Color.Gray;
        //skill11
        public int skill11X = (int)(Quests.treecoord.X + 437);
        public int skill11Y = (int)(Quests.treecoord.Y + 563);
        public string skill11name = "To the Last Drop of Blood";
        public int skill11lvl = 0;
        public int skill11lvlmax = 1;
        public string skill11text = "+8hp/sec on 5 seconds after getting damage.";
        public Texture2D skill11texture = ModContent.Request<Texture2D>("Bismuth/UI/skill11texture").Value;
        public Color skill11color = Color.Gray;
        //skill12
        public int skill12X = (int)(Quests.treecoord.X + 565);
        public int skill12Y = (int)(Quests.treecoord.Y + 563);
        public string skill12name = "You can't break me!";
        public int skill12lvl = 0;
        public int skill12lvlmax = 1;
        public string skill12text = "+5% block chance, +10% damage resistance.";
        public Texture2D skill12texture = ModContent.Request<Texture2D>("Bismuth/UI/skill12texture").Value;
        public Color skill12color = Color.Gray;
        //skill13
        public int skill13X = (int)(Quests.treecoord.X + 502);
        public int skill13Y = (int)(Quests.treecoord.Y + 677);
        public string skill13name = "My Grandpa was a Vampire";
        public int skill13lvl = 0;
        public int skill13lvlmax = 1;
        public string skill13text = "5% lifesteal at night.";
        public Texture2D skill13texture = ModContent.Request<Texture2D>("Bismuth/UI/skill13texture").Value;
        public Color skill13color;
        //skill14
        public int skill14X = (int)(Quests.treecoord.X + 590);
        public int skill14Y = (int)(Quests.treecoord.Y + 749);
        public string skill14name = "Panacea from damage";
        public int skill14lvl = 0;
        public int skill14lvlmax = 1;
        public string skill14text = "Give absolutely invincibility.";
        public Texture2D skill14texture = ModContent.Request<Texture2D>("Bismuth/UI/skill14texture").Value;
        public Color skill14color = Color.Gray;
        //skill15
        public int skill15X = (int)(Quests.treecoord.X + 703);
        public int skill15Y = (int)(Quests.treecoord.Y + 787);
        public string skill15name = "The very Steadfastness";
        public int skill15lvl = 0;
        public int skill15lvlmax = 1;
        public string skill15text = "Give absolutely invincibility.";
        public Texture2D skill15texture = ModContent.Request<Texture2D>("Bismuth/UI/skill15texture").Value;
        public Color skill15color = Color.Gray;
        //skill16
        public int skill16X = (int)(Quests.treecoord.X + 502);
        public int skill16Y = (int)(Quests.treecoord.Y + 788);
        public string skill16name = "Legendary Defender!";
        public int skill16lvl = 0;
        public int skill16lvlmax = 1;
        public string skill16text = "+20 defence, +15% damage resistance, +5hp/sec, \n+70 HP, +10% block chance, -25% movement \nspeed";
        public Texture2D skill16texture = ModContent.Request<Texture2D>("Bismuth/UI/skill16texture").Value;
        public Color skill16color = Color.Gray;
        //skill17
        public int skill17X = (int)(Quests.treecoord.X + 525);
        public int skill17Y = (int)(Quests.treecoord.Y + 106);
        public string skill17name = "Spiky Guy";
        public int skill17lvl = 0;
        public int skill17lvlmax = 3;
        public string skill17text = "Increases damage reflection";
        public Texture2D skill17texture = ModContent.Request<Texture2D>("Bismuth/UI/skill17texture").Value;
        public Color skill17color = Color.Gray;
        //skill18
        public int skill18X = (int)(Quests.treecoord.X + 224);
        public int skill18Y = (int)(Quests.treecoord.Y + 74);
        public string skill18name = "Course of the Young Fighter";
        public int skill18lvl = 0;
        public int skill18lvlmax = 1;
        public string skill18text = "+10% melee speed, +4% melee crit chance.";
        public Texture2D skill18texture = ModContent.Request<Texture2D>("Bismuth/UI/skill18texture").Value;
        public Color skill18color = Color.Gray;
        //skill19
        public int skill19X = (int)(Quests.treecoord.X + 176);
        public int skill19Y = (int)(Quests.treecoord.Y + 176);
        public string skill19name = "Mr.Welcoming";
        public int skill19lvl = 0;
        public int skill19lvlmax = 1;
        public string skill19text = "+1% melee damage for every town NPC.";
        public Texture2D skill19texture = ModContent.Request<Texture2D>("Bismuth/UI/skill19texture").Value;
        public Color skill19color = Color.Gray;
        //skill20
        public int skill20X = (int)(Quests.treecoord.X + 276);
        public int skill20Y = (int)(Quests.treecoord.Y + 176);
        public string skill20name = "Champion of Terraria";
        public int skill20lvl = 0;
        public int skill20lvlmax = 1;
        public string skill20text = "+1% melee damage for every killed boss.";
        public Texture2D skill20texture = ModContent.Request<Texture2D>("Bismuth/UI/skill20texture").Value;
        public Color skill20color = Color.Gray;
        //skill21
        public int skill21X = (int)(Quests.treecoord.X + 226);
        public int skill21Y = (int)(Quests.treecoord.Y + 265);
        public string skill21name = "Fencer-Virtuoso";
        public int skill21lvl = 0;
        public int skill21lvlmax = 8;
        public string skill21text = "Increases melee speed.";
        public Texture2D skill21texture = ModContent.Request<Texture2D>("Bismuth/UI/skill21texture").Value;
        public Color skill21color = Color.Gray;
        //skill22
        public int skill22X = (int)(Quests.treecoord.X + 139);
        public int skill22Y = (int)(Quests.treecoord.Y + 311);
        public string skill22name = "Rage Attack";
        public int skill22lvl = 0;
        public int skill22lvlmax = 1;
        public string skill22text = "+30% melee speed, -15% damage resistance";
        public Texture2D skill22texture = ModContent.Request<Texture2D>("Bismuth/UI/skill22texture").Value;
        public Color skill22color = Color.Gray;
        //skill23
        public int skill23X = (int)(Quests.treecoord.X + 111);
        public int skill23Y = (int)(Quests.treecoord.Y + 415);
        public string skill23name = "Wrath of Berserk";
        public int skill23lvl = 0;
        public int skill23lvlmax = 1;
        public string skill23text = "+40% melee speed, -10% damage resistance";
        public Texture2D skill23texture = ModContent.Request<Texture2D>("Bismuth/UI/skill23texture").Value;
        public Color skill23color = Color.Gray;
        //skill24
        public int skill24X = (int)(Quests.treecoord.X + 7);
        public int skill24Y = (int)(Quests.treecoord.Y + 439);
        public string skill24name = "HYPERFURY!";
        public int skill24lvl = 0;
        public int skill24lvlmax = 1;
        public string skill24text = "+50% melee speed, +15% melee crit chance";
        public Texture2D skill24texture = ModContent.Request<Texture2D>("Bismuth/UI/skill24texture").Value;
        public Color skill24color = Color.Gray;
        //skill25
        public int skill25X = (int)(Quests.treecoord.X + 268);
        public int skill25Y = (int)(Quests.treecoord.Y + 357);
        public string skill25name = "Strength Exercises";
        public int skill25lvl = 0;
        public int skill25lvlmax = 6;
        public string skill25text = "Increases melee damage.";
        public Texture2D skill25texture = ModContent.Request<Texture2D>("Bismuth/UI/skill25texture").Value;
        public Color skill25color = Color.Gray;
        //skill26
        public int skill26X = (int)(Quests.treecoord.X + 246);
        public int skill26Y = (int)(Quests.treecoord.Y + 471);
        public string skill26name = "Dying Agony";
        public int skill26lvl = 0;
        public int skill26lvlmax = 1;
        public string skill26text = "+10% melee crit, less HP - more melee crit.";  
        public Texture2D skill26texture = ModContent.Request<Texture2D>("Bismuth/UI/skill26texture").Value;
        public Color skill26color = Color.Gray;
        //skill27
        public int skill27X = (int)(Quests.treecoord.X + 194);
        public int skill27Y = (int)(Quests.treecoord.Y + 571);
        public string skill27name = "Unity with Nature";
        public int skill27lvl = 0;
        public int skill27lvlmax = 1;
        public string skill27text = "+20% melee damage, if you are in jungle.";
        public Texture2D skill27texture = ModContent.Request<Texture2D>("Bismuth/UI/skill27texture").Value;
        public Color skill27color = Color.Gray;
        //skill28
        public int skill28X = (int)(Quests.treecoord.X + 294);
        public int skill28Y = (int)(Quests.treecoord.Y + 571);
        public string skill28name = "Born to Shred";
        public int skill28lvl = 0;
        public int skill28lvlmax = 1;
        public string skill28text = "+15% melee speed, +30% movement speed";
        public Texture2D skill28texture = ModContent.Request<Texture2D>("Bismuth/UI/skill28texture").Value;
        public Color skill28color = Color.Gray;
        //skill29
        public int skill29X = (int)(Quests.treecoord.X + 246);
        public int skill29Y = (int)(Quests.treecoord.Y + 667);
        public string skill29name = "Blood Lust";
        public int skill29lvl = 0;
        public int skill29lvlmax = 1;
        public string skill29text = "7% lifesteal, -15% melee damage";
        public Texture2D skill29texture = ModContent.Request<Texture2D>("Bismuth/UI/skill29texture").Value;
        public Color skill29color = Color.Gray;
        //skill30
        public int skill30X = (int)(Quests.treecoord.X + 185);
        public int skill30Y = (int)(Quests.treecoord.Y + 765);
        public string skill30name = "Slow and Deadly";
        public int skill30lvl = 0;
        public int skill30lvlmax = 1;
        public string skill30text = "+20% melee damage, +15% melee crit chance, \n-35% melee speed.";
        public Texture2D skill30texture = ModContent.Request<Texture2D>("Bismuth/UI/skill30texture").Value;
        public Color skill30color = Color.Gray;
        //skill31
        public int skill31X = (int)(Quests.treecoord.X + 309);
        public int skill31Y = (int)(Quests.treecoord.Y + 765);
        public string skill31name = "Those Who Trust in Luck";
        public int skill31lvl = 0;
        public int skill31lvlmax = 1;
        public string skill31text = "+10% melee crit chance, +25% melee crit \ndamage, 1% chance of x3 damage";
        public Texture2D skill31texture = ModContent.Request<Texture2D>("Bismuth/UI/skill31texture").Value;
        public Color skill31color = Color.Gray;
        //skill32
        public int skill32X = (int)(Quests.treecoord.X + 246);
        public int skill32Y = (int)(Quests.treecoord.Y + 840);
        public string skill32name = "Titanic Power";
        public int skill32lvl = 0;
        public int skill32lvlmax = 1;
        public string skill32text = "Increases knockback of melee weapons twice.";
        public Texture2D skill32texture = ModContent.Request<Texture2D>("Bismuth/UI/skill32texture").Value;
        public Color skill32color = Color.Gray;
        //skill33
        public int skill33X = (int)(Quests.treecoord.X + 163);
        public int skill33Y = (int)(Quests.treecoord.Y + 909);
        public string skill33name = "Surge of Energy";
        public int skill33lvl = 0;
        public int skill33lvlmax = 1;
        public string skill33text = "x3 melee damage.";
        public Texture2D skill33texture = ModContent.Request<Texture2D>("Bismuth/UI/skill33texture").Value;
        public Color skill33color = Color.Gray;
        //skill34
        public int skill34X = (int)(Quests.treecoord.X + 68);
        public int skill34Y = (int)(Quests.treecoord.Y + 909);
        public string skill34name = "Like an Atomic Explosion";
        public int skill34lvl = 0;
        public int skill34lvlmax = 1;
        public string skill34text = "x5 melee damage.";
        public Texture2D skill34texture = ModContent.Request<Texture2D>("Bismuth/UI/skill34texture").Value;
        public Color skill34color = Color.Gray;
        //skill35
        public int skill35X = (int)(Quests.treecoord.X + 304);
        public int skill35Y = (int)(Quests.treecoord.Y + 928);
        public string skill35name = "Legendary Fighter!";
        public int skill35lvl = 0;
        public int skill35lvlmax = 1;
        public string skill35text = "2% chance of x5 melee damage. +25% melee \ndamage. +20% to melee crit chance, \ndamage and speed after every potion \nuse (instead mana and healing potions)";
        public Texture2D skill35texture = ModContent.Request<Texture2D>("Bismuth/UI/skill35texture").Value;
        public Color skill35color = Color.Gray;
        #endregion
        #region wizard's skills
        //skill36 
        public int skill36X = (int)(Quests.treecoord.X + 336);
        public int skill36Y = (int)(Quests.treecoord.Y + 6);
        public string skill36name = "Wizard is my Choose!";
        public int skill36lvl = 0;
        public int skill36lvlmax = 1;
        public string skill36text = "+8% to magic and minion damage, -20% to \nother types.";
        public Texture2D skill36texture = ModContent.Request<Texture2D>("Bismuth/UI/skill36texture").Value;
        public Color skill36color = Color.White;
        //skill37 
        public int skill37X = (int)(Quests.treecoord.X + 336);
        public int skill37Y = (int)(Quests.treecoord.Y + 104);
        public string skill37name = "Primary magic";
        public int skill37lvl = 0;
        public int skill37lvlmax = 1;
        public string skill37text = "+7% to magic damage, +10% to minion damage.";
        public Texture2D skill37texture = ModContent.Request<Texture2D>("Bismuth/UI/skill37texture").Value;
        public Color skill37color = Color.Gray;
        //skill38 
        public int skill38X = (int)(Quests.treecoord.X + 230);
        public int skill38Y = (int)(Quests.treecoord.Y + 136);
        public string skill38name = "Secrets of Druid";
        public int skill38lvl = 0;
        public int skill38lvlmax = 1;
        public string skill38text = "+1 HP/sec for every minion, if you are \nin jungle.";
        public Texture2D skill38texture = ModContent.Request<Texture2D>("Bismuth/UI/skill38texture").Value;
        public Color skill38color = Color.Gray;
        //skill39
        public int skill39X = (int)(Quests.treecoord.X + 104);
        public int skill39Y = (int)(Quests.treecoord.Y + 184);
        public string skill39name = "Strength in Numbers!";
        public int skill39lvl = 0;
        public int skill39lvlmax = 1;
        public string skill39text = "+4 to max number of minions";
        public Texture2D skill39texture = ModContent.Request<Texture2D>("Bismuth/UI/skill39texture").Value;
        public Color skill39color = Color.Gray;
        //skill40
        public int skill40X = (int)(Quests.treecoord.X + 6);
        public int skill40Y = (int)(Quests.treecoord.Y + 213);
        public string skill40name = "The Leader";
        public int skill40lvl = 0;
        public int skill40lvlmax = 1;
        public string skill40text = "x2 max number of minions.";
        public Texture2D skill40texture = ModContent.Request<Texture2D>("Bismuth/UI/skill40texture").Value;
        public Color skill40color = Color.Gray;
        //skill41
        public int skill41X = (int)(Quests.treecoord.X + 184);
        public int skill41Y = (int)(Quests.treecoord.Y + 268);
        public string skill41name = "Collector of minions";
        public int skill41lvl = 0;
        public int skill41lvlmax = 1;
        public string skill41text = "+9% to minion damage for every type of \nminions, you use.";
        public Texture2D skill41texture = ModContent.Request<Texture2D>("Bismuth/UI/skill41texture").Value;
        public Color skill41color = Color.Gray;
        //skill42
        public int skill42X = (int)(Quests.treecoord.X + 278);
        public int skill42Y = (int)(Quests.treecoord.Y + 268);
        public string skill42name = "Fraternal Friendship";
        public int skill42lvl = 0;
        public int skill42lvlmax = 1;
        public string skill42text = "Mobs don't attack you, if you have same \nminion.";
        public Texture2D skill42texture = ModContent.Request<Texture2D>("Bismuth/UI/skill42texture").Value;
        public Color skill42color = Color.Gray;
        //skill43
        public int skill43X = (int)(Quests.treecoord.X + 230);
        public int skill43Y = (int)(Quests.treecoord.Y + 360);
        public string skill43name = "Ancient Rituals";
        public int skill43lvl = 0;
        public int skill43lvlmax = 6;
        public string skill43text = "Increases minion damage.";
        public Texture2D skill43texture = ModContent.Request<Texture2D>("Bismuth/UI/skill43texture").Value;
        public Color skill43color = Color.Gray;
        //skill44
        public int skill44X = (int)(Quests.treecoord.X + 218);
        public int skill44Y = (int)(Quests.treecoord.Y + 474);
        public string skill44name = "Your Personal Army";
        public int skill44lvl = 0;
        public int skill44lvlmax = 4;
        public string skill44text = "Increases maximum number of minions.";
        public Texture2D skill44texture = ModContent.Request<Texture2D>("Bismuth/UI/skill44texture").Value;
        public Color skill44color = Color.Gray;
        //skill45
        public int skill45X = (int)(Quests.treecoord.X + 206);
        public int skill45Y = (int)(Quests.treecoord.Y + 596);
        public string skill45name = "Minions-Doctors";
        public int skill45lvl = 0;
        public int skill45lvlmax = 1;
        public string skill45text = "+15 HP for every minion.";
        public Texture2D skill45texture = ModContent.Request<Texture2D>("Bismuth/UI/skill45texture").Value;
        public Color skill45color = Color.Gray;
        //skill46
        public int skill46X = (int)(Quests.treecoord.X + 160);
        public int skill46Y = (int)(Quests.treecoord.Y + 688);
        public string skill46name = "Altruist";
        public int skill46lvl = 0;
        public int skill46lvlmax = 1;
        public string skill46text = "+25% minion damage, -2 defence for every \nminion.";
        public Texture2D skill46texture = ModContent.Request<Texture2D>("Bismuth/UI/skill46texture").Value;
        public Color skill46color = Color.Gray;
        //skill47
        public int skill47X = (int)(Quests.treecoord.X + 256);
        public int skill47Y = (int)(Quests.treecoord.Y + 688);
        public string skill47name = "Selfish";
        public int skill47lvl = 0;
        public int skill47lvlmax = 1;
        public string skill47text = "+3% damage resistance and +2 defence for \nevery minion, -30% minion damage.";
        public Texture2D skill47texture = ModContent.Request<Texture2D>("Bismuth/UI/skill47texture").Value;
        public Color skill47color = Color.Gray;
        //skill48
        public int skill48X = (int)(Quests.treecoord.X + 284);
        public int skill48Y = (int)(Quests.treecoord.Y + 792);
        public string skill48name = "Battle Cry";
        public int skill48lvl = 0;
        public int skill48lvlmax = 1;
        public string skill48text = "x3.5 minion knockback";
        public Texture2D skill48texture = ModContent.Request<Texture2D>("Bismuth/UI/skill48texture").Value;       
        public Color skill48color = Color.Gray;
        //skill49
        public int skill49X = (int)(Quests.treecoord.X + 442);
        public int skill49Y = (int)(Quests.treecoord.Y + 136);
        public string skill49name = "Magic Wellspring";
        public int skill49lvl = 0;
        public int skill49lvlmax = 6;
        public string skill49text = "Decreases mana cost.";
        public Texture2D skill49texture = ModContent.Request<Texture2D>("Bismuth/UI/skill49texture").Value;
        public Color skill49color = Color.Gray;
        //skill50
        public int skill50X = (int)(Quests.treecoord.X + 472);
        public int skill50Y = (int)(Quests.treecoord.Y + 234);
        public string skill50name = "Wizard-Expert";
        public int skill50lvl = 0;
        public int skill50lvlmax = 1;
        public string skill50text = "-10% mana cost. +10% magic damage";
        public Texture2D skill50texture = ModContent.Request<Texture2D>("Bismuth/UI/skill50texture").Value;
        public Color skill50color = Color.Gray;
        //skill51
        public int skill51X = (int)(Quests.treecoord.X + 584);
        public int skill51Y = (int)(Quests.treecoord.Y + 266);
        public string skill51name = "Converter";
        public int skill51lvl = 0;
        public int skill51lvlmax = 1;
        public string skill51text = "Enemy attacks spend your MP firstly.";
        public Texture2D skill51texture = ModContent.Request<Texture2D>("Bismuth/UI/skill51texture").Value;
        public Color skill51color = Color.Gray;
        //skill53
        public int skill53X = (int)(Quests.treecoord.X + 486);
        public int skill53Y = (int)(Quests.treecoord.Y + 334);
        public string skill53name = "Internal Force";
        public int skill53lvl = 0;
        public int skill53lvlmax = 6;
        public string skill53text = "Increases magic damage.";
        public Texture2D skill53texture = ModContent.Request<Texture2D>("Bismuth/UI/skill53texture").Value;
        public Color skill53color = Color.Gray;
        //skill54
        public int skill54X = (int)(Quests.treecoord.X + 396);
        public int skill54Y = (int)(Quests.treecoord.Y + 392);
        public string skill54name = "Wizard-Assassin";
        public int skill54lvl = 0;
        public int skill54lvlmax = 1;
        public string skill54text = "+15% magic crit chance, +25% magic crit \ndamage.";
        public Texture2D skill54texture = ModContent.Request<Texture2D>("Bismuth/UI/skill54texture").Value;
        public Color skill54color = Color.Gray;
        //skill55
        public int skill55X = (int)(Quests.treecoord.X + 578);
        public int skill55Y = (int)(Quests.treecoord.Y + 392);
        public string skill55name = "Magic Wellspring II";
        public int skill55lvl = 0;
        public int skill55lvlmax = 3;
        public string skill55text = "Increases mana regeneration.";
        public Texture2D skill55texture = ModContent.Request<Texture2D>("Bismuth/UI/skill55texture").Value;
        public Color skill55color = Color.Gray;
        //skill56
        public int skill56X = (int)(Quests.treecoord.X + 408);
        public int skill56Y = (int)(Quests.treecoord.Y + 506);
        public string skill56name = "That, Who Strong in Spirit";
        public int skill56lvl = 0;
        public int skill56lvlmax = 1;
        public string skill56text = "Convert 50% of received damage in mana.";
        public Texture2D skill56texture = ModContent.Request<Texture2D>("Bismuth/UI/skill56texture").Value;
        public Color skill56color = Color.Gray;
        //skill57
        public int skill57X = (int)(Quests.treecoord.X + 568);
        public int skill57Y = (int)(Quests.treecoord.Y + 506);
        public string skill57name = "Critical Thinking";
        public int skill57lvl = 0;
        public int skill57lvlmax = 1;
        public string skill57text = "After magic critical hit you restore 6% of \nyour mana.";
        public Texture2D skill57texture = ModContent.Request<Texture2D>("Bismuth/UI/skill57texture").Value;
        public Color skill57color = Color.Gray;
        //skill58
        public int skill58X = (int)(Quests.treecoord.X + 420);
        public int skill58Y = (int)(Quests.treecoord.Y + 620);
        public string skill58name = "Keep Calm and Praise the Sun";
        public int skill58lvl = 0;
        public int skill58lvlmax = 1;
        public string skill58text = "+15% magic damage and +15% magic crit \nchance during the day.";
        public Texture2D skill58texture = ModContent.Request<Texture2D>("Bismuth/UI/skill58texture").Value;
        public Color skill58color = Color.Gray;
        //skill59
        public int skill59X = (int)(Quests.treecoord.X + 556);
        public int skill59Y = (int)(Quests.treecoord.Y + 620);
        public string skill59name = "No Sick!";
        public int skill59lvl = 0;
        public int skill59lvlmax = 1;
        public string skill59text = "Mana potions don't add mana sick.";
        public Texture2D skill59texture = ModContent.Request<Texture2D>("Bismuth/UI/skill59texture").Value;
        public Color skill59color = Color.Gray;
        //skill60
        public int skill60X = (int)(Quests.treecoord.X + 486);
        public int skill60Y = (int)(Quests.treecoord.Y + 724);
        public string skill60name = "Fully Automated";
        public int skill60lvl = 0;
        public int skill60lvlmax = 1;
        public string skill60text = "Your mana potions used manually.";
        public Texture2D skill60texture = ModContent.Request<Texture2D>("Bismuth/UI/skill60texture").Value;
        public Color skill60color = Color.Gray;
        //skill61
        public int skill61X = (int)(Quests.treecoord.X + 582);
        public int skill61Y = (int)(Quests.treecoord.Y + 782);
        public string skill61name = "Inner Balance";
        public int skill61lvl = 0;
        public int skill61lvlmax = 1;
        public string skill61text = "-100% mana cost.";
        public Texture2D skill61texture = ModContent.Request<Texture2D>("Bismuth/UI/skill61texture").Value;
        public Color skill61color = Color.Gray;
        //skill62
        public int skill62X = (int)(Quests.treecoord.X + 634);
        public int skill62Y = (int)(Quests.treecoord.Y + 884);
        public string skill62name = "The Astral State";
        public int skill62lvl = 0;
        public int skill62lvlmax = 1;
        public string skill62text = "-100% mana cost, +25% magic crit chance.";
        public Texture2D skill62texture = ModContent.Request<Texture2D>("Bismuth/UI/skill62texture").Value;
        public Color skill62color = Color.Gray;
        //skill63
        public int skill63X = (int)(Quests.treecoord.X + 498);
        public int skill63Y = (int)(Quests.treecoord.Y + 838);
        public string skill63name = "MANASTEEL";
        public int skill63lvl = 0;
        public int skill63lvlmax = 1;
        public string skill63text = "7% of your damage convert in mana.";
        public Texture2D skill63texture = ModContent.Request<Texture2D>("Bismuth/UI/skill63texture").Value;
        public Color skill63color = Color.Gray;
        //skill64
        public int skill64X = (int)(Quests.treecoord.X + 466);
        public int skill64Y = (int)(Quests.treecoord.Y + 936);
        public string skill64name = "Legendary Wizard";
        public int skill64lvl = 0;
        public int skill64lvlmax = 1;
        public string skill64text = "+20% magic damage, +25% minion damage, +35% \nmagic crit damage, +3 max number of minions, \n+30% movement speed, you can pick mana \nfrom a long distance.";
        public Texture2D skill64texture = ModContent.Request<Texture2D>("Bismuth/UI/skill64texture").Value;
        public Color skill64color = Color.Gray;

        #endregion
        #region assassin's skills
        //skill65
        public int skill65X = (int)(Quests.treecoord.X + 310);
        public int skill65Y = (int)(Quests.treecoord.Y + 6);
        public string skill65name = "Assassin is my Choose!";
        public int skill65lvl = 0;
        public int skill65lvlmax = 1;
        public string skill65text = "+8% to assassin damage, -20% to other \ntypes, except melee.";
        public Texture2D skill65texture = ModContent.Request<Texture2D>("Bismuth/UI/skill65texture").Value;
        public Color skill65color = Color.White;
        //skill66
        public int skill66X = (int)(Quests.treecoord.X + 310);
        public int skill66Y = (int)(Quests.treecoord.Y + 98);
        public string skill66name = "I prefer shortswords";
        public int skill66lvl = 0;
        public int skill66lvlmax = 1;
        public string skill66text = "+7% to assassin damage, +6% to assassin crit \nchance. +40% to damage for shortswords.";
        public Texture2D skill66texture = ModContent.Request<Texture2D>("Bismuth/UI/skill66texture").Value;
        public Color skill66color = Color.White;
        //skill67
        public int skill67X = (int)(Quests.treecoord.X + 404);
        public int skill67Y = (int)(Quests.treecoord.Y + 118);
        public string skill67name = "The Killer in the Darkness";
        public int skill67lvl = 0;
        public int skill67lvlmax = 1;
        public string skill67text = "+20% to gained XP at night.";
        public Texture2D skill67texture = ModContent.Request<Texture2D>("Bismuth/UI/skill67texture").Value;
        public Color skill67color = Color.White;
        //skill68
        public int skill68X = (int)(Quests.treecoord.X + 310);
        public int skill68Y = (int)(Quests.treecoord.Y + 190);
        public string skill68name = "At the Speed of Light";
        public int skill68lvl = 0;
        public int skill68lvlmax = 7;
        public string skill68text = "Increases movement speed.";
        public Texture2D skill68texture = ModContent.Request<Texture2D>("Bismuth/UI/skill68texture").Value;
        public Color skill68color = Color.White;
        //skill69
        public int skill69X = (int)(Quests.treecoord.X + 428);
        public int skill69Y = (int)(Quests.treecoord.Y + 220);
        public string skill69name = "Hunting Reflexes";
        public int skill69lvl = 0;
        public int skill69lvlmax = 1;
        public string skill69text = "Give you \"Night Vision\" and \"Hunter\".";
        public Texture2D skill69texture = ModContent.Request<Texture2D>("Bismuth/UI/skill69texture").Value;
        public Color skill69color = Color.White;
        //skill70
        public int skill70X = (int)(Quests.treecoord.X + 532);
        public int skill70Y = (int)(Quests.treecoord.Y + 272);
        public string skill70name = "Predator Instincts";
        public int skill70lvl = 0;
        public int skill70lvlmax = 1;
        public string skill70text = "Give you \"Night Vision\" and \"Hunter\".";
        public Texture2D skill70texture = ModContent.Request<Texture2D>("Bismuth/UI/skill70texture").Value;
        public Color skill70color = Color.White;
        //skill71
        public int skill71X = (int)(Quests.treecoord.X + 646);
        public int skill71Y = (int)(Quests.treecoord.Y + 288);
        public string skill71name = "In Pursuit of Prey";
        public int skill71lvl = 0;
        public int skill71lvlmax = 1;
        public string skill71text = "+40% to movement speed after damage \ndealing.";
        public Texture2D skill71texture = ModContent.Request<Texture2D>("Bismuth/UI/skill71texture").Value;
        public Color skill71color = Color.White;
        //skill72
        public int skill72X = (int)(Quests.treecoord.X + 224);
        public int skill72Y = (int)(Quests.treecoord.Y + 252);
        public string skill72name = "Teleportation!";
        public int skill72lvl = 0;
        public int skill72lvlmax = 1;
        public string skill72text = "You can teleport by pressing special \nkey. 15 seconds of cooldown.";
        public Texture2D skill72texture = ModContent.Request<Texture2D>("Bismuth/UI/skill72texture").Value;
        public Color skill72color = Color.White;
        //skill73
        public int skill73X = (int)(Quests.treecoord.X + 208);
        public int skill73Y = (int)(Quests.treecoord.Y + 364);
        public string skill73name = "7 Seconds of Advantage";
        public int skill73lvl = 0;
        public int skill73lvlmax = 1;
        public string skill73text = "-7 seconds of teleport cooldown";
        public Texture2D skill73texture = ModContent.Request<Texture2D>("Bismuth/UI/skill73texture").Value;
        public Color skill73color = Color.White;
        //skill75
        public int skill75X = (int)(Quests.treecoord.X + 102);
        public int skill75Y = (int)(Quests.treecoord.Y + 380);
        public string skill75name = "Master of Teleportation";
        public int skill75lvl = 0;
        public int skill75lvlmax = 1;
        public string skill75text = "Particles after teleportation deal 500 \ndamage and give you 50 HP.";
        public Texture2D skill75texture = ModContent.Request<Texture2D>("Bismuth/UI/skill75texture").Value;
        public Color skill75color = Color.White;
        //skill76
        public int skill76X = (int)(Quests.treecoord.X + 310);
        public int skill76Y = (int)(Quests.treecoord.Y + 286);
        public string skill76name = "Accurate Blow";
        public int skill76lvl = 0;
        public int skill76lvlmax = 5;
        public string skill76text = "Increases critical damage for all classes.";
        public Texture2D skill76texture = ModContent.Request<Texture2D>("Bismuth/UI/skill76texture").Value;
        public Color skill76color = Color.White;
        //skill77
        public int skill77X = (int)(Quests.treecoord.X + 310);
        public int skill77Y = (int)(Quests.treecoord.Y + 378);
        public string skill77name = "Professional Murderer";
        public int skill77lvl = 0;
        public int skill77lvlmax = 6;
        public string skill77text = "Increases assassin damage.";
        public Texture2D skill77texture = ModContent.Request<Texture2D>("Bismuth/UI/skill77texture").Value;
        public Color skill77color = Color.White;
        //skill78
        public int skill78X = (int)(Quests.treecoord.X + 248);
        public int skill78Y = (int)(Quests.treecoord.Y + 476);
        public string skill78name = "Jackpot!";
        public int skill78lvl = 0;
        public int skill78lvlmax = 1;
        public string skill78text = "1% chance of 5x damage.";
        public Texture2D skill78texture = ModContent.Request<Texture2D>("Bismuth/UI/skill78texture").Value;
        public Color skill78color = Color.White;
        //skill79
        public int skill79X = (int)(Quests.treecoord.X + 372);
        public int skill79Y = (int)(Quests.treecoord.Y + 476);
        public string skill79name = "Lethal Damage";
        public int skill79lvl = 0;
        public int skill79lvlmax = 1;
        public string skill79text = "2% chance to reduce the enemy HP to 1. \nThis hit don't ignore defence. (-20% HP, if you \nfight with boss).";
        public Texture2D skill79texture = ModContent.Request<Texture2D>("Bismuth/UI/skill79texture").Value;
        public Color skill79color = Color.White;
        //skill80
        public int skill80X = (int)(Quests.treecoord.X + 222);
        public int skill80Y = (int)(Quests.treecoord.Y + 578);
        public string skill80name = "To Live at the Expense of Others";
        public int skill80lvl = 0;
        public int skill80lvlmax = 1;
        public string skill80text = "5x damage restore 25% of your HP.";
        public Texture2D skill80texture = ModContent.Request<Texture2D>("Bismuth/UI/skill80texture").Value;
        public Color skill80color = Color.White;
        //skill81
        public int skill81X = (int)(Quests.treecoord.X + 396);
        public int skill81Y = (int)(Quests.treecoord.Y + 578);
        public string skill81name = "Elusive";
        public int skill81lvl = 0;
        public int skill81lvlmax = 1;
        public string skill81text = "Lethal hit give you 100% chance to dodge on \nnext enemy hit.";
        public Texture2D skill81texture = ModContent.Request<Texture2D>("Bismuth/UI/skill81texture").Value;
        public Color skill81color = Color.White;
        //skill82
        public int skill82X = (int)(Quests.treecoord.X + 312);
        public int skill82Y = (int)(Quests.treecoord.Y + 678);
        public string skill82name = "The Amphibian Man";
        public int skill82lvl = 0;
        public int skill82lvlmax = 1;
        public string skill82text = "+10 HP/sec, +15% assassin damage and \n+10% to all critical strike chance, if you are \nin water.";
        public Texture2D skill82texture = ModContent.Request<Texture2D>("Bismuth/UI/skill82texture").Value;
        public Color skill82color = Color.White;
        //skill83
        public int skill83X = (int)(Quests.treecoord.X + 102);
        public int skill83Y = (int)(Quests.treecoord.Y + 28);
        public string skill83name = "Everyone Loves Discounts :)";
        public int skill83lvl = 0;
        public int skill83lvlmax = 1;
        public string skill83text = "-35% of the cost in stores.";
        public Texture2D skill83texture = ModContent.Request<Texture2D>("Bismuth/UI/skill83texture").Value;
        public Color skill83color = Color.White;
        //skill84
        public int skill84X = (int)(Quests.treecoord.X + 102);
        public int skill84Y = (int)(Quests.treecoord.Y + 118);
        public string skill84name = "A Thief in the Night";
        public int skill84lvl = 0;
        public int skill84lvlmax = 1;
        public string skill84text = "You get 40% more money at night.";
        public Texture2D skill84texture = ModContent.Request<Texture2D>("Bismuth/UI/skill84texture").Value;
        public Color skill84color = Color.White;
        //skill85
        public int skill85X = (int)(Quests.treecoord.X + 312);
        public int skill85Y = (int)(Quests.treecoord.Y + 768);
        public string skill85name = "Clinging to Life";
        public int skill85lvl = 0;
        public int skill85lvlmax = 1;
        public string skill85text = "Every critical hit increases your life \nregeneration.";
        public Texture2D skill85texture = ModContent.Request<Texture2D>("Bismuth/UI/skill85texture").Value;
        public Color skill85color = Color.White;
        //skill86
        public int skill86X = (int)(Quests.treecoord.X + 210);
        public int skill86Y = (int)(Quests.treecoord.Y + 794);
        public string skill86name = "A Stab in the Back";
        public int skill86lvl = 0;
        public int skill86lvlmax = 1;
        public string skill86text = "+66% to assassin damage, +30% assassin crit \nchance, +75% to assassin crit damage, -50% \ndamage resistance, -25 defence.";
        public Texture2D skill86texture = ModContent.Request<Texture2D>("Bismuth/UI/skill86texture").Value;
        public Color skill86color = Color.White;
        //skill87
        public int skill87X = (int)(Quests.treecoord.X + 108);
        public int skill87Y = (int)(Quests.treecoord.Y + 818);
        public string skill87name = "Meanness";
        public int skill87lvl = 0;
        public int skill87lvlmax = 1;
        public string skill87text = "You get +40% chance of dodging in addition of \nprevious bonuces.";
        public Texture2D skill87texture = ModContent.Request<Texture2D>("Bismuth/UI/skill87texture").Value;
        public Color skill87color = Color.White;
        //skill88
        public int skill88X = (int)(Quests.treecoord.X + 6);
        public int skill88Y = (int)(Quests.treecoord.Y + 844);
        public string skill88name = "Snake Cruelty";
        public int skill88lvl = 0;
        public int skill88lvlmax = 1;
        public string skill88text = "You get 50% chance to inflict \"Poison\" on \nyour enemy in addition of previous bonuces.";
        public Texture2D skill88texture = ModContent.Request<Texture2D>("Bismuth/UI/skill88texture").Value;
        public Color skill88color = Color.White;
        //skill89
        public int skill89X = (int)(Quests.treecoord.X + 414);
        public int skill89Y = (int)(Quests.treecoord.Y + 794);
        public string skill89name = "Kill or Die";
        public int skill89lvl = 0;
        public int skill89lvlmax = 1;
        public string skill89text = "100% crit chance, +30% crit damage, x4 regen \nspeed after killing the enemy, after 4 seconds \nyou start dying. -15% max HP.";
        public Texture2D skill89texture = ModContent.Request<Texture2D>("Bismuth/UI/skill89texture").Value;
        public Color skill89color = Color.White;
        //skill90
        public int skill90X = (int)(Quests.treecoord.X + 312);
        public int skill90Y = (int)(Quests.treecoord.Y + 858);
        public string skill90name = "Legendary Assassin";
        public int skill90lvl = 0;
        public int skill90lvlmax = 1;
        public string skill90text = "+15% to assassin damage and critical strike \nchance. +21% assassin damage and +30% \nto all crit damage at night. +20% to all \ndamages at the full moon.";
        public Texture2D skill90texture = ModContent.Request<Texture2D>("Bismuth/UI/skill90texture").Value;
        public Color skill90color = Color.White;
        #endregion
        #region ranger's skills
        //skill91 
        public int skill91X = (int)(Quests.treecoord.X + 308);
        public int skill91Y = (int)(Quests.treecoord.Y + 6);
        public string skill91name = "Ranger is my Choose!";
        public int skill91lvl = 0;
        public int skill91lvlmax = 1;
        public string skill91text = "+8% ranged damage, -20% to other types.";
        public Texture2D skill91texture = ModContent.Request<Texture2D>("Bismuth/UI/skill91texture").Value;
        public Color skill91color = Color.White;
        //skill92
        public int skill92X = (int)(Quests.treecoord.X + 308);
        public int skill92Y = (int)(Quests.treecoord.Y + 6);
        public string skill92name = "Shooting Training";
        public int skill92lvl = 0;
        public int skill92lvlmax = 1;
        public string skill92text = "+4% ranged crit chance, +9% ranged damage.";
        public Texture2D skill92texture = ModContent.Request<Texture2D>("Bismuth/UI/skill92texture").Value;
        public Color skill92color = Color.Gray;
        //skill93
        public int skill93X = (int)(Quests.treecoord.X + 308);
        public int skill93Y = (int)(Quests.treecoord.Y + 6);
        public string skill93name = "Precise Shot";
        public int skill93lvl = 0;
        public int skill93lvlmax = 5;
        public string skill93text = "Increases ranged crit chance.";
        public Texture2D skill93texture = ModContent.Request<Texture2D>("Bismuth/UI/skill93texture").Value;
        public Color skill93color = Color.Gray;
        //skill94
        public int skill94X = (int)(Quests.treecoord.X + 308);
        public int skill94Y = (int)(Quests.treecoord.Y + 6);
        public string skill94name = "Stop! Stun Time!";
        public int skill94lvl = 0;
        public int skill94lvlmax = 1;
        public string skill94text = "Your ranged attacks stun enemies on 1,5 \nseconds, but their defence increase in 3 times.";
        public Texture2D skill94texture = ModContent.Request<Texture2D>("Bismuth/UI/skill94texture").Value;
        public Color skill94color = Color.Gray;
        //skill95        
        public int skill95X = (int)(Quests.treecoord.X + 308);
        public int skill95Y = (int)(Quests.treecoord.Y + 6);
        public string skill95name = "Numbness";
        public int skill95lvl = 0;
        public int skill95lvlmax = 1;
        public string skill95text = "Stun on 2 seconds, defence increase in 1,5 \ntimes.";
        public Texture2D skill95texture = ModContent.Request<Texture2D>("Bismuth/UI/skill95texture").Value;
        public Color skill95color = Color.Gray;
        //skill96
        public int skill96X = (int)(Quests.treecoord.X + 308);
        public int skill96Y = (int)(Quests.treecoord.Y + 6);
        public string skill96name = "Paralysis";
        public int skill96lvl = 0;
        public int skill96lvlmax = 1;
        public string skill96text = "Stun on 3 seconds, enemy don't have any \ndefence.";
        public Texture2D skill96texture = ModContent.Request<Texture2D>("Bismuth/UI/skill96texture").Value;
        public Color skill96color = Color.Gray;
        //skill97
        public int skill97X = (int)(Quests.treecoord.X + 308);
        public int skill97Y = (int)(Quests.treecoord.Y + 6);
        public string skill97name = "Skilled Scout";
        public int skill97lvl = 0;
        public int skill97lvlmax = 1;
        public string skill97text = "All ranged weapons get binoculars effect.";
        public Texture2D skill97texture = ModContent.Request<Texture2D>("Bismuth/UI/skill97texture").Value;
        public Color skill97color = Color.Gray;
        //skill98
        public int skill98X = (int)(Quests.treecoord.X + 308);
        public int skill98Y = (int)(Quests.treecoord.Y + 6);
        public string skill98name = "Deft Hands";
        public int skill98lvl = 0;
        public int skill98lvlmax = 3;
        public string skill98text = "You get more money for killing.";
        public Texture2D skill98texture = ModContent.Request<Texture2D>("Bismuth/UI/skill98texture").Value;
        public Color skill98color = Color.Gray;
        //skill99
        public int skill99X = (int)(Quests.treecoord.X + 308);
        public int skill99Y = (int)(Quests.treecoord.Y + 6);
        public string skill99name = "Ranger-Assassin";
        public int skill99lvl = 0;
        public int skill99lvlmax = 1;
        public string skill99text = "+10% ranged crit chance, +25% ranged crit \ndamage.";
        public Texture2D skill99texture = ModContent.Request<Texture2D>("Bismuth/UI/skill99texture").Value;
        public Color skill99color = Color.Gray;
        //skill100
        public int skill100X = (int)(Quests.treecoord.X + 308);
        public int skill100Y = (int)(Quests.treecoord.Y + 6);
        public string skill100name = "Acrobat From Hell";
        public int skill100lvl = 0;
        public int skill100lvlmax = 1;
        public string skill100text = "+4% dodge chance, +23% ranged damage, when \nyou are in hell.";
        public Texture2D skill100texture = ModContent.Request<Texture2D>("Bismuth/UI/skill100texture").Value;
        public Color skill100color = Color.Gray;
        //skill101
        public int skill101X = (int)(Quests.treecoord.X + 308);
        public int skill101Y = (int)(Quests.treecoord.Y + 6);
        public string skill101name = "Storm of Projectiles";
        public int skill101lvl = 0;
        public int skill101lvlmax = 3;
        public Texture2D skill101texture = ModContent.Request<Texture2D>("Bismuth/UI/skill101texture").Value;
        public Color skill101color = Color.Gray;
        //skill102
        public int skill102X = (int)(Quests.treecoord.X + 308);
        public int skill102Y = (int)(Quests.treecoord.Y + 6);
        public string skill102name = "Stopping Shells";
        public int skill102lvl = 0;
        public int skill102lvlmax = 1;
        public string skill102text = "3% chance to stun enemy on 2,5 seconds.";
        public Texture2D skill102texture = ModContent.Request<Texture2D>("Bismuth/UI/skill102texture").Value;
        public Color skill102color = Color.Gray;
        //skill103
        public int skill103X = (int)(Quests.treecoord.X + 308);
        public int skill103Y = (int)(Quests.treecoord.Y + 6);
        public string skill103name = "Killing Spree!";
        public int skill103lvl = 0;
        public int skill103lvlmax = 1;
        public string skill103text = "+10% ranged damage after killing enemy \n(up to 3 enemies).";
        public Texture2D skill103texture = ModContent.Request<Texture2D>("Bismuth/UI/skill103texture").Value;
        public Color skill103color = Color.Gray;
        //skill104
        public int skill104X = (int)(Quests.treecoord.X + 308);
        public int skill104Y = (int)(Quests.treecoord.Y + 6);
        public string skill104name = "Duelist";
        public int skill104lvl = 0;
        public int skill104lvlmax = 1;
        public string skill104text = "+6% dodge chance, +25% ranged damage, -15% \nmax HP.";
        public Texture2D skill104texture = ModContent.Request<Texture2D>("Bismuth/UI/skill104texture").Value;
        public Color skill104color = Color.Gray;
        //skill105
        public int skill105X = (int)(Quests.treecoord.X + 308);
        public int skill105Y = (int)(Quests.treecoord.Y + 6);
        public string skill105name = "Armor-Piercing";
        public int skill105lvl = 0;
        public int skill105lvlmax = 3;
        public string skill105text = "Increase ranged damage.";
        public Texture2D skill105texture = ModContent.Request<Texture2D>("Bismuth/UI/skill105texture").Value;
        public Color skill105color = Color.Gray;
        //skill106
        public int skill106X = (int)(Quests.treecoord.X + 308);
        public int skill106Y = (int)(Quests.treecoord.Y + 6);
        public string skill106name = "The Energy Barrier";
        public int skill106lvl = 0;
        public int skill106lvlmax = 1;
        public string skill106text = "You get shield, that reflect projectiles (you\nalso get damage), +25% damage resistance.";
        public Texture2D skill106texture = ModContent.Request<Texture2D>("Bismuth/UI/skill106texture").Value;
        public Color skill106color = Color.Gray;
        //skill107
        public int skill107X = (int)(Quests.treecoord.X + 308);
        public int skill107Y = (int)(Quests.treecoord.Y + 6);
        public string skill107name = "Health Boost";
        public int skill107lvl = 0;
        public int skill107lvlmax = 1;
        public string skill107text = "+8 HP/sec, when the shield is active.";
        public Texture2D skill107texture = ModContent.Request<Texture2D>("Bismuth/UI/skill107texture").Value;
        public Color skill107color = Color.Gray;
        //skill108
        public int skill108X = (int)(Quests.treecoord.X + 308);
        public int skill108Y = (int)(Quests.treecoord.Y + 6);
        public string skill108name = "Impenetrable";
        public int skill108lvl = 0;
        public int skill108lvlmax = 1;
        public string skill108text = "20% chance to parry projectile.";
        public Texture2D skill108texture = ModContent.Request<Texture2D>("Bismuth/UI/skill108texture").Value;
        public Color skill108color = Color.Gray;
        //skill110
        public int skill110X = (int)(Quests.treecoord.X + 308);
        public int skill110Y = (int)(Quests.treecoord.Y + 6);
        public string skill110name = "Hunks";
        public int skill110lvl = 0;
        public int skill110lvlmax = 1;
        public string skill110text = "15% chance not to consume ammo.";
        public Texture2D skill110texture = ModContent.Request<Texture2D>("Bismuth/UI/skill110texture").Value;
        public Color skill110color = Color.Gray;
        //skill111
        public int skill111X = (int)(Quests.treecoord.X + 308);
        public int skill111Y = (int)(Quests.treecoord.Y + 6);
        public string skill111name = "Additional Arrow";
        public int skill111lvl = 0;
        public int skill111lvlmax = 1;
        public string skill111text = "+1 arrow projectile.";
        public Texture2D skill111texture = ModContent.Request<Texture2D>("Bismuth/UI/skill111texture").Value;
        public Color skill111color = Color.Gray;
        //skill112
        public int skill112X = (int)(Quests.treecoord.X + 308);
        public int skill112Y = (int)(Quests.treecoord.Y + 6);
        public string skill112name = "Bounce bullets";
        public int skill112lvl = 0;
        public int skill112lvlmax = 1;
        public string skill112text = "All bullets bounce two times before \ndestruction.";
        public Texture2D skill112texture = ModContent.Request<Texture2D>("Bismuth/UI/skill112texture").Value;
        public Color skill112color = Color.Gray;
        //skill113
        public int skill113X = (int)(Quests.treecoord.X + 308);
        public int skill113Y = (int)(Quests.treecoord.Y + 6);
        public string skill113name = "Grenadier";
        public int skill113lvl = 0;
        public int skill113lvlmax = 1;
        public string skill113text = "+25% explode damage (not rocket).";
        public Texture2D skill113texture = ModContent.Request<Texture2D>("Bismuth/UI/skill113texture").Value;
        public Color skill113color = Color.Gray;
        //skill114
        public int skill114X = (int)(Quests.treecoord.X + 308);
        public int skill114Y = (int)(Quests.treecoord.Y + 6);
        public string skill114name = "Strong Bowstring";
        public int skill114lvl = 0;
        public int skill114lvlmax = 3;
        public string skill114text = "Increase arrow velocity.";
        public Texture2D skill114texture = ModContent.Request<Texture2D>("Bismuth/UI/skill114texture").Value;
        public Color skill114color = Color.Gray;
        //skill115
        public int skill115X = (int)(Quests.treecoord.X + 308);
        public int skill115Y = (int)(Quests.treecoord.Y + 6);
        public string skill115name = "Explosive Bullets";
        public int skill115lvl = 0;
        public int skill115lvlmax = 1;
        public string skill115text = "All bullets explode, when hit.";
        public Texture2D skill115texture = ModContent.Request<Texture2D>("Bismuth/UI/skill115texture").Value;
        public Color skill115color = Color.Gray;
        //skill116
        public int skill116X = (int)(Quests.treecoord.X + 308);
        public int skill116Y = (int)(Quests.treecoord.Y + 6);
        public string skill116name = "Armor Plates";
        public int skill116lvl = 0;
        public int skill116lvlmax = 1;
        public string skill116text = "+10 defence, when you hold rocket launcer.";
        public Texture2D skill116texture = ModContent.Request<Texture2D>("Bismuth/UI/skill116texture").Value;
        public Color skill116color = Color.Gray;
        //skill117
        public int skill117X = (int)(Quests.treecoord.X + 308);
        public int skill117Y = (int)(Quests.treecoord.Y + 6);
        public string skill117name = "Sharp Arrowheads";
        public int skill117lvl = 0;
        public int skill117lvlmax = 3;
        public string skill117text = "Increase arrow damage.";
        public Texture2D skill117texture = ModContent.Request<Texture2D>("Bismuth/UI/skill117texture").Value;
        public Color skill117color = Color.Gray;
        //skill118
        public int skill118X = (int)(Quests.treecoord.X + 308);
        public int skill118Y = (int)(Quests.treecoord.Y + 6);
        public string skill118name = "Expanding Bullet";
        public int skill118lvl = 0;
        public int skill118lvlmax = 3;
        public string skill118text = "Increase bullet damage.";
        public Texture2D skill118texture = ModContent.Request<Texture2D>("Bismuth/UI/skill118texture").Value;
        public Color skill118color = Color.Gray;
        //skill119
        public int skill119X = (int)(Quests.treecoord.X + 308);
        public int skill119Y = (int)(Quests.treecoord.Y + 6);
        public string skill119name = "Shaped-Charge Rockets";
        public int skill119lvl = 0;
        public int skill119lvlmax = 3;
        public string skill119text = "Increase rocket damage.";
        public Texture2D skill119texture = ModContent.Request<Texture2D>("Bismuth/UI/skill119texture").Value;
        public Color skill119color = Color.Gray;
        //skill120
        public int skill120X = (int)(Quests.treecoord.X + 308);
        public int skill120Y = (int)(Quests.treecoord.Y + 6);
        public string skill120name = "Aim Bot";
        public int skill120lvl = 0;
        public int skill120lvlmax = 1;
        public string skill120text = "All ranged projectiles automatically \nlock onto the enemy.";
        public Texture2D skill120texture = ModContent.Request<Texture2D>("Bismuth/UI/skill120texture").Value;
        public Color skill120color = Color.Gray;
        //skill121
        public int skill121X = (int)(Quests.treecoord.X + 308);
        public int skill121Y = (int)(Quests.treecoord.Y + 6);
        public string skill121name = "Legendary Ranger!";
        public int skill121lvl = 0;
        public int skill121lvlmax = 1;
        public string skill121text = "All ranged weapons have autoreuse. +30% \nranged damage and crit damage, every \nshot freeze enemy.";
        public Texture2D skill121texture = ModContent.Request<Texture2D>("Bismuth/UI/skill121texture").Value;
        public Color skill121color = Color.Gray;
        #endregion
        #region thrower's skills
        //skill122
        public int skill122X = (int)(Quests.treecoord.X + 168);
        public int skill122Y = (int)(Quests.treecoord.Y + 6);
        public string skill122name = "Thrower is my Choose!";
        public int skill122lvl = 0;
        public int skill122lvlmax = 1;
        public string skill122text = "+8% to thrown damage, -20% to other \ntypes.";
        public Texture2D skill122texture = ModContent.Request<Texture2D>("Bismuth/UI/skill122texture").Value;
        public Color skill122color = Color.White;
        //skill123
        public int skill123X = (int)(Quests.treecoord.X + 168);
        public int skill123Y = (int)(Quests.treecoord.Y + 108);
        public string skill123name = "Serrated Tips";
        public int skill123lvl = 0;
        public int skill123lvlmax = 1;
        public string skill123text = "+9% thrown damage, +3% thrown crit.";
        public Texture2D skill123texture = ModContent.Request<Texture2D>("Bismuth/UI/skill123texture").Value;
        public Color skill123color = Color.White;
        //skill124
        public int skill124X = (int)(Quests.treecoord.X + 38);
        public int skill124Y = (int)(Quests.treecoord.Y + 174);
        public string skill124name = "Ethereal Projectiles";
        public int skill124lvl = 0;
        public int skill124lvlmax = 1;
        public string skill124text = "All projectiles can move throw blocks.";
        public Texture2D skill124texture = ModContent.Request<Texture2D>("Bismuth/UI/skill124texture").Value;
        public Color skill124color = Color.White;
        //skill125
        public int skill125X = (int)(Quests.treecoord.X + 22);
        public int skill125Y = (int)(Quests.treecoord.Y + 280);
        public string skill125name = "Wall Hack";
        public int skill125lvl = 0;
        public int skill125lvlmax = 1;
        public string skill125text = "All projectiles can move throw blocks.";
        public Texture2D skill125texture = ModContent.Request<Texture2D>("Bismuth/UI/skill125texture").Value;
        public Color skill125color = Color.White;
        //skill126
        public int skill126X = (int)(Quests.treecoord.X + 6);
        public int skill126Y = (int)(Quests.treecoord.Y + 386);
        public string skill126name = "Turn off your cheats!";
        public int skill126lvl = 0;
        public int skill126lvlmax = 1;
        public string skill126text = "All projectiles can move throw blocks.";
        public Texture2D skill126texture = ModContent.Request<Texture2D>("Bismuth/UI/skill126texture").Value;
        public Color skill126color = Color.White;
        //skill127
        public int skill127X = (int)(Quests.treecoord.X + 298);
        public int skill127Y = (int)(Quests.treecoord.Y + 174);
        public string skill127name = "I will not budge!";
        public int skill127lvl = 0;
        public int skill127lvlmax = 1;
        public string skill127text = "+60% thrown damage, +30% thrown crit. +35% \ndamage resistance, but you can't move.";
        public Texture2D skill127texture = ModContent.Request<Texture2D>("Bismuth/UI/skill127texture").Value;
        public Color skill127color = Color.White;
        //skill128
        public int skill128X = (int)(Quests.treecoord.X + 314);
        public int skill128Y = (int)(Quests.treecoord.Y + 280);
        public string skill128name = "Steadfast Hero";
        public int skill128lvl = 0;
        public int skill128lvlmax = 1;
        public string skill128text = "+60% thrown damage, +30% thrown crit, +50% \nthrown speed, +45% damage resistance, but \nyou can't move.";
        public Texture2D skill128texture = ModContent.Request<Texture2D>("Bismuth/UI/skill128texture").Value;
        public Color skill128color = Color.White;
        //skill129
        public int skill129X = (int)(Quests.treecoord.X + 332);
        public int skill129Y = (int)(Quests.treecoord.Y + 386);
        public string skill129name = "Turrel-Man";
        public int skill129lvl = 0;
        public int skill129lvlmax = 1;
        public string skill129text = "+60% thrown damage, +30% thrown crit, +50% \nthrown speed, +65% damage resistance, but \nyou can't move.";
        public Texture2D skill129texture = ModContent.Request<Texture2D>("Bismuth/UI/skill129texture").Value;
        public Color skill129color = Color.White;
        //skill130
        public int skill130X = (int)(Quests.treecoord.X + 118);
        public int skill130Y = (int)(Quests.treecoord.Y + 206);
        public string skill130name = "Olympian";
        public int skill130lvl = 0;
        public int skill130lvlmax = 7;
        public string skill130text = "Increases velocity of thrown projectiles.";
        public Texture2D skill130texture = ModContent.Request<Texture2D>("Bismuth/UI/skill130texture").Value;
        public Color skill130color = Color.White;
        //skill131
        public int skill131X = (int)(Quests.treecoord.X + 216);
        public int skill131Y = (int)(Quests.treecoord.Y + 206);
        public string skill131name = "Punching Steel";
        public int skill131lvl = 0;
        public int skill131lvlmax = 6;
        public string skill131text = "Increases thrown damage.";
        public Texture2D skill131texture = ModContent.Request<Texture2D>("Bismuth/UI/skill131texture").Value;
        public Color skill131color = Color.White;
        //skill132
        public int skill132X = (int)(Quests.treecoord.X + 168);
        public int skill132Y = (int)(Quests.treecoord.Y + 304);
        public string skill132name = "Pyrotechnist";
        public int skill132lvl = 0;
        public int skill132lvlmax = 1;
        public string skill132text = "+16% explosive damage. Explosives cost 40% \nlesser.";
        public Texture2D skill132texture = ModContent.Request<Texture2D>("Bismuth/UI/skill132texture").Value;
        public Color skill132color = Color.White;
        //skill133
        public int skill133X = (int)(Quests.treecoord.X + 168);
        public int skill133Y = (int)(Quests.treecoord.Y + 398);
        public string skill133name = "Apt Pupil";
        public int skill133lvl = 0;
        public int skill133lvlmax = 1;
        public string skill133text = "+15% experience bonus.";
        public Texture2D skill133texture = ModContent.Request<Texture2D>("Bismuth/UI/skill133texture").Value;
        public Color skill133color = Color.White;
        //skill134
        public int skill134X = (int)(Quests.treecoord.X + 86);
        public int skill134Y = (int)(Quests.treecoord.Y + 450);
        public string skill134name = "Alchemist";
        public int skill134lvl = 0;
        public int skill134lvlmax = 1;
        public string skill134text = "+25% MP and HP from potions.";
        public Texture2D skill134texture = ModContent.Request<Texture2D>("Bismuth/UI/skill134texture").Value;
        public Color skill134color = Color.White;
        //skill135
        public int skill135X = (int)(Quests.treecoord.X + 250);
        public int skill135Y = (int)(Quests.treecoord.Y + 450);
        public string skill135name = "Buffed";
        public int skill135lvl = 0;
        public int skill135lvlmax = 1;
        public string skill135text = "+2HP/sec, +10HP for every buff.";
        public Texture2D skill135texture = ModContent.Request<Texture2D>("Bismuth/UI/skill135texture").Value;
        public Color skill135color = Color.White;
        //skill136
        public int skill136X = (int)(Quests.treecoord.X + 168);
        public int skill136Y = (int)(Quests.treecoord.Y + 552);
        public string skill136name = "Mirror Armor";
        public int skill136lvl = 0;
        public int skill136lvlmax = 1;
        public string skill136text = "35% chance to reflect projectile.";
        public Texture2D skill136texture = ModContent.Request<Texture2D>("Bismuth/UI/skill136texture").Value;
        public Color skill136color = Color.White;
        //skill137
        public int skill137X = (int)(Quests.treecoord.X + 86);
        public int skill137Y = (int)(Quests.treecoord.Y + 606);
        public string skill137name = "Not Spending";
        public int skill137lvl = 0;
        public int skill137lvlmax = 1;
        public string skill137text = "20% chance not to consume thrown item.";
        public Texture2D skill137texture = ModContent.Request<Texture2D>("Bismuth/UI/skill137texture").Value;
        public Color skill137color = Color.White;
        //skill138
        public int skill138X = (int)(Quests.treecoord.X + 168);
        public int skill138Y = (int)(Quests.treecoord.Y + 648);
        public string skill138name = "Meteor Rain";
        public int skill138lvl = 0;
        public int skill138lvlmax = 1;
        public string skill138text = "After activation of this skill will start a \nmeteor rain from 15 meteorites.";
        public Texture2D skill138texture = ModContent.Request<Texture2D>("Bismuth/UI/skill138texture").Value;
        public Color skill138color = Color.White;
        //skill139
        public int skill139X = (int)(Quests.treecoord.X + 252);
        public int skill139Y = (int)(Quests.treecoord.Y + 606);
        public string skill139name = "Thrower-Assassin";
        public int skill139lvl = 0;
        public int skill139lvlmax = 1;
        public string skill139text = "+15% thrown crit chance, +30% thrown crit \ndamage.";
        public Texture2D skill139texture = ModContent.Request<Texture2D>("Bismuth/UI/skill139texture").Value;
        public Color skill139color = Color.White;
        //skill140
        public int skill140X = (int)(Quests.treecoord.X + 86);
        public int skill140Y = (int)(Quests.treecoord.Y + 694);
        public string skill140name = "Darts in Survival";
        public int skill140lvl = 0;
        public int skill140lvlmax = 1;
        public string skill140text = "All consumable thrown weapons get +25% \ndamage.";
        public Texture2D skill140texture = ModContent.Request<Texture2D>("Bismuth/UI/skill140texture").Value;
        public Color skill140color = Color.White;
        //skill141
        public int skill141X = (int)(Quests.treecoord.X + 168);
        public int skill141Y = (int)(Quests.treecoord.Y + 648);
        public string skill141name = "FIRESTORM!";
        public int skill141lvl = 0;
        public int skill141lvlmax = 1;
        public string skill141text = "After activation of this skill will start a \nmeteor rain from 35 meteorites.";
        public Texture2D skill141texture = ModContent.Request<Texture2D>("Bismuth/UI/skill141texture").Value;
        public Color skill141color = Color.White;
        //skill142
        public int skill142X = (int)(Quests.treecoord.X + 252);
        public int skill142Y = (int)(Quests.treecoord.Y + 694);
        public string skill142name = "Hypersonic";
        public int skill142lvl = 0;
        public int skill142lvlmax = 1;
        public string skill142text = "x2 thrown velocity on 5 sec after crit.";
        public Texture2D skill142texture = ModContent.Request<Texture2D>("Bismuth/UI/skill142texture").Value;
        public Color skill142color = Color.White;
        //skill143
        public int skill143X = (int)(Quests.treecoord.X + 86);
        public int skill143Y = (int)(Quests.treecoord.Y + 790);
        public string skill143name = "Right Through";
        public int skill143lvl = 0;
        public int skill143lvlmax = 1;
        public string skill143text = "+40% thrown speed for consumable thrown \nweapons. All this weapons can punch \n infinite number of enemies.";
        public Texture2D skill143texture = ModContent.Request<Texture2D>("Bismuth/UI/skill143texture").Value;
        public Color skill143color = Color.White;
        //skill144
        public int skill144X = (int)(Quests.treecoord.X + 250);
        public int skill144Y = (int)(Quests.treecoord.Y + 790);
        public string skill144name = "The Falling Daggers";
        public int skill144lvl = 0;
        public int skill144lvlmax = 1;
        public string skill144text = "Three daggers will fly in damage place.";
        public Texture2D skill144texture = ModContent.Request<Texture2D>("Bismuth/UI/skill144texture").Value;
        public Color skill144color = Color.White;
        //skill146
        public int skill146X = (int)(Quests.treecoord.X + 332);
        public int skill146Y = (int)(Quests.treecoord.Y + 554);
        public string skill146name = "Fashion is My Profession";
        public int skill146lvl = 0;
        public int skill146lvlmax = 1;
        public string skill146text = "+1 max number of accessory.";
        public Texture2D skill146texture = ModContent.Request<Texture2D>("Bismuth/UI/skill146texture").Value;
        public Color skill146color = Color.White;
        //skill147
        public int skill147X = (int)(Quests.treecoord.X + 168);
        public int skill147Y = (int)(Quests.treecoord.Y + 834);
        public string skill147name = "Legendary Thrower";
        public int skill147lvl = 0;
        public int skill147lvlmax = 1;
        public string skill147text = "+25% thrown damage, crit chance and crit \ndamage. 30% chance not to consume thrown \nitem. +10 defence.";
        public Texture2D skill147texture = ModContent.Request<Texture2D>("Bismuth/UI/EmptyButton").Value;
        public Color skill147color = Color.White;
        #endregion
        #endregion          
        public void DrawRaceBar(SpriteBatch spriteBatch)
        {
           
        }
        public override void Load()
        {
            /// Для локализации в новой версии мода нужно использовать эти методы GetLocalization("Key").Value, где Key - это ключ локализации, а затем в файле hjson будет выглядеть так:
            /// "Key": если файл называетса "ru-Ru_Mods.Bismuth.hjson", то будет выглядеть так: "Key": "Значение на русском языке", если на английском, то так: "Key": "Value in English".
            _ = this.GetLocalization("Chat.Death").Value; // Ru: не смог справиться с желанием убивать En: couldn't cope with the desire to kill
            _ = this.GetLocalization("Chat.Death2").Value; // Ru: обезумел En: became mad
            _ = this.GetLocalization("Chat.Death3").Value; // Ru: выпил яд En: drank the poison 
            _ = this.GetLocalization("Chat.Death4").Value; // Ru: стал жертвой разорванных уз En: became a victim of broken connections

            _ = this.GetLocalization("Chat.OnEnterText1").Value; //Ru: Спасибо, что играете с [c/8936ff:Bismuth Mod]! En: Thank you for playing [c/8936ff:Bismuth Mod]!
            _ = this.GetLocalization("Chat.OnEnterText2").Value; //Ru: [c/fc6735:Убедитесь, что вы используете конкретного персонажа для игры в] [c/fc6735:конкретном мире!] En: [c/fc6735:Make sure you use certain character for certain world!]                                                            
            _ = this.GetLocalization("Chat.OnEnterText3").Value; //Ru: [c/ff0000:Пожалуйста, создайте мир заново] En: [c/ff0000:Please regenerate your world]
                                                                 //--------------------Skill---------------------\\
            #region Warrior's skills
            _ = this.GetLocalization("Skill.Skill1Name").Value; // Ru: Воин - мой выбор! En: My choice is warrior!
            _ = this.GetLocalization("Skill.Skill2Name").Value; // Ru: Защитник-ученик En: Defender-Apprentice
            _ = this.GetLocalization("Skill.Skill3Name").Value; // Ru: Стойкий En: Tenacious
            _ = this.GetLocalization("Skill.Skill4Name").Value; // Ru: Держать строй! En: Hold the Line!
            _ = this.GetLocalization("Skill.Skill5Name").Value; // Ru: Как за каменной стеной En: Like a Stone Wall
            _ = this.GetLocalization("Skill.Skill6Name").Value; // Ru: Горячая месть En: Hot Revenge
            _ = this.GetLocalization("Skill.Skill7Name").Value; // Ru: Холодная месть En: Cold Revenge
            _ = this.GetLocalization("Skill.Skill8Name").Value; // Ru: Бронированный En: Armored
            _ = this.GetLocalization("Skill.Skill9Name").Value; // Ru: Жажда жизни En: Thirst for Life
            _ = this.GetLocalization("Skill.Skill10Name").Value; // Ru: Защищенный от зла En: Protected from Evil
            _ = this.GetLocalization("Skill.Skill11Name").Value; // Ru: До последней капли крови En: To the Last Drop of Blood
            _ = this.GetLocalization("Skill.Skill12Name").Value; // Ru: Меня не сломить! En: You Can't Break Me!
            _ = this.GetLocalization("Skill.Skill13Name").Value; // Ru: Мой дед был вампиром En: My Grandpa was a Vampire
            _ = this.GetLocalization("Skill.Skill14Name").Value; // Ru: Панацея от урона En: Panacea from Damage
            _ = this.GetLocalization("Skill.Skill15Name").Value; // Ru: Сама стойкость En: The Steadfastness itself
            _ = this.GetLocalization("Skill.Skill16Name").Value; // Ru: Легендарный защитник En: Legendary Defender
            _ = this.GetLocalization("Skill.Skill17Name").Value; // Ru: Колючий парень En: Spiky Guy
            _ = this.GetLocalization("Skill.Skill18Name").Value; // Ru: Курс молодого бойца En: Course of a Young Fighter
            _ = this.GetLocalization("Skill.Skill19Name").Value; // Ru: Мистер Гостеприимство En: Mr.Welcome
            _ = this.GetLocalization("Skill.Skill20Name").Value; // Ru: Чемпион Террарии En: Champion of Terraria
            _ = this.GetLocalization("Skill.Skill21Name").Value; // Ru: Фехтовальщик-виртуоз En: Fencer-Virtuoso
            _ = this.GetLocalization("Skill.Skill22Name").Value; // Ru: Приступ злости En: Rage Attack
            _ = this.GetLocalization("Skill.Skill23Name").Value; // Ru: Гнев берсерка En: Berserker's Wrath
            _ = this.GetLocalization("Skill.Skill24Name").Value; // Ru: ГИПЕРЯРОСТЬ! En: HYPERFURY!
            _ = this.GetLocalization("Skill.Skill25Name").Value; // Ru: Силовые тренировки En: Strength Exercises
            _ = this.GetLocalization("Skill.Skill26Name").Value; // Ru: Предсмертная агония En: Death Agony
            _ = this.GetLocalization("Skill.Skill27Name").Value; // Ru: Единение с природой En: Unity with Nature
            _ = this.GetLocalization("Skill.Skill28Name").Value; // Ru: Рожденный кромсать En: Born to Shred
            _ = this.GetLocalization("Skill.Skill29Name").Value; // Ru: Жажда крови En: Bloodlust
            _ = this.GetLocalization("Skill.Skill30Name").Value; // Ru: Медленный и смертоносный En: Slow and Deadly
            _ = this.GetLocalization("Skill.Skill31Name").Value; // Ru: Тот, кто верит в удачу En: The One Who Trusts in Luck
            _ = this.GetLocalization("Skill.Skill32Name").Value; // Ru: Титаническая сила En: Titanic Power
            _ = this.GetLocalization("Skill.Skill33Name").Value; // Ru: Всплеск энергии En: Surge of Energy
            _ = this.GetLocalization("Skill.Skill34Name").Value; // Ru: Словно атомный взрыв En: Like a nuke
            _ = this.GetLocalization("Skill.Skill35Name").Value; // Ru: Легендарный боец En: Legendary Fighter     
            #endregion
            #region Wizard's skills
            _ = this.GetLocalization("Skill.Wizard.Skill36Name").Value; // Ru: Маг - мой выбор! En: My choice is wizard!
            _ = this.GetLocalization("Skill.Wizard.Skill37Name").Value; // Ru: Начальная магия En: Elementary Magic
            _ = this.GetLocalization("Skill.Wizard.Skill38Name").Value; // Ru: Секреты друидов En: Secrets of Druids
            _ = this.GetLocalization("Skill.Wizard.Skill39Name").Value; // Ru: Сила - в количестве! En: Strength is in Numbers!
            _ = this.GetLocalization("Skill.Wizard.Skill40Name").Value; // Ru: Лидер En: The Leader
            _ = this.GetLocalization("Skill.Wizard.Skill41Name").Value; // Ru: Собиратель миньонов En: Minion collector
            _ = this.GetLocalization("Skill.Wizard.Skill42Name").Value; // Ru: Пакт о ненападении En: Nonaggression Pact
            _ = this.GetLocalization("Skill.Wizard.Skill43Name").Value; // Ru: Древние ритуалы En: Ancient Rituals
            _ = this.GetLocalization("Skill.Wizard.Skill44Name").Value; // Ru: Твоя личная армия En: Your Personal Army
            _ = this.GetLocalization("Skill.Wizard.Skill45Name").Value; // Ru: Прислужники-доктора En: Minions-Doctors
            _ = this.GetLocalization("Skill.Wizard.Skill46Name").Value; // Ru: Альтруист En: Altruist
            _ = this.GetLocalization("Skill.Wizard.Skill47Name").Value; // Ru: Эгоист маг En: Selfish
            _ = this.GetLocalization("Skill.Wizard.Skill48Name").Value; // Ru: Боевой клич En: Battle Cry
            _ = this.GetLocalization("Skill.Wizard.Skill49Name").Value; // Ru: Магический источник En: Magic Wellspring
            _ = this.GetLocalization("Skill.Wizard.Skill50Name").Value; // Ru: Маг-Эксперт En: Wizard-Expert
            _ = this.GetLocalization("Skill.Wizard.Skill51Name").Value; // Ru: Волшебный щит En: Magic Shield
            _ = this.GetLocalization("Skill.Wizard.Skill53Name").Value; // Ru: Внутренняя сила En: Inner Strength
            _ = this.GetLocalization("Skill.Wizard.Skill54Name").Value; // Ru: Волшебник-ассасин En: Wizard-Assassin
            _ = this.GetLocalization("Skill.Wizard.Skill55Name").Value; // Ru: Magic Wellspring II En: Магический Источник II
            _ = this.GetLocalization("Skill.Wizard.Skill56Name").Value; // Ru: Тот, кто силён духом En: The One Who is Strong in Spirit
            _ = this.GetLocalization("Skill.Wizard.Skill57Name").Value; // Ru: Критическое мышление En: Critical Thinking
            _ = this.GetLocalization("Skill.Wizard.Skill58Name").Value; // Ru: Сохраняй спокойствие и восславь солнце En: Keep Calm and Praise the Sun
            _ = this.GetLocalization("Skill.Wizard.Skill59Name").Value; // Ru: Нет болезням! En: No to Sicknesses!
            _ = this.GetLocalization("Skill.Wizard.Skill60Name").Value; // Ru: Полностью автоматический En: Fully Automated
            _ = this.GetLocalization("Skill.Wizard.Skill61Name").Value; // Ru: Внутренний баланс En: Inner Balance
            _ = this.GetLocalization("Skill.Wizard.Skill62Name").Value; // Ru: Астральное состояние En: The Astral State
            _ = this.GetLocalization("Skill.Wizard.Skill63Name").Value; // Ru: Похищение маны En: Manasteal
            _ = this.GetLocalization("Skill.Wizard.Skill64Name").Value; // Ru: Легендарный маг En: Legendary Wizard
            #endregion
            #region Assassin's skills
            _ = this.GetLocalization("Skill.Assassin.Skill65Name").Value; // Ru: Головорез - мой выбор! En: My choice is assassin!
            _ = this.GetLocalization("Skill.Assassin.Skill66Name").Value; // Ru: Предпочитаю кинжалы En: I Prefer Shortswords
            _ = this.GetLocalization("Skill.Assassin.Skill67Name").Value; // Ru: Убийца во тьме En: The Killer in the Darkness
            _ = this.GetLocalization("Skill.Assassin.Skill68Name").Value; // Ru: Со скоростью света En: At the Speed of Light
            _ = this.GetLocalization("Skill.Assassin.Skill69Name").Value; // Ru: Охотничьи рефлексы En: Hunter Reflexes
            _ = this.GetLocalization("Skill.Assassin.Skill70Name").Value; // Ru: Инстинкты хищника En: Predator Instincts
            _ = this.GetLocalization("Skill.Assassin.Skill71Name").Value; // Ru: В погоне за добычей En: In Pursuit of the Prey
            _ = this.GetLocalization("Skill.Assassin.Skill72Name").Value; // Ru: Телепортация! En: Teleportation!
            _ = this.GetLocalization("Skill.Assassin.Skill73Name").Value; // Ru: 7 секунд преимущества En: 7 Seconds of Advantag
            _ = this.GetLocalization("Skill.Assassin.Skill75Name").Value; // Ru: Мастер телепортации En: Master of Teleportation
            _ = this.GetLocalization("Skill.Assassin.Skill76Name").Value; // Ru: Точный удар En: Accurate Blow
            _ = this.GetLocalization("Skill.Assassin.Skill77Name").Value; // Ru: Профессиональный убийца En: Professional Murderer
            _ = this.GetLocalization("Skill.Assassin.Skill78Name").Value; // Ru: Джекпот! En: Jackpot!
            _ = this.GetLocalization("Skill.Assassin.Skill79Name").Value; // Ru: (Не)Летальный урон En: (Non)Lethal Damage
            _ = this.GetLocalization("Skill.Assassin.Skill80Name").Value; // Ru: К сердцу путь найдем ножом... En: Shortest Path to the Heart
            _ = this.GetLocalization("Skill.Assassin.Skill81Name").Value; // Ru: Неуловимый En: Elusive
            _ = this.GetLocalization("Skill.Assassin.Skill82Name").Value; // Ru: Человек-амфибия En: Amphibian Man
            _ = this.GetLocalization("Skill.Assassin.Skill83Name").Value; // Ru: Все любят скидки :) En: Everyone Loves Discounts :)
            _ = this.GetLocalization("Skill.Assassin.Skill84Name").Value; // Ru: Вор в ночи En: A Thief in the Night
            _ = this.GetLocalization("Skill.Assassin.Skill85Name").Value; // Ru: Цепляясь за жизнь En: Clinging to Life
            _ = this.GetLocalization("Skill.Assassin.Skill86Name").Value; // Ru: Удар в спину En: A Stab in the Back
            _ = this.GetLocalization("Skill.Assassin.Skill87Name").Value; // Ru: Подлость En: Meanness
            _ = this.GetLocalization("Skill.Assassin.Skill88Name").Value; // Ru: Змеиная жестокость En: Snake Cruelty
            _ = this.GetLocalization("Skill.Assassin.Skill89Name").Value; // Ru: Убей или умри En: Kill or Die
            _ = this.GetLocalization("Skill.Assassin.Skill90Name").Value; // Ru: Легендарный головорез En: Legendary Assassin
            #endregion
            #region Ranger's skills
            _ = this.GetLocalization("Skill.Ranger.Skill91Name").Value; // Ru: Стрелок - мой выбор! En: My choice is ranger!
            _ = this.GetLocalization("Skill.Ranger.Skill92Name").Value; // Ru: Тренировка стрельбы En: Shooting Training
            _ = this.GetLocalization("Skill.Ranger.Skill93Name").Value; // Ru: Точный выстрел En: Precise Shot
            _ = this.GetLocalization("Skill.Ranger.Skill94Name").Value; // Ru: Стоп! Время оглушения! En: Stop! Stun Time!
            _ = this.GetLocalization("Skill.Ranger.Skill95Name").Value; // Ru: Онемевший En: Numbness
            _ = this.GetLocalization("Skill.Ranger.Skill96Name").Value; // Ru: Паралич En: Paralysis
            _ = this.GetLocalization("Skill.Ranger.Skill97Name").Value; // Ru: Тренированный разведчик En: Skilled Scout
            _ = this.GetLocalization("Skill.Ranger.Skill98Name").Value; // Ru: Ловкие руки En: Deft Hands
            _ = this.GetLocalization("Skill.Ranger.Skill99Name").Value; // Ru: Стрелок-ассассин En: Ranger-Assassin
            _ = this.GetLocalization("Skill.Ranger.Skill100Name").Value; // Ru: Акробат из ада En: Acrobat from Hell
            _ = this.GetLocalization("Skill.Ranger.Skill101Name").Value; // Ru: Шторм из снарядов En: Storm of Projectiles
            _ = this.GetLocalization("Skill.Ranger.Skill102Name").Value; // Ru: Останавливающие снаряды En: Stopping Shells
            _ = this.GetLocalization("Skill.Ranger.Skill103Name").Value; // Ru: Череда убийств En: Killing Spree
            _ = this.GetLocalization("Skill.Ranger.Skill104Name").Value; // Ru: Дуэлянт En: Duelist
            _ = this.GetLocalization("Skill.Ranger.Skill105Name").Value; // Ru: Бронебойный En: Armor-Piercing
            _ = this.GetLocalization("Skill.Ranger.Skill106Name").Value; // Ru: Энергетический барьер En: The Energy Barrier
            _ = this.GetLocalization("Skill.Ranger.Skill107Name").Value; // Ru: Здоровее не бывает En: Health Boost
            _ = this.GetLocalization("Skill.Ranger.Skill108Name").Value; // Ru: Непробиваемый En: Impenetrable
            _ = this.GetLocalization("Skill.Ranger.Skill110Name").Value; // Ru: Скряга En: Miser
            _ = this.GetLocalization("Skill.Ranger.Skill111Name").Value; // Ru: Дополнительная стрела En: Additional Arrow
            _ = this.GetLocalization("Skill.Ranger.Skill112Name").Value; // Ru: Рикошет! En: Ricochet!
            _ = this.GetLocalization("Skill.Ranger.Skill113Name").Value; // Ru: Гренадер En: Grenadier
            _ = this.GetLocalization("Skill.Ranger.Skill114Name").Value; // Ru: Крепкая тетива En: Sturdy Bowstring
            _ = this.GetLocalization("Skill.Ranger.Skill115Name").Value; // Ru: Взрывные пули En: Explosive Bullets
            _ = this.GetLocalization("Skill.Ranger.Skill116Name").Value; // Ru: Зови меня ДумГаем En: Call me a DoomGuy
            _ = this.GetLocalization("Skill.Ranger.Skill117Name").Value; // Ru: На острие En: On the Edge
            _ = this.GetLocalization("Skill.Ranger.Skill118Name").Value; // Ru: Экспансивные пули En: Hollow-point Bullets
            _ = this.GetLocalization("Skill.Ranger.Skill119Name").Value; // Ru: Кумулятивные ракеты En: Shaped-Charge Rockets
            _ = this.GetLocalization("Skill.Ranger.Skill120Name").Value; // Ru: Аим бот En: Aimbot
            _ = this.GetLocalization("Skill.Ranger.Skill121Name").Value; // Ru: Легендарный стрелок En: Legendary Ranger
            #endregion
			#region Thrower's skills
			_ = this.GetLocalization("Skill.Thrower.Skill122Name").Value; // Ru: Метатель - мой выбор! En: My choice is thrower!
            _ = this.GetLocalization("Skill.Thrower.Skill123Name").Value; // Ru: Зазубренные наконечники En: Serrated Tips
            _ = this.GetLocalization("Skill.Thrower.Skill124Name").Value; // Ru: Призрачные снаряды En: Ethereal Projectiles
            _ = this.GetLocalization("Skill.Thrower.Skill125Name").Value; // Ru: Волл-хак En: Wallhack
            _ = this.GetLocalization("Skill.Thrower.Skill126Name").Value; // Ru: Выключи свои читы! En: Turn off Your Cheats!
            _ = this.GetLocalization("Skill.Thrower.Skill127Name").Value; // Ru: Я не сдвинусь En: I will not budge!
            _ = this.GetLocalization("Skill.Thrower.Skill128Name").Value; // Ru: Неколебимый герой En: Steadfast Hero
            _ = this.GetLocalization("Skill.Thrower.Skill129Name").Value; // Ru: Человек-турель En: Turretman
            _ = this.GetLocalization("Skill.Thrower.Skill130Name").Value; // Ru: Олимпиец En: Olympian
            _ = this.GetLocalization("Skill.Thrower.Skill131Name").Value; // Ru: Громовержец En: Thunderer
            _ = this.GetLocalization("Skill.Thrower.Skill132Name").Value; // Ru: Пиротехник En: Pyrotechnist
            _ = this.GetLocalization("Skill.Thrower.Skill133Name").Value; // Ru: Способный ученик En: Apt Pupil
            _ = this.GetLocalization("Skill.Thrower.Skill134Name").Value; // Ru: Алхимик En: Alchemist
            _ = this.GetLocalization("Skill.Thrower.Skill135Name").Value; // Ru: Баффнутый En: BuffedBuffed
            _ = this.GetLocalization("Skill.Thrower.Skill136Name").Value; // Ru: Зеркальная броня En: Mirror Armor
            _ = this.GetLocalization("Skill.Thrower.Skill137Name").Value; // Ru: По дороге в бесконечность En: On the Road to Infinity
            _ = this.GetLocalization("Skill.Thrower.Skill138Name").Value; // Ru: Метеоритный дождь En: Meteor Rain
            _ = this.GetLocalization("Skill.Thrower.Skill139Name").Value; // Ru: Метатель-ассассин En: Thrower-Assassin
            _ = this.GetLocalization("Skill.Thrower.Skill140Name").Value; // Ru: Дартс на выживание En: Darts or Die
            _ = this.GetLocalization("Skill.Thrower.Skill141Name").Value; // Ru: Огненный шторм! En: FIRESTORM!
            _ = this.GetLocalization("Skill.Thrower.Skill142Name").Value; // Ru: Сверхзвуковой En: Hypersonic
            _ = this.GetLocalization("Skill.Thrower.Skill143Name").Value; // Ru: Насквозь En: Right Through
            _ = this.GetLocalization("Skill.Thrower.Skill144Name").Value; // Ru: Смерть с небес En: Death from the Sky
            _ = this.GetLocalization("Skill.Thrower.Skill146Name").Value; // Ru: Мода - моё призвание En: Fashion is My Profession
            _ = this.GetLocalization("Skill.Thrower.Skill147Name").Value; // Ru: Легендарный метатель En: Legendary Thrower
            #endregion
            #region Warrior's skills tooltips
            _ = this.GetLocalization("Skill.Skill1Tooltip").Value; // Ru: +5% к урону ближнего боя, -20% к иным типам урона En: +5% to melee but -20% to other types of damage
            _ = this.GetLocalization("Skill.Skill2Tooltip").Value; // Ru: +2 защиты, +4% к поглощению урона En: +2 defence, +4% damage resistance.
            _ = this.GetLocalization("Skill.Skill3Tooltip").Value; // Ru: Увеличение максимального здоровья En: Increased maximum HP
            _ = this.GetLocalization("Skill.Skill4Tooltip").Value; // Ru: +6 хп/сек и +6 защиты, если игрок стоит En: +6 hp/sec and +6 defense, when standing still
            _ = this.GetLocalization("Skill.Skill5Tooltip").Value; // Ru: +10 хп/сек и +12 защиты, если игрок стоит En: +10 hp/sec and +12 defense, when standing still
            _ = this.GetLocalization("Skill.Skill6Tooltip").Value; // Ru: +15 хп/сек, +20 защиты и +10% поглощения урона, если игрок стоит. Атакованные мобы получают дебафф ''В огне'' En: +15 hp/sec, +20 defense and +10% damage resistance when standing still. Attacked mobs get ''On Fire!''
            _ = this.GetLocalization("Skill.Skill7Tooltip").Value; // Ru: +15 хп/сек, +20 защиты и +10% поглощения урона, если игрок стоит. Атакованные мобы получают дебафф ''Ледяной огонь'' En: +15 hp/sec, +20 defense and +10% damage resistance when standing still. Attacked mobs get ''Frostburn''
            _ = this.GetLocalization("Skill.Skill8Tooltip").Value; // Ru: Увеличение защиты En: Increased defense
            _ = this.GetLocalization("Skill.Skill9Tooltip").Value; // Ru: +4 хп/сек, меньше здоровья - выше регенерация En: +4hp/sec, less HP - more life regeneration
            _ = this.GetLocalization("Skill.Skill10Tooltip").Value; // Ru: +25% поглощения урона, если игрок находится в искажении или кримзоне En: +25% damage resistance in crimson or corruption.
            _ = this.GetLocalization("Skill.Skill11Tooltip").Value; // Ru: +8 хп/сек на 4 секундs после получения урона En: +4 hp/sec on 4 seconds after getting damage
            _ = this.GetLocalization("Skill.Skill12Tooltip").Value; // Ru: +5% к шансу блокирования, +10% к поглощению урона En: +5% block chance, +10% damage resistance
            _ = this.GetLocalization("Skill.Skill13Tooltip").Value; // Ru: 4% высасывания здоровья ночью En: 4% lifesteal at night
            _ = this.GetLocalization("Skill.Skill14Tooltip").Value; // Ru: Вы неуязвимы En: You are invincible
            _ = this.GetLocalization("Skill.Skill15Tooltip").Value; // Ru: You are invincible En: Вы неуязвимы
            _ = this.GetLocalization("Skill.Skill16Tooltip").Value; // Ru: +10 защиты, +10% поглощения урона, +6хп/сек, +50 макс. здоровья, +7% к шансу блокирования, -25% к скорости перемещения, кулдаун использования зелий лечения уменьшен на 10 секунд En: +10 defence, +10% damage resistance, +6hp/sec, +50 HP, +7% block chance, -25% movement speed, healing potions cooldown is decreased by 10 seconds
            _ = this.GetLocalization("Skill.Skill17Tooltip").Value; // Ru: Увеличение отражения урона En: Increased damage reflection 
            _ = this.GetLocalization("Skill.Skill18Tooltip").Value; // Ru: +7% к скоростии +3% к крит. шансу ближнего боя En: +7% melee speed, +3% melee crit chance
            _ = this.GetLocalization("Skill.Skill19Tooltip").Value; // Ru: 1% к урону ближнего боя за каждого НИПа (до +15%) En: +1% melee damage for every town NPC (up to +15%)
            _ = this.GetLocalization("Skill.Skill20Tooltip").Value; // Ru: 1% к урону ближнего боя за каждого убитого босса (до +15%) En: +1% melee damage for every slain boss (up to +15%)
            _ = this.GetLocalization("Skill.Skill21Tooltip").Value; // Ru: Увеличение скорости ближнего боя En: Increased melee speed
            _ = this.GetLocalization("Skill.Skill22Tooltip").Value; // Ru: +30% к скорости ближнего боя, -15% к поглощению урона En: +30% melee speed, -15% damage resistance
            _ = this.GetLocalization("Skill.Skill23Tooltip").Value; // Ru: +40% к скорости ближнего боя, -10% к поглощению урона En: +40% melee speed, -10% damage resistance
            _ = this.GetLocalization("Skill.Skill24Tooltip").Value; // Ru: +50% к скорости ближнего боя, +15% к крит. шансу ближнего боя En: +50% melee speed, +15% melee crit chance
            _ = this.GetLocalization("Skill.Skill25Tooltip").Value; // Ru: Увеличение урона ближнего боя En: Increased melee damage
            _ = this.GetLocalization("Skill.Skill26Tooltip").Value; // Ru: +10% к крит. шансу ближнего боя, меньше здоровья - больше крит. шанса ближнего боя En: +10% melee crit chance, less HP - more melee crit chance
            _ = this.GetLocalization("Skill.Skill2&Tooltip").Value; // Ru: +20% к урону ближнего боя, если игрок в джунглях En: +20% melee damage in the jungle
            _ = this.GetLocalization("Skill.Skill28Tooltip").Value; // Ru: +15% к скорости ближнего боя, +20% к скорости перемещения En: +15% melee speed, +20% movement speed
            _ = this.GetLocalization("Skill.Skill29Tooltip").Value; // Ru: 6% высасывания здоровья, -15% к урону ближнего боя En: 6% lifesteal, -15% melee damage
            _ = this.GetLocalization("Skill.Skill30Tooltip").Value; // Ru: +10% к урону ближнего боя, +10% к крит. шансу ближнего боя, -25% к скорости ближнего боя En: +10% melee damage, +10% melee crit chance, -25% melee speed
            _ = this.GetLocalization("Skill.Skill31Tooltip").Value; // Ru: +10% к крит. шансу ближнего боя, +50% к крит. урону ближнего боя, 1% шанс нанести трехкратный урон En: +10% melee crit chance, +50% melee crit \ndamage, 1% chance of x3 damage
            _ = this.GetLocalization("Skill.Skill32Tooltip").Value; // Ru: Увеличение отбрасывания оружием ближнего боя в два раза En: Twofold melee knockback increase
            _ = this.GetLocalization("Skill.Skill33Tooltip").Value; // Ru: Увеличение урона ближнего боя в 3 раза En: x3 melee damages
            _ = this.GetLocalization("Skill.Skill34Tooltip").Value; // Ru: Увеличение урона ближнего боя в 5 раз En: x5 melee damage
            _ = this.GetLocalization("Skill.Skill35Tooltip").Value; // Ru: 2% шанс пятикратного урона, +15% к урону ближнего боя, +20% к крит. шансу, урону и скорости ближнего боя после использования любого зелья, кроме зелий лечения и маны En: 2% chance of x5 melee damage. +15% melee damage. +20% to melee crit chance, damage and speed after consuming any potion (except mana and healing potions)
            #endregion
            #region Wizard's skills tooltips
            _ = this.GetLocalization("Skill.Wizard.Skill36Tooltip").Value; // Ru: +5% к магическому урону и урону прислужников, -20% к иным типам урона En: +5% to magic and minion but -20% to other types of damage
            _ = this.GetLocalization("Skill.Wizard.Skill37Tooltip").Value; // Ru: +4% к магическому урону, +6% к урону прислужников En: +4% to magic damage, +6% to minion damage
            _ = this.GetLocalization("Skill.Wizard.Skill38Tooltip").Value; // Ru: +1 хп/сек за каждого прислужников, если вы в джунглях En: +1 hp/sec for every minion when in the jungle
            _ = this.GetLocalization("Skill.Wizard.Skill39Tooltip").Value; // Ru: +4 к максимальному числу прислужников En: +4 to max amount of minions
            _ = this.GetLocalization("Skill.Wizard.Skill40Tooltip").Value; // Ru: Увеличение максимального числа прислужников в два раза En: x2 max amount of minions
            _ = this.GetLocalization("Skill.Wizard.Skill41Tooltip").Value; // Ru: +9% к урону миньонов за каждый уникальный тип прислужников En: +9% to minion damage for every type of minions used
            _ = this.GetLocalization("Skill.Wizard.Skill42Tooltip").Value; // Ru: Мобы не атакуют вас, если призван прислужник того же типа En: Mobs don't attack you, if you have a minion of the same type
            _ = this.GetLocalization("Skill.Wizard.Skill43Tooltip").Value; // Ru: Увеличение урона прислужников En: Increased minion damage
            _ = this.GetLocalization("Skill.Wizard.Skill44Tooltip").Value; // Ru: Увеличение максимального числа прислужников En: Increased maximum amount of minions
            _ = this.GetLocalization("Skill.Wizard.Skill45Tooltip").Value; // Ru: +8 к максимальному здоровью за каждого прислужника En: +8 max HP per minion
            _ = this.GetLocalization("Skill.Wizard.Skill46Tooltip").Value; // Ru: +25% к урону прислужников, -2 защиты за каждого прислужника En: +25% minion damage, -2 defense per minion
            _ = this.GetLocalization("Skill.Wizard.Skill47Tooltip").Value; // Ru: +1% к поглощению урона и +2 защиты за каждого прислужника, -20% к урону прислужников En: +1% damage resistance and +2 defence per minion, -20% minion damage
            _ = this.GetLocalization("Skill.Wizard.Skill48Tooltip").Value; // Ru: Увеличение отбрасывания прислужников в 2 раза En: x2 minion knockback
            _ = this.GetLocalization("Skill.Wizard.Skill49Tooltip").Value; // Ru: Снижение стоимости заклинаний En: Decreased mana cost
            _ = this.GetLocalization("Skill.Wizard.Skill50Tooltip").Value; // Ru: -8% к стоимости заклинаний, +8% к магическому урону En: -8% mana cost, +8% magic damage
            _ = this.GetLocalization("Skill.Wizard.Skill51Tooltip").Value; // Ru: Вражеские атаки сначала отнимают ману, а затем здоровье En: Enemy attacks consume mp instead of hp as long as you have some
            _ = this.GetLocalization("Skill.Wizard.Skill53Tooltip").Value; // Ru: Увеличение магического урона En: Increased magic damage
            _ = this.GetLocalization("Skill.Wizard.Skill54Tooltip").Value; // Ru: +10% к магическому крит. шансу, +25% к магическому крит. урону En: +10% magic crit chance, +25% magic crit damage
            _ = this.GetLocalization("Skill.Wizard.Skill55Tooltip").Value; // Ru: Увеличение регенерации маны En: Increased mana regeneration
            _ = this.GetLocalization("Skill.Wizard.Skill56Tooltip").Value; // Ru: Преобразование 50% полученного урона в ману En: Convert 50% of received damage to mana
            _ = this.GetLocalization("Skill.Wizard.Skill57Tooltip").Value; // Ru: Восстановление 20% маны после магического крит. удара En: Magical critical hit restores 20% of your mana
            _ = this.GetLocalization("Skill.Wizard.Skill58Tooltip").Value; // Ru: +15% к магическому урону и крит. шансу во время дня En: +15% magic damage and +15% magic crit chance during daytime
            _ = this.GetLocalization("Skill.Wizard.Skill59Tooltip").Value; // Ru: Зелья маны не накладывают ослабление волшебства En: Mana potions don't induce mana sickness
            _ = this.GetLocalization("Skill.Wizard.Skill60Tooltip").Value; // Ru: Зелья маны используются автоматически En: Your mana potions are used automatically
            _ = this.GetLocalization("Skill.Wizard.Skill61Tooltip").Value; // Ru: Заклинания не требуют маны En: Spells don't consume mana
            _ = this.GetLocalization("Skill.Wizard.Skill62Tooltip").Value; // Ru: Заклинания не требуют маны, +25% к магическому крит. шансу En: Spells don't consume mana, +25% magic crit chance
            _ = this.GetLocalization("Skill.Wizard.Skill63Tooltip").Value; // Ru: 7% урона преобразуется в ману En: 7% of your damage converts to mana
            _ = this.GetLocalization("Skill.Wizard.Skill64Tooltip").Value; // Ru: +15% к магическому урону, +20% к урону прислужников, +15% к магическому крит. шансу, +2 к макс. числу прислужников, +20% к скорости передвижения, радиус подъема звезд маны выше En: +15% magic damage, +20% minion damage, +15% magic crit damage, +2 max amount of minions, +20% movement speed, you can pick up mana stars from a longer distance
            #endregion
            #region Assassin's skills tooltips
            _ = this.GetLocalization("Skill.Assassin.Skill65Tooltip").Value; // Ru: +5% к урону головореза, -20% к иным типам урона, кроме ближнего En: +5% to assassin but -20% to other types of damage, except melee
            _ = this.GetLocalization("Skill.Assassin.Skill66Tooltip").Value; // Ru: +5% к урону и +5% к крит. шансу головореза, +40% к урону кинжалов En: +5% to assassin damage, +5% to assassin crit \nchance, +40% to damage for shortswords
            _ = this.GetLocalization("Skill.Assassin.Skill67Tooltip").Value; // Ru: Увеличение получаемого опыта на 20% ночью En: +20% to XP gained during nighttime
            _ = this.GetLocalization("Skill.Assassin.Skill68Tooltip").Value; // Ru: Увеличение скорости перемещения En: Increased movement speed
            _ = this.GetLocalization("Skill.Assassin.Skill69Tooltip").Value; // Ru: Вы получаете эффекты \"Ночное зрение\" и \"Охотник\" En: You get \"Night Vision\" and \"Hunter\" 
            _ = this.GetLocalization("Skill.Assassin.Skill70Tooltip").Value; // Ru: Вы получаете эффекты \"Ночное зрение\" и \"Охотник\" En: You get \"Night Vision\" and \"Hunter\"
            _ = this.GetLocalization("Skill.Assassin.Skill71Tooltip").Value; // Ru: Вы получаете эффекты \"Ночное зрение\" и \"Охотник\", +40% к скорости передвижения после нанесения урона En: You get \"Night Vision\" and \"Hunter\", +40% movement speed after dealing damage
            _ = this.GetLocalization("Skill.Assassin.Skill72Tooltip").Value; // Ru: Вы можете телепортироваться при помощи специальной клавиши \nоткат- 15 секунд En: You can teleport by pressing a special key \n15 seconds cooldown
            _ = this.GetLocalization("Skill.Assassin.Skill73Tooltip").Value; // Ru: Снижение отката телепортации на 7 секунд En: -7 seconds to teleportation cooldown
            _ = this.GetLocalization("Skill.Assassin.Skill75Tooltip").Value; // Ru: Частицы после телепортации наносят 500 урона врагам и лечат вас на 50 здоровья за каждого убитого En: Particles left behind after teleportation deal 500 damage to enemies and heal 50 HP for every killed one
            _ = this.GetLocalization("Skill.Assassin.Skill76Tooltip").Value; // Ru: Увеличение шанса критического удара для любого типа урона En: Increased critical damage for all classes
            _ = this.GetLocalization("Skill.Assassin.Skill77Tooltip").Value; // Ru: Увеличение урона головореза En: Increased assassin damage
            _ = this.GetLocalization("Skill.Assassin.Skill78Tooltip").Value; // Ru: 1% шанс пятикратного урона En: 1% chance of 5x damage
            _ = this.GetLocalization("Skill.Assassin.Skill79Tooltip").Value; // Ru: 2% шанс снизить здоровье противника до 1 хп, удар не игнорирует защиту (10x урон при битве с боссом) En: 2% chance to reduce enemy HP to 1, this hit doesn't ignore defense (10x damage when fighting a boss
            _ = this.GetLocalization("Skill.Assassin.Skill80Tooltip").Value; // Ru: Удар с пятикратным уроном восстанавливает 25% вашего здоровья En: 5x damage hits restore 25% of your HP
            _ = this.GetLocalization("Skill.Assassin.Skill81Tooltip").Value; // Ru: Летальный удар даёт вам 100% шанс увернуться от следующей атаки En: Lethal strike gives you a 100% chance to dodge the next hit
            _ = this.GetLocalization("Skill.Assassin.Skill82Tooltip").Value; // Ru: +10 хп/сек, +35% к урону головореза и +20% ко всем крит. шансам, если игрок находится в воде En: +10 HP/sec, +35% assassin damage and +20% critical strike chance when in water
            _ = this.GetLocalization("Skill.Assassin.Skill83Tooltip").Value; // Ru: Скидка 35% на все цены в магазинах En: A 35% discount in every store
            _ = this.GetLocalization("Skill.Assassin.Skill84Tooltip").Value; // Ru: Увеличение получаемых за убийство противников денег на 40% ночью En: You get 40% more money during nighttime
            _ = this.GetLocalization("Skill.Assassin.Skill85Tooltip").Value; // Ru: Критический удар ускоряет регенерацию здоровья En: Every critical hit increases your life regeneration
            _ = this.GetLocalization("Skill.Assassin.Skill86Tooltip").Value; // Ru: +66% к урону головореза, +30% к крит. шансу головореза, +75% к крит. урону головореза, -50% к поглощению урона, -25 защиты En: +66% to assassin damage, +30% assassin crit chance, +75% to assassin crit damage, -50% damage resistance, -25 defense
            _ = this.GetLocalization("Skill.Assassin.Skill87Tooltip").Value; // Ru: Увеличение шанса увернуться от удара на 40% помимо прочих бонусов En: +40% chance to dodge, disregards previous bonusess
            _ = this.GetLocalization("Skill.Assassin.Skill88Tooltip").Value; // Ru: 50% шанс отравить врагов помимо прочих бонусов En: A 50% chance to inflict \"Poison\" on your enemy, disregards previous bonuses 
            _ = this.GetLocalization("Skill.Assassin.Skill89Tooltip").Value; // Ru: +100% к крит. шансу, +30% к крит. урону, увеличение регенерации здоровья в 4 раза после убийства, после 4 секунд бездействия вы начинаете умирать, -15% к макс. здоровью En: +100% crit chance, +30% crit damage, x4 regen speed after killing an enemy, after 4 seconds without kills you start dying. -15% max HP
            _ = this.GetLocalization("Skill.Assassin.Skill90Tooltip").Value; // Ru: +15% к урону и крит. шансу головореза, +21% к урону и +30% к крит шансу ночью, +20% к любому типу урона в полнолуние En: +15% to assassin damage and critical strike chance, +21% assassin damage and +30% to critical damage during nighttime, +20% damage under a full moon
            #endregion
            #region Ranger's tooltips
            _ = this.GetLocalization("Skill.Ranger.Skill91Tooltip").Value; // Ru: +5% к урону стрелка, -20% к иным типам урона En +5% ranged but -20 % to other types of damage
            _ = this.GetLocalization("Skill.Ranger.Skill92Tooltip").Value; // Ru: +4% к шансу крит. урона стрелка, +6% к урону стрелка En: +4% ranged critical chance, +6% ranged damages
            _ = this.GetLocalization("Skill.Ranger.Skill93Tooltip").Value; // Ru: Увеличение шанса крит. урона стрелка En: Increases ranged critical chance
            _ = this.GetLocalization("Skill.Ranger.Skill94Tooltip").Value; // Ru: Ваши атаки оружием дальнего боя замораживают врагов на 1.5 секунды, но их защита увеличивается в 3 раза En: Your ranged attacks stun enemies for 1.5 seconds, but their defense increases threefold
            _ = this.GetLocalization("Skill.Ranger.Skill95Tooltip").Value; // Ru: Ваши атаки оружием дальнего боя замораживают врагов на 2 секунды, но их защита увеличивается в 1.5 раза En: Your ranged attacks stun enemies for 2 seconds, but their defense increases 1.5 times
            _ = this.GetLocalization("Skill.Ranger.Skill96Tooltip").Value; // Ru: Ваши атаки оружием дальнего боя замораживают врагов на 3 секунды и снижают их защиту до нуля En: Your ranged attacks stun enemies for 1.5 seconds and sets their defense to 0
            _ = this.GetLocalization("Skill.Ranger.Skill97Tooltip").Value; // Ru: Все оружия дальнего боя получают эффект бинокля En: All ranged weapons get binoculars effect
            _ = this.GetLocalization("Skill.Ranger.Skill98Tooltip").Value; // Ru: Увеличение получаемых денег при убийстве врагов En: You get more money for killing
            _ = this.GetLocalization("Skill.Ranger.Skill99Tooltip").Value; // Ru: +10% к шансу крит. урона и +25% к крит. урону стрелка En: +10% ranged critical chance, +25% ranged critical damage
            _ = this.GetLocalization("Skill.Ranger.Skill100Tooltip").Value; // Ru: +4% к шансу уворота от атаки и +23% к урону стрелка, если игрок находится в аду En: +4% dodge chance and +23% ranged damage when in the underworld
            _ = this.GetLocalization("Skill.Ranger.Skill101Tooltip").Value; // Ru: Снижение времени использования оружия дальнего боя En: Decreased use time of ranger weapons
            _ = this.GetLocalization("Skill.Ranger.Skill102Tooltip").Value; // Ru: 3% шанс заморозить противника на 2.5 секунды En: 3% chance to stun an enemy for 2,5 seconds
            _ = this.GetLocalization("Skill.Ranger.Skill103Tooltip").Value; // Ru: +10% к урону стрелка за каждого убитого противника (до 30%) En: +10% ranged damage after an killing enemy (up to 30%)
            _ = this.GetLocalization("Skill.Ranger.Skill104Tooltip").Value; // Ru: +6% к шансу уворота от атаки, +25% к урону стрелка, -15% к максимальному здоровью En: +6% dodge chance, +25% ranged damage, -15% max HP
            _ = this.GetLocalization("Skill.Ranger.Skill105Tooltip").Value; // Ru: Увеличение урона стрелка En: Increased ranged damage
            _ = this.GetLocalization("Skill.Ranger.Skill106Tooltip").Value; // Ru: Вы окружаетесь щитом, отражающим снаряды (вы также получаете урон), +25% к поглощению урона En: You’re surrounded by a shield that reflects projectiles (you also take damage), +25% damage resistance
            _ = this.GetLocalization("Skill.Ranger.Skill107Tooltip").Value; // Ru: +8 HP/sec, when the shield is active En: +8 HP/sec, when the shield is active
            _ = this.GetLocalization("Skill.Ranger.Skill108Tooltip").Value; // Ru: 100% шанс отразить снаряд En: 100% chance to parry a projectile
            _ = this.GetLocalization("Skill.Ranger.Skill110Tooltip").Value; // Ru: 15% шанс не потратить патроны En: 15% chance to not consume ammo
            _ = this.GetLocalization("Skill.Ranger.Skill111Tooltip").Value; // Ru: Дополнительная стрела при стрельбе из лука En: +1 arrow projectile
            _ = this.GetLocalization("Skill.Ranger.Skill112Tooltip").Value; // Ru: Все пули дважды отражаются от поверхностей перед уничтожением En: All bullets bounce two times before destruction
            _ = this.GetLocalization("Skill.Ranger.Skill113Tooltip").Value; // Ru: +25% к урону взрывчаткой (не ракетами) En: +25% explosion damage (except rockets)
            _ = this.GetLocalization("Skill.Ranger.Skill114Tooltip").Value; // Ru: Увеличение скорости полета стрел En: Increased arrow velocity
            _ = this.GetLocalization("Skill.Ranger.Skill115Tooltip").Value; // Ru: Все пули взрываются при попадании En: All bullets explode on impact
            _ = this.GetLocalization("Skill.Ranger.Skill116Tooltip").Value; // Ru: +10 защиты, если у игрока в руках ракетница En: +10 defense when holding a rocket launcher
            _ = this.GetLocalization("Skill.Ranger.Skill117Tooltip").Value; // Ru: Увеличение урона от стрел En: Increased arrow damage
            _ = this.GetLocalization("Skill.Ranger.Skill118Tooltip").Value; // Ru: Увеличение урона от пуль En: Increased bullet damage
            _ = this.GetLocalization("Skill.Ranger.Skill119Tooltip").Value; // Ru: Увеличение урона от ракет En: Increased rocket damage
            _ = this.GetLocalization("Skill.Ranger.Skill120Tooltip").Value; // Ru: Все снаряды стрелка самонаводятся на врагов En: All ranged projectiles automatically lock onto the enemy
            _ = this.GetLocalization("Skill.Ranger.Skill121Tooltip").Value; // Ru: Все оружия стрелка имеют автоатаку, +30% к урону и крит. шансу стрелка, каждый выстрел замораживает противника En: All ranged weapons have auto-attack. +30% ranged damage and critical damage, every shot freezes the enemy
			#endregion
			#region Thrower's tooltips
			_ = this.GetLocalization("Skill.Thrower.Skill122Tooltip").Value; // Ru: +5% к урону метателя, -20% к иным типам урона En: +5% to thrown but -20% to other types of damages
            _ = this.GetLocalization("Skill.Thrower.Skill123Tooltip").Value; // Ru: +6% к урону метателя, +3% к крит. шансу метателя En: +6% thrown damage, +3% thrown critical strike chance
            _ = this.GetLocalization("Skill.Thrower.Skill124Tooltip").Value; // Ru: Все снаряды могут проходить сквозь блоки En: All projectiles can pass through blocks
            _ = this.GetLocalization("Skill.Thrower.Skill125Tooltip").Value; // Ru: Все снаряды могут проходить сквозь блоки En: All projectiles can pass through blocks
            _ = this.GetLocalization("Skill.Thrower.Skill126Tooltip").Value; // Ru: Все снаряды могут проходить сквозь блоки En: All projectiles can pass through blocks
            _ = this.GetLocalization("Skill.Thrower.Skill127Tooltip").Value; // Ru: +60% к урону и +30% к крит. шансу метателя, +35% к поглощению урона, но вы не можете двигаться En: +60% thrown damage, +30% thrown crit. +35% damage resistance, but you can't move
            _ = this.GetLocalization("Skill.Thrower.Skill128Tooltip").Value; // Ru: +50% к скорости броска, +60% к урону и +30% к крит. шансу метателя, +45% к поглощению урона, но вы не можете двигаться En: +60% thrown damage, +30% thrown crit, +50% thrown speed, +45% damage resistance, but you can't move
            _ = this.GetLocalization("Skill.Thrower.Skill129Tooltip").Value; // Ru: +50% к скорости броска, +60% к урону и +30% к крит. шансу метателя, +65% к поглощению урона, но вы не можете двигаться En: +60% thrown damage, +30% thrown crit, +50% thrown speed, +65% damage resistance, but you can't move
            _ = this.GetLocalization("Skill.Thrower.Skill130Tooltip").Value; // Ru: Увеличение скорости броска снарядов En: Increased velocity of thrown projectiles
            _ = this.GetLocalization("Skill.Thrower.Skill131Tooltip").Value; // Ru: Увеличение урона метателя En: Increased thrown damage
            _ = this.GetLocalization("Skill.Thrower.Skill132Tooltip").Value; // Ru: +20% к урону взрывами, Взрывчатка стоит на 40% дешевле En: +20% explosive damage. Explosives cost 40% less
            _ = this.GetLocalization("Skill.Thrower.Skill133Tooltip").Value; // Ru: 15%-й бонус к получаемому опыту En: 15% experience bonus
            _ = this.GetLocalization("Skill.Thrower.Skill134Tooltip").Value; // Ru: Увеличение количества восстанавливаемой маны и здоровья на 25% En: +25% MP and HP from potions
            _ = this.GetLocalization("Skill.Thrower.Skill135Tooltip").Value; // Ru: +2 хп/сек и +10 к макс. здоровью за каждый бафф En: 2 HP/sec, +10HP for every buff
            _ = this.GetLocalization("Skill.Thrower.Skill136Tooltip").Value; // Ru: 35% шанс отразить снаряд En: 35% chance to reflect projectiles
            _ = this.GetLocalization("Skill.Thrower.Skill137Tooltip").Value; // Ru: 20% шанс не потратить метательный снаряд En: 20% chance to not consume thrown item
            _ = this.GetLocalization("Skill.Thrower.Skill138Tooltip").Value; // Ru: После активации этого умения начинается метеоритный дождь из 15 метеоритов En: Activating this skill summons a rain of 15 meteorites
            _ = this.GetLocalization("Skill.Thrower.Skill139Tooltip").Value; // Ru: +15% к крит. шансу и +30% к крит. урону метателя En: +15% thrown critical chance, +30% thrown critical damage
            _ = this.GetLocalization("Skill.Thrower.Skill140Tooltip").Value; // Ru: Увеличение урона одноразового метательного оружия на 25% En: All consumable thrown weapons get +25% damage
            _ = this.GetLocalization("Skill.Thrower.Skill141Tooltip").Value; // Ru: После активации этого умения начинается метеоритный дождь из 35 метеоритов En: Activating this skill summons a rain of 35 meteorites
            _ = this.GetLocalization("Skill.Thrower.Skill142Tooltip").Value; // Ru: Увеличение скорости метательных снарядов на 5 секунд после крита En: x2 thrown velocity for 5 sec after a critical hit
            _ = this.GetLocalization("Skill.Thrower.Skill143Tooltip").Value; // Ru: Увеличение скорости броска одноразового метательного оружия на 40%, такое оружие может пробивать неограниченное число врагов En: Consumable thrown weapons can punch through an infinite number of enemies and get a +40% thrown velocity bonus
            _ = this.GetLocalization("Skill.Thrower.Skill144Tooltip").Value; // Ru: Три кинжала летят в место нанесения урона En: Three daggers will fly in the place you dealt damage
            _ = this.GetLocalization("Skill.Thrower.Skill146Tooltip").Value; // Ru: Дополнительный слот для аксессуара En: +1 accessory slot
            _ = this.GetLocalization("Skill.Thrower.Skill147Tooltip").Value; // Ru: +25% к урону, крит. шансу и крит. урону метателя, 30% шанс не потратить снаряд, +10 защиты En: +25% thrown damage, crit chance and crit damage, 30% chance to not consume thrown item, +10 defence
            #endregion
            #region skill's tooltips
            _ = this.GetLocalization("Skill.ActiveSkill").Value; // Ru: Активное умение En: Active skill
            _ = this.GetLocalization("Skill.SecondsDuration").Value; // Ru: {0} секунд En: {0} seconds
            _ = this.GetLocalization("Skill.ActileSkillText").Value; // Ru: Длительность - {0}, откат - {1} En: {0} duration, {1} cooldown
            _ = this.GetLocalization("Skill.SkillLevel").Value; // Ru: Текущий уровень умения: {0}/{1} En: Current skill level: {0}/{1}
            _ = this.GetLocalization("Skill.MinutesDuration").Value; // Ru: {0} минут En: {0} minutes

            _ = this.GetLocalization("Skill.ActiveSkillUpgrade").Value; // Ru: Улучшение активного умения En: Active skill upgrade
            _ = this.GetLocalization("Skill.UniqueAbility").Value; // Ru: Уникальная способность En: Unique ability
            _ = this.GetLocalization("Skill.UniqueAbilityUpgrade").Value; // Ru: Улучшение уникальной способности En: Unique ability upgrades
            _ = this.GetLocalization("Skill.CantUpgrade").Value; // Ru: Вы не можете изучить это умение, так как вы уже изучили '{0}' En: You can't upgrade this skill, because you already have '{0}'
            _ = this.GetLocalization("Skill.SkillLevelBonus").Value; // Ru: {0} на следующем уровне En: {0} on next level
            _ = this.GetLocalization("Skill.HPBonus").Value; // Ru: +{0} макс. здоровья En: +{0} hp
            _ = this.GetLocalization("Skill.PassiveSkill").Value; // Ru: Пассивное умение En: Passive skill
            _ = this.GetLocalization("Skill.SkillRequired").Value; // Ru: Требуется изучить '{0}', чтобы разблокировать это умение En: You need to learn '{0}' to unlock this skill
            _ = this.GetLocalization("Skill.SPRequired").Value; // Ru: Требуется {0} очков умений En: {0} skill points required
            _ = this.GetLocalization("Skill.UpgratedSkill").Value; // Ru: Умение уже было изучено En: This skill has already been learned
            _ = this.GetLocalization("Skill.UpgratedSkillMaxLevel").Value; // Ru: Вами изучен последний уровень умения! En: You have reached the maximum level of this skill!
            _ = this.GetLocalization("Skill.SkillOrRequired").Value; // Ru: Требуется изучить '{0}' или '{1}', чтобы разблокировать это умение En: You need to learn '{0}' or '{1}' to unlock this skill
            _ = this.GetLocalization("Skill.DefenceBonus").Value; // Ru: +{0} защиты En: +{0} defense
            _ = this.GetLocalization("Skill.DamageReflectionBonus").Value; // Ru: +{0}% отражения урона En: +{0}% damage reflection
            _ = this.GetLocalization("Skill.MeleeSpeedBonus").Value; // Ru: +{0}% скорости ближнего боя En: +{0}% melee speed
            _ = this.GetLocalization("Skill.MeleeDamageBonus").Value; // Ru: +{0}% к урону в ближнем бою En: +{0}% melee damage
            _ = this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value; // Ru: +{0}% к урону миньонов En: +{0}% minion damage
            _ = this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value; // Ru: +{0} к максимальному числу миньонов En: max minion amount +{0}
            _ = this.GetLocalization("Skill.Wizard.ManaCostBonus").Value; // Ru: -{0}% к стоимости заклинаний En: -{0}% spell cost
            _ = this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value; // Ru: +{0}% к магическому урону En: +{0}% magic damage
            _ = this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value; // Ru: x{0} к регенерации маны En: x{0} mana regeneration
            _ = this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value; // Ru: +{0}% к скорости перемещения En: +{0}% movement speed
            _ = this.GetLocalization("Skill.Assassin.AllCritBonus").Value; // Ru: +{0}% к шансу крит. урона любого класса En: +{0}% to critical strike chance of any class
            _ = this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value; // Ru: +{0}% к урону головореза En: +{0}% assassin damages
            _ = this.GetLocalization("Skill.Ranger.RangedCritBonus").Value; // Ru: +{0}% к шансу крит. урона стрелка En: +{0}% ranged crit chance
            _ = this.GetLocalization("Skill.Ranger.MoneyBonus").Value; // Ru: +{0}% больше денег после убийства En: +{0}% money after killing an enemy
            _ = this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value; // Ru: Использование оружия стрелка на {0}% быстрее En: {0}% ranged weapon use speed
            _ = this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value; // Ru: +{0}% к урону стрелка En: +{0}% ranged damage
            _ = this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value; // Ru: +{0}% к скорости полета стрел En: +{0}% arrow velocitys
            _ = this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value; // Ru: +{0}% к урону стрел En: +{0}% arrow damages
            _ = this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value; // Ru: +{0}% к урону пуль En: +{0}% bullet damage
            _ = this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value; // Ru: +{0}% к урону ракет En: +{0}% rocket damage
            _ = this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value; // Ru: +{0}% к скорости броска снарядов En: +{0}% throwing velocity
            _ = this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value; // Ru: +{0}% к урону метателя En: +{0}% thrown damage
            _ = this.GetLocalization("Skill.FinalSkill").Value; // Ru: Заключительное умение En: Final skill

            _ = this.GetLocalization("Skill.DefeatEoC").Value; // Ru: Убейте Глаз Ктулху, чтобы изучить это умение En: Defeat the Eye of Cthulhu to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatWoB").Value; // Ru: Убейте Пожирателя Миров или мозг Ктулху, чтобы изучить это умение En: Defeat the Eater of Worlds or the Brain of Cthulhu to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatSkeletron").Value; // Ru: Убейте Скелетрона, чтобы изучить это умение En: Defeat Skeletron to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatWoF").Value; // Ru: Убейте Стену Плоти, чтобы изучить это умение En: Defeat the Wall of Flesh to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatAnyMech").Value; //Ru: Убейте любого механического босса, чтобы изучить это умение En: Defeat any mechanic boss to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatPlantera").Value; // Ru: Убейте Плантеру, чтобы изучить это умение En: Defeat Plantera to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatGolem").Value; // Ru: Убейте Голема, чтобы изучить это умение En: Defeat the Golem to upgrade this skill
            _ = this.GetLocalization("Skill.DefeatCultist").Value; // Ru: Убейте Культиста-лунатика, чтобы изучить это умение En: Defeat the Lunatic Cultist to upgrade this skill
            #endregion
        }
        bool CheckPointInRect(Vector2 point, Vector2 rectstart, int width, int height)
        {
            if (point.X > rectstart.X && point.X < rectstart.X + width && point.Y > rectstart.Y && point.Y < rectstart.Y + height)
                return true;
            else
                return false;
        }
        #region Skills
        public void DrawWarriorTree(SpriteBatch sb)
        {
            #region String Warrior
            string Skill1Name = this.GetLocalization("Skill.Skill1Name").Value;
            string Skill2Name = this.GetLocalization("Skill.Skill2Name").Value;
            string Skill3Name = this.GetLocalization("Skill.Skill3Name").Value;
            string Skill4Name = this.GetLocalization("Skill.Skill4Name").Value;
            string Skill5Name = this.GetLocalization("Skill.Skill5Name").Value;
            string Skill6Name = this.GetLocalization("Skill.Skill6Name").Value;
            string Skill7Name = this.GetLocalization("Skill.Skill7Name").Value;
            string Skill8Name = this.GetLocalization("Skill.Skill8Name").Value;
            string Skill9Name = this.GetLocalization("Skill.Skill9Name").Value;
            string Skill10Name = this.GetLocalization("Skill.Skill10Name").Value;
            string Skill11Name = this.GetLocalization("Skill.Skill11Name").Value;
            string Skill12Name = this.GetLocalization("Skill.Skill12Name").Value;
            string Skill13Name = this.GetLocalization("Skill.Skill13Name").Value;
            string Skill14Name = this.GetLocalization("Skill.Skill14Name").Value;
            string Skill15Name = this.GetLocalization("Skill.Skill15Name").Value;
            string Skill16Name = this.GetLocalization("Skill.Skill16Name").Value;
            string Skill17Name = this.GetLocalization("Skill.Skill17Name").Value;
            string Skill18Name = this.GetLocalization("Skill.Skill18Name").Value;
            string Skill19Name = this.GetLocalization("Skill.Skill19Name").Value;
            string Skill20Name = this.GetLocalization("Skill.Skill20Name").Value;
            string Skill21Name = this.GetLocalization("Skill.Skill21Name").Value;
            string Skill22Name = this.GetLocalization("Skill.Skill22Name").Value;
            string Skill23Name = this.GetLocalization("Skill.Skill23Name").Value;
            string Skill24Name = this.GetLocalization("Skill.Skill24Name").Value;
            string Skill25Name = this.GetLocalization("Skill.Skill25Name").Value;
            string Skill26Name = this.GetLocalization("Skill.Skill26Name").Value;
            string Skill27Name = this.GetLocalization("Skill.Skill27Name").Value;
            string Skill28Name = this.GetLocalization("Skill.Skill28Name").Value;
            string Skill29Name = this.GetLocalization("Skill.Skill29Name").Value;
            string Skill30Name = this.GetLocalization("Skill.Skill30Name").Value;
            string Skill31Name = this.GetLocalization("Skill.Skill31Name").Value;
            string Skill32Name = this.GetLocalization("Skill.Skill32Name").Value;
            string Skill33Name = this.GetLocalization("Skill.Skill33Name").Value;
            string Skill34Name = this.GetLocalization("Skill.Skill34Name").Value;
            string Skill35Name = this.GetLocalization("Skill.Skill35Name").Value;
            string Skill36Name = this.GetLocalization("Skill.Skill36Name").Value;

            string Skill1Tooltip = this.GetLocalization("Skill.Skill1Tooltip").Value;
            string Skill2Tooltip = this.GetLocalization("Skill.Skill2Tooltip").Value;
            string Skill3Tooltip = this.GetLocalization("Skill.Skill3Tooltip").Value;
            string Skill4Tooltip = this.GetLocalization("Skill.Skill4Tooltip").Value;
            string Skill5Tooltip = this.GetLocalization("Skill.Skill5Tooltip").Value;
            string Skill6Tooltip = this.GetLocalization("Skill.Skill6Tooltip").Value;
            string Skill7Tooltip = this.GetLocalization("Skill.Skill7Tooltip").Value;
            string Skill8Tooltip = this.GetLocalization("Skill.Skill8Tooltip").Value;
            string Skill9Tooltip = this.GetLocalization("Skill.Skill9Tooltip").Value;
            string Skill10Tooltip = this.GetLocalization("Skill.Skill10Tooltip").Value;
            string Skill11Tooltip = this.GetLocalization("Skill.Skill11Tooltip").Value;
            string Skill12Tooltip = this.GetLocalization("Skill.Skill12Tooltip").Value;
            string Skill13Tooltip = this.GetLocalization("Skill.Skill13Tooltip").Value;
            string Skill14Tooltip = this.GetLocalization("Skill.Skill14Tooltip").Value;
            string Skill15Tooltip = this.GetLocalization("Skill.Skill15Tooltip").Value;
            string Skill16Tooltip = this.GetLocalization("Skill.Skill16Tooltip").Value;
            string Skill17Tooltip = this.GetLocalization("Skill.Skill17Tooltip").Value;
            string Skill18Tooltip = this.GetLocalization("Skill.Skill18Tooltip").Value;
            string Skill19Tooltip = this.GetLocalization("Skill.Skill19Tooltip").Value;
            string Skill20Tooltip = this.GetLocalization("Skill.Skill20Tooltip").Value;
            string Skill21Tooltip = this.GetLocalization("Skill.Skill21Tooltip").Value;
            string Skill22Tooltip = this.GetLocalization("Skill.Skill22Tooltip").Value;
            string Skill23Tooltip = this.GetLocalization("Skill.Skill23Tooltip").Value;
            string Skill24Tooltip = this.GetLocalization("Skill.Skill24Tooltip").Value;
            string Skill25Tooltip = this.GetLocalization("Skill.Skill25Tooltip").Value;
            string Skill26Tooltip = this.GetLocalization("Skill.Skill26Tooltip").Value;
            string Skill27Tooltip = this.GetLocalization("Skill.Skill2&Tooltip").Value;
            string Skill28Tooltip = this.GetLocalization("Skill.Skill28Tooltip").Value;
            string Skill29Tooltip = this.GetLocalization("Skill.Skill29Tooltip").Value;
            string Skill30Tooltip = this.GetLocalization("Skill.Skill30Tooltip").Value;
            string Skill31Tooltip = this.GetLocalization("Skill.Skill31Tooltip").Value;
            string Skill32Tooltip = this.GetLocalization("Skill.Skill32Tooltip").Value;
            string Skill33Tooltip = this.GetLocalization("Skill.Skill33Tooltip").Value;
            string Skill34Tooltip = this.GetLocalization("Skill.Skill34Tooltip").Value;
            string Skill35Tooltip = this.GetLocalization("Skill.Skill35Tooltip").Value;
            string Skill36Tooltip = this.GetLocalization("Skill.Skill36Tooltip").Value;

            string ActiveSkill = this.GetLocalization("Skill.ActiveSkill").Value;
            string ActileSkillText = this.GetLocalization("Skill.ActileSkillText").Value;
            string SecondsDuration = this.GetLocalization("Skill.SecondsDuration").Value;
            string MinutesDuration = this.GetLocalization("Skill.MinutesDuration").Value;

            string CantUpgrade = this.GetLocalization("Skill.CantUpgrade").Value;
            string ActiveSkillUpgrade = this.GetLocalization("Skill.ActiveSkillUpgrade").Value;
            string PassiveSkill = this.GetLocalization("Skill.PassiveSkill").Value;
            string SkillLevelBonus = this.GetLocalization("Skill.SkillLevelBonus").Value;
            string HPBonus = this.GetLocalization("Skill.HPBonus").Value;
            string SkillLevel = this.GetLocalization("Skill.SkillLevel").Value;
            string SPRequired = this.GetLocalization("Skill.SPRequired").Value;
            string UpgratedSkill = this.GetLocalization("Skill.UpgratedSkill").Value;
            string SkillRequired = this.GetLocalization("Skill.SkillRequired").Value;
            string UpgratedSkillMaxLevel = this.GetLocalization("Skill.UpgratedSkillMaxLevel").Value;
            string SkillOrRequired = this.GetLocalization("Skill.SkillOrRequired").Value;
            string DefenceBonus = this.GetLocalization("Skill.DefenceBonus").Value;
            string DamageReflectionBonus = this.GetLocalization("Skill.DamageReflectionBonus").Value;
            string MeleeSpeedBonus = this.GetLocalization("Skill.MeleeSpeedBonus").Value;
            string MeleeDamageBonus = this.GetLocalization("Skill.MeleeDamageBonus").Value;
            string FinalSkill = this.GetLocalization("Skill.FinalSkill").Value;

            string DefeatWoB = this.GetLocalization("Skill.DefeatWoB").Value;
            string DefeatEoC = this.GetLocalization("Skill.DefeatEoC").Value;
            string DefeatSkeletron = this.GetLocalization("Skill.DefeatSkeletron").Value;
            string DefeatWoF = this.GetLocalization("Skill.DefeatWoF").Value;
            string DefeatAnyMech = this.GetLocalization("Skill.DefeatAnyMech").Value;
            string DefeatPlantera = this.GetLocalization("Skill.DefeatPlantera").Value;
            string DefeatGolem = this.GetLocalization("Skill.DefeatGolem").Value;
            string DefeatCultist = this.GetLocalization("Skill.DefeatCultist").Value;

            string fullText2 = string.Format(SkillRequired, Skill1Name);
            string fullText3 = string.Format(SkillLevel, skill3lvl, skill3lvlmax);
            string fullText3_1 = string.Format(SkillRequired, Skill2Name);
            string fullText4 = string.Format(SkillRequired, Skill3Name);      
            string fullText4_1 = string.Format(CantUpgrade, Skill22Name);
            string fullText5 = string.Format(SkillRequired, Skill4Name);
            string fullText6 = string.Format(SkillRequired, Skill5Name);
            string fullText6_1 = string.Format(CantUpgrade, Skill7Name);
            string fullText6_2 = string.Format(CantUpgrade, Skill22Name);
            string fullText7 = string.Format(SkillRequired, Skill5Name);
            string fullText7_1 = string.Format(CantUpgrade, Skill6Name);
            string fullText7_2 = string.Format(CantUpgrade, Skill22Name);
            string fullText8 = string.Format(SkillLevel, skill8lvl, skill8lvlmax);
            string fullText8_1 = string.Format(SkillRequired, Skill3Name);
            string fullText9 = string.Format(SkillRequired, Skill8Name);
            string fullText10 = string.Format(SkillRequired, Skill8Name);
            string fullText11 = string.Format(SkillRequired, Skill9Name);
            string fullText12 = string.Format(SkillRequired, Skill10Name);
            string fullText13 = string.Format(SkillOrRequired, Skill11Name, Skill12Name);
            string fullText14 = string.Format(SkillRequired, Skill13Name);
            string fullText14_1 = string.Format(CantUpgrade, Skill33Name);
            string fullText15 = string.Format(SkillRequired, Skill14Name);
            string fullText15_1 = string.Format(CantUpgrade, Skill22Name);
            string fullText16 = string.Format(SkillRequired, Skill13Name);
            string fullText16_1 = string.Format(CantUpgrade, Skill35Name);
            string fullText17 = string.Format(SkillLevel, skill17lvl, skill17lvlmax);
            string fullText17_1 = string.Format(SkillRequired, Skill2Name);
            string fullText18 = string.Format(SkillRequired, Skill1Name);
            string fullText19 = string.Format(SkillRequired, Skill18Name);
            string fullText19_1 = string.Format(CantUpgrade, Skill20Name);
            string fullText20 = string.Format(SkillRequired, Skill18Name);
            string fullText20_1 = string.Format(CantUpgrade, Skill19Name);
            string fullText21 = string.Format(SkillLevel, skill21lvl, skill21lvlmax);
            string fullText21_1 = string.Format(SkillOrRequired, Skill19Name, Skill20Name);
            string fullText22 = string.Format(SkillRequired, Skill21Name);
            string fullText22_1 = string.Format(CantUpgrade, Skill4Name);
            string fullText23 = string.Format(SkillRequired, Skill22Name);
            string fullText23_1 = string.Format(CantUpgrade, Skill4Name);
            string fullText24 = string.Format(SkillRequired, Skill23Name);
            string fullText24_1 = string.Format(CantUpgrade, Skill4Name);
            string fullText25 = string.Format(SkillLevel, skill25lvl, skill25lvlmax);
            string fullText25_1 = string.Format(SkillRequired, Skill21Name);
            string fullText26 = string.Format(SkillRequired, Skill25Name);
            string fullText27 = string.Format(SkillRequired, Skill26Name);
            string fullText28 = string.Format(SkillRequired, Skill26Name);
            string fullText29 = string.Format(SkillOrRequired, Skill27Name, Skill28Name);
            string fullText30 = string.Format(SkillRequired, Skill29Name);
            string fullText31 = string.Format(SkillRequired, Skill29Name);
            string fullText32 = string.Format(SkillOrRequired, Skill30Name, Skill31Name);
            string fullText33 = string.Format(SkillRequired, Skill32Name);
            string fullText33_1 = string.Format(CantUpgrade, Skill14Name);
            string fullText34 = string.Format(SkillRequired, Skill33Name);
            string fullText34_1 = string.Format(CantUpgrade, Skill14Name);
            string fullText35 = string.Format(SkillRequired, Skill32Name);
            string fullText35_1 = string.Format(CantUpgrade, Skill16Name);
            #endregion
            bool MouseInFrame = Main.mouseX > Quests.FrameStart.X && Main.mouseX < Quests.FrameStart.X + Quests.FrameWidth && Main.mouseY > Quests.FrameStart.Y && Main.mouseY < Quests.FrameStart.Y + Quests.FrameHeight;
            #region update position
            skill1X = (int)(Quests.treecoord.X + 308);
            skill1Y = (int)(Quests.treecoord.Y + 6);
            skill2X = (int)(Quests.treecoord.X + 392);
            skill2Y = (int)(Quests.treecoord.Y + 76);
            skill3X = (int)(Quests.treecoord.X + 423);
            skill3Y = (int)(Quests.treecoord.Y + 182);
            skill4X = (int)(Quests.treecoord.X + 536);
            skill4Y = (int)(Quests.treecoord.Y + 210);
            skill5X = (int)(Quests.treecoord.X + 649);
            skill5Y = (int)(Quests.treecoord.Y + 234);
            skill6X = (int)(Quests.treecoord.X + 709);
            skill6Y = (int)(Quests.treecoord.Y + 155);
            skill7X = (int)(Quests.treecoord.X + 709);
            skill7Y = (int)(Quests.treecoord.Y + 313);
            skill8X = (int)(Quests.treecoord.X + 439);
            skill8Y = (int)(Quests.treecoord.Y + 307);
            skill9X = (int)(Quests.treecoord.X + 453);
            skill9Y = (int)(Quests.treecoord.Y + 431);
            skill10X = (int)(Quests.treecoord.X + 549);
            skill10Y = (int)(Quests.treecoord.Y + 431);
            skill11X = (int)(Quests.treecoord.X + 437);
            skill11Y = (int)(Quests.treecoord.Y + 563);
            skill12X = (int)(Quests.treecoord.X + 565);
            skill12Y = (int)(Quests.treecoord.Y + 563);
            skill13X = (int)(Quests.treecoord.X + 502);
            skill13Y = (int)(Quests.treecoord.Y + 677);
            skill14X = (int)(Quests.treecoord.X + 590);
            skill14Y = (int)(Quests.treecoord.Y + 749);
            skill15X = (int)(Quests.treecoord.X + 703);
            skill15Y = (int)(Quests.treecoord.Y + 787);
            skill16X = (int)(Quests.treecoord.X + 502);
            skill16Y = (int)(Quests.treecoord.Y + 788);
            skill17X = (int)(Quests.treecoord.X + 525);
            skill17Y = (int)(Quests.treecoord.Y + 106);
            skill18X = (int)(Quests.treecoord.X + 224);
            skill18Y = (int)(Quests.treecoord.Y + 74);
            skill19X = (int)(Quests.treecoord.X + 176);
            skill19Y = (int)(Quests.treecoord.Y + 176);
            skill20X = (int)(Quests.treecoord.X + 276);
            skill20Y = (int)(Quests.treecoord.Y + 176);
            skill21X = (int)(Quests.treecoord.X + 226);
            skill21Y = (int)(Quests.treecoord.Y + 265);
            skill22X = (int)(Quests.treecoord.X + 139);
            skill22Y = (int)(Quests.treecoord.Y + 311);
            skill23X = (int)(Quests.treecoord.X + 111);
            skill23Y = (int)(Quests.treecoord.Y + 415);
            skill24X = (int)(Quests.treecoord.X + 7);
            skill24Y = (int)(Quests.treecoord.Y + 439);
            skill25X = (int)(Quests.treecoord.X + 268);
            skill25Y = (int)(Quests.treecoord.Y + 357);
            skill26X = (int)(Quests.treecoord.X + 246);
            skill26Y = (int)(Quests.treecoord.Y + 471);
            skill27X = (int)(Quests.treecoord.X + 194);
            skill27Y = (int)(Quests.treecoord.Y + 571);
            skill28X = (int)(Quests.treecoord.X + 294);
            skill28Y = (int)(Quests.treecoord.Y + 571);
            skill29X = (int)(Quests.treecoord.X + 246);
            skill29Y = (int)(Quests.treecoord.Y + 667);
            skill30X = (int)(Quests.treecoord.X + 185);
            skill30Y = (int)(Quests.treecoord.Y + 765);
            skill31X = (int)(Quests.treecoord.X + 309);
            skill31Y = (int)(Quests.treecoord.Y + 765);
            skill32X = (int)(Quests.treecoord.X + 246);
            skill32Y = (int)(Quests.treecoord.Y + 840);
            skill33X = (int)(Quests.treecoord.X + 163);
            skill33Y = (int)(Quests.treecoord.Y + 909);
            skill34X = (int)(Quests.treecoord.X + 68);
            skill34Y = (int)(Quests.treecoord.Y + 909);
            skill35X = (int)(Quests.treecoord.X + 304);
            skill35Y = (int)(Quests.treecoord.Y + 928);
            #endregion
            #region update colors

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill2X, skill2Y), 56, 56) || skill1lvl >= 1)
            {
                skill2color = Color.White;
            }
            else
                skill2color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill3X, skill3Y), 56, 56) || skill2lvl >= 1)
            {
                skill3color = Color.White;
            }
            else
                skill3color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill4X, skill4Y), 56, 56) || skill3lvl >= 1)
            {
                skill4color = Color.White;
            }
            else
                skill4color = Color.Gray;
            if (skill22lvl >= 1)
                skill4color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill5X, skill5Y), 56, 56) || skill4lvl >= 1)
            {
                skill5color = Color.White;
            }
            else
                skill5color = Color.Gray;
            if (skill22lvl >= 1)
                skill5color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill6X, skill6Y), 56, 56) || skill5lvl >= 1)
            {
                skill6color = Color.White;
            }
            else
                skill6color = Color.Gray;         
            if (skill7lvl >= 1)
                skill6color = Color.Gray;
            if (skill22lvl >= 1)
                skill6color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill7X, skill7Y), 56, 56) || skill5lvl >= 1)
            {
                skill7color = Color.White;
            }
            else
                skill7color = Color.Gray;         
            if (skill6lvl >= 1)
                skill7color = Color.Gray;
            if (skill22lvl >= 1)
                skill7color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill8X, skill8Y), 56, 56) || skill3lvl >= 1)
            {
                skill8color = Color.White;
            }
            else
                skill8color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill9X, skill9Y), 56, 56) || skill8lvl >= 1)
            {
                skill9color = Color.White;
            }
            else
                skill9color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill10X, skill10Y), 56, 56) || skill8lvl >= 1)
            {
                skill10color = Color.White;
            }
            else
                skill10color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill11X, skill11Y), 56, 56) || skill9lvl >= 1)
            {
                skill11color = Color.White;
            }
            else
                skill11color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill12X, skill12Y), 56, 56) || skill10lvl >= 1)
            {
                skill12color = Color.White;
            }
            else
                skill12color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill13X, skill13Y), 56, 56))
            {
                skill13color = Color.White;
            }
            else
                skill13color = Color.Gray;
            if (skill11lvl >= 1 || skill12lvl >= 1)
            {
                skill13color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill14X, skill14Y), 56, 56) || skill13lvl >= 1)
            {
                skill14color = Color.White;
            }
            else
                skill14color = Color.Gray;
            if (skill33lvl >= 1)
                skill14color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill15X, skill15Y), 56, 56) || skill14lvl >= 1)
            {
                skill15color = Color.White;
            }
            else
                skill15color = Color.Gray;
            if (skill33lvl >= 1)
                skill15color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill16X, skill16Y), 56, 56) || skill13lvl >= 1)
            {
                skill16color = Color.White;
            }
            else
                skill16color = Color.Gray;
            if (skill33lvl >= 1)
                skill16color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill17X, skill17Y), 56, 56) || skill2lvl >= 1)
            {
                skill17color = Color.White;
            }
            else
                skill17color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill18X, skill18Y), 56, 56) || skill1lvl >= 1)
            {
                skill18color = Color.White;
            }
            else
                skill18color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill19X, skill19Y), 56, 56) || skill18lvl >= 1)
            {
                skill19color = Color.White;
            }
            else
                skill19color = Color.Gray;
            if (skill20lvl >= 1)
                skill19color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill20X, skill20Y), 56, 56) || skill18lvl >= 1)
            {
                skill20color = Color.White;
            }
            else
                skill20color = Color.Gray;
            if (skill19lvl >= 1)
                skill20color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill21X, skill21Y), 56, 56))
            {
                skill21color = Color.White;
            }
            else
                skill21color = Color.Gray;
            if (skill19lvl >= 1 || skill20lvl >= 1)
            {
                skill21color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill22X, skill22Y), 56, 56) || skill21lvl >= 1)
            {
                skill22color = Color.White;
            }
            else
                skill22color = Color.Gray;
            if (skill4lvl >= 1)
                skill22color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill23X, skill23Y), 56, 56) || skill22lvl >= 1)
            {
                skill23color = Color.White;
            }
            else
                skill23color = Color.Gray;
            if (skill4lvl >= 1)
                skill23color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill24X, skill24Y), 56, 56) || skill23lvl >= 1)
            {
                skill24color = Color.White;
            }
            else
                skill24color = Color.Gray;
            if (skill4lvl >= 1)
                skill24color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill25X, skill25Y), 56, 56) || skill21lvl >= 1)
            {
                skill25color = Color.White;
            }
            else
                skill25color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill26X, skill26Y), 56, 56) || skill25lvl >= 1)
            {
                skill26color = Color.White;
            }
            else
                skill26color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill27X, skill27Y), 56, 56) || skill26lvl >= 1)
            {
                skill27color = Color.White;
            }
            else
                skill27color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill28X, skill28Y), 56, 56) || skill26lvl >= 1)
            {
                skill28color = Color.White;
            }
            else
                skill28color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill29X, skill29Y), 56, 56))
            {
                skill29color = Color.White;
            }
            else
                skill29color = Color.Gray;
            if (skill27lvl >= 1 && skill28lvl >= 1)
            {
                skill29color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill30X, skill30Y), 56, 56) || skill27lvl >= 1)
            {
                skill30color = Color.White;
            }
            else
                skill30color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill31X, skill31Y), 56, 56) || skill28lvl >= 1)
            {
                skill31color = Color.White;
            }
            else
                skill31color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill32X, skill32Y), 56, 56))
            {
                skill32color = Color.White;
            }
            else
                skill32color = Color.Gray;
            if (skill31lvl >= 1 || skill30lvl >= 1)
            {
                skill32color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill33X, skill33Y), 56, 56) || skill32lvl >= 1)
            {
                skill33color = Color.White;
            }
            else
                skill33color = Color.Gray;
            if (skill14lvl >= 1)
                skill33color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill34X, skill34Y), 56, 56) || skill33lvl >= 1)
            {
                skill34color = Color.White;
            }
            else
                skill34color = Color.Gray;
            if (skill14lvl >= 1)
                skill34color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill35X, skill35Y), 56, 56) || skill32lvl >= 1)
            {
                skill35color = Color.White;
            }
            else
                skill35color = Color.Gray;
            #endregion
            #region skills draw         
            Quests.DrawPart(sb, skill1texture, new Vector2(skill1X, skill1Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill1color);
            Quests.DrawPart(sb, skill2texture, new Vector2(skill2X, skill2Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill2color);
            Quests.DrawPart(sb, skill3texture, new Vector2(skill3X, skill3Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill3color);
            Quests.DrawPart(sb, skill4texture, new Vector2(skill4X, skill4Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill4color);
            Quests.DrawPart(sb, skill5texture, new Vector2(skill5X, skill5Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill5color);
            Quests.DrawPart(sb, skill6texture, new Vector2(skill6X, skill6Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill6color);
            Quests.DrawPart(sb, skill7texture, new Vector2(skill7X, skill7Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill7color);
            Quests.DrawPart(sb, skill8texture, new Vector2(skill8X, skill8Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill8color);
            Quests.DrawPart(sb, skill9texture, new Vector2(skill9X, skill9Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill9color);
            Quests.DrawPart(sb, skill10texture, new Vector2(skill10X, skill10Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill10color);
            Quests.DrawPart(sb, skill11texture, new Vector2(skill11X, skill11Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill11color);
            Quests.DrawPart(sb, skill12texture, new Vector2(skill12X, skill12Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill12color);
            Quests.DrawPart(sb, skill13texture, new Vector2(skill13X, skill13Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill13color);
            Quests.DrawPart(sb, skill14texture, new Vector2(skill14X, skill14Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill14color);
            Quests.DrawPart(sb, skill15texture, new Vector2(skill15X, skill15Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill15color);
            Quests.DrawPart(sb, skill16texture, new Vector2(skill16X, skill16Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill16color);
            Quests.DrawPart(sb, skill17texture, new Vector2(skill17X, skill17Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill17color);
            Quests.DrawPart(sb, skill18texture, new Vector2(skill18X, skill18Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill18color);
            Quests.DrawPart(sb, skill19texture, new Vector2(skill19X, skill19Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill19color);
            Quests.DrawPart(sb, skill20texture, new Vector2(skill20X, skill20Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill20color);
            Quests.DrawPart(sb, skill21texture, new Vector2(skill21X, skill21Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill21color);
            Quests.DrawPart(sb, skill22texture, new Vector2(skill22X, skill22Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill22color);
            Quests.DrawPart(sb, skill23texture, new Vector2(skill23X, skill23Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill23color);
            Quests.DrawPart(sb, skill24texture, new Vector2(skill24X, skill24Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill24color);
            Quests.DrawPart(sb, skill25texture, new Vector2(skill25X, skill25Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill25color);
            Quests.DrawPart(sb, skill26texture, new Vector2(skill26X, skill26Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill26color);
            Quests.DrawPart(sb, skill27texture, new Vector2(skill27X, skill27Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill27color);
            Quests.DrawPart(sb, skill28texture, new Vector2(skill28X, skill28Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill28color);
            Quests.DrawPart(sb, skill29texture, new Vector2(skill29X, skill29Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill29color);
            Quests.DrawPart(sb, skill30texture, new Vector2(skill30X, skill30Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill30color);
            Quests.DrawPart(sb, skill31texture, new Vector2(skill31X, skill31Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill31color);
            Quests.DrawPart(sb, skill32texture, new Vector2(skill32X, skill32Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill32color);
            Quests.DrawPart(sb, skill33texture, new Vector2(skill33X, skill33Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill33color);
            Quests.DrawPart(sb, skill34texture, new Vector2(skill34X, skill34Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill34color);
            Quests.DrawPart(sb, skill35texture, new Vector2(skill35X, skill35Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill35color);
            #endregion
            #region update border
            if (skill1lvl == skill1lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill1X - 6, skill1Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill2lvl == skill2lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill2X - 6, skill2Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill3lvl == skill3lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill3X - 6, skill3Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill4lvl == skill4lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill4X - 6, skill4Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill5lvl == skill5lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill5X - 6, skill5Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill6lvl == skill6lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill6X - 6, skill6Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill7lvl == skill7lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill7X - 6, skill7Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill8lvl == skill8lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill8X - 6, skill8Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill9lvl == skill9lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill9X - 6, skill9Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill10lvl == skill10lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill10X - 6, skill10Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill11lvl == skill11lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill11X - 6, skill11Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill12lvl == skill12lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill12X - 6, skill12Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill13lvl == skill13lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill13X - 6, skill13Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill14lvl == skill14lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill14X - 6, skill14Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill15lvl == skill15lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill15X - 6, skill15Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill16lvl == skill16lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill16X - 6, skill16Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill17lvl == skill17lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill17X - 6, skill17Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill18lvl == skill18lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill18X - 6, skill18Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill19lvl == skill19lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill19X - 6, skill19Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill20lvl == skill20lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill20X - 6, skill20Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill21lvl == skill21lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill21X - 6, skill21Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill22lvl == skill22lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill22X - 6, skill22Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill23lvl == skill23lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill23X - 6, skill23Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill24lvl == skill24lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill24X - 6, skill24Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill25lvl == skill25lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill25X - 6, skill25Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill26lvl == skill26lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill26X - 6, skill26Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill27lvl == skill27lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill27X - 6, skill27Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill28lvl == skill28lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill28X - 6, skill28Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill29lvl == skill29lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill29X - 6, skill29Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill30lvl == skill30lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill30X - 6, skill30Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill31lvl == skill31lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill31X - 6, skill31Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill32lvl == skill32lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill32X - 6, skill32Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill33lvl == skill33lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill33X - 6, skill33Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill34lvl == skill34lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill34X - 6, skill34Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill35lvl == skill35lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill35X - 6, skill35Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill4lvl == skill4lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill22X, skill22Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill23X, skill23Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill24X, skill24Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill6lvl == skill6lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill7X, skill7Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill7lvl == skill7lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill6X, skill6Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill14lvl == skill14lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill33X, skill33Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill34X, skill34Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill19lvl == skill19lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill20X, skill20Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill20lvl == skill20lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill19X, skill19Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill22lvl == skill22lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill4X, skill4Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill5X, skill5Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill6X, skill6Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill7X, skill7Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }                     
            if (skill16lvl == skill16lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill35X, skill35Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill35lvl == skill35lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill16X, skill16Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill33lvl == skill33lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill14X, skill14Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill15X, skill15Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            #endregion
            #region skill mouse over and click           
            #region skill1
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill1X, skill1Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill1Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill1Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill1Tooltip, maxwidth);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);

                if (skill1lvl < skill1lvlmax)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), Main.mouseX + 44, offset + 4, SkillPoints < 1 ? Color.PaleVioletRed : Color.LightGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(SPRequired).Y * 0.9f;
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill1lvl < skill1lvlmax && SkillPoints >= 1)
                {                 
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill1lvl++;
                    SkillPoints--;
                    SpendedPoints++;
                }
            }
            #endregion           
            #region skill2
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill2X, skill2Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill2Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill2Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill2Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill2lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill1lvl < skill1lvlmax)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText2, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(fullText2).Y * 0.9f;
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill2lvl < skill2lvlmax && skill1lvl >= 1 && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill2lvl++;
                    SkillPoints--;
                    SpendedPoints++;
                }
            }
            #endregion
            #region skill3
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill3X, skill3Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill3Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill3Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill3Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText3, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText3).Y * 0.9f;
                switch (skill3lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(10)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(10)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill2lvl < skill2lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(15)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(15)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(25)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(25)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(25)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(25)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(40)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(40)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(60)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(60)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 6:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(80)), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(80)), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill3lvl < skill3lvlmax && skill2lvl >= 1)
                {
                    if (skill3lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints--;
                        SpendedPoints++;
                        // return;
                    }
                    else if (skill3lvl == 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints -= 1;
                        SpendedPoints++;
                    }
                    else if (skill3lvl == 2 && KilledSkeletron && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints -= 2;
                        SpendedPoints += 2;
                    }
                    else if (skill3lvl == 3 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints -= 2;
                        SpendedPoints += 2;
                    }
                    else if (skill3lvl == 4 && KilledAnyMechBoss && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints -= 3;
                        SpendedPoints += 3;
                    }
                    else if (skill3lvl == 5 && KilledPlantera && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints -= 4;
                        SpendedPoints += 4;
                    }
                    else if (skill3lvl == 6 && KilledGolem && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill3lvl++;
                        SkillPoints -= 4;
                        SpendedPoints += 4;
                    }
                }
            }
            #endregion
            #region skill4
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill4X, skill4Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill4Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill4Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill4Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = 0f;
                cantupgradepos = offset;

                if (skill22lvl == 0)
                {
                    if (skill4lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill3lvl < skill3lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText4, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWormorBrain)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill4lvl < skill4lvlmax && skill3lvl >= 1 && KilledWormorBrain && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill4lvl++;
                        SkillPoints -= 2;
                        SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

            }

            #endregion
            #region skill5
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill5X, skill5Y), 56, 56))
            {

                float cantupgradepos = 0f;
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill5Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill5Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill5Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(35)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(15))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(35)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(15))), maxwidth)).Y;
                cantupgradepos = offset;
                if (skill22lvl == 0)
                {
                    if (skill5lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill4lvl < skill4lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText5, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText5, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWoF)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill5lvl < skill5lvlmax && skill4lvl >= 1 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill5lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

            }
            #endregion
            #region skill6
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill6X, skill6Y), 56, 56))
             {
                float cantupgradepos = 0f;
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill6Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill6Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill6Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2))), maxwidth)).Y;
                cantupgradepos = offset;
                if (skill22lvl == 0)
                {
                    if (skill7lvl == 0)
                    {
                        if (skill6lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                            if (skill5lvl < skill5lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText6, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                        }
                        else
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                        }

                        if (Main.mouseLeft && Main.mouseLeftRelease && skill6lvl < skill6lvlmax && skill5lvl >= 1 && KilledPlantera && SkillPoints >= 3)
                        {
                            SoundEngine.PlaySound(SoundID.MenuOpen);
                            skill6lvl++;
                            SkillPoints -= 3; SpendedPoints += 3;
                        }
                    }
                    else
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6_2, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

            }
            #endregion
            #region skill7
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill7X, skill7Y), 56, 56))
            {
                float cantupgradepos = 0f;
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill7Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill7Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill7Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2))), maxwidth)).Y;
                cantupgradepos = offset;
                if (skill22lvl == 0)
                {
                    if (skill6lvl == 0)
                    {
                        if (skill7lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                            if (skill5lvl < skill5lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText7, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                        }
                        else
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                        }

                        if (Main.mouseLeft && Main.mouseLeftRelease && skill7lvl < skill7lvlmax && skill5lvl >= 1 && KilledPlantera && SkillPoints >= 3)
                        {
                            SoundEngine.PlaySound(SoundID.MenuOpen);
                            skill7lvl++;
                            SkillPoints -= 3; SpendedPoints += 3;
                        }
                    }
                    else
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7_2, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

            }
            #endregion
            #region skill8
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill8X, skill8Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill8Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill8Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill8Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText8, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText8).Y * 0.9f;
                switch (skill8lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(1))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(1))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill3lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText8_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText8_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DefenceBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f; 
                            break;
                        }
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill8lvl < skill8lvlmax && skill3lvl >= 1) // Без y - нет скобок, с - одна скобка
                {
                    if (skill8lvl == 0 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill8lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill8lvl == 1 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill8lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill8lvl == 2 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill8lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill8lvl == 3 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill8lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill8lvl == 4 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill8lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill8lvl == 5 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill8lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill9
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill9X, skill9Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill9Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill9Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill9Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill9lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill8lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText9, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText9, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill9lvl < skill9lvlmax && skill8lvl >= 1 && KilledSkeletron && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill9lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill10
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill10X, skill10Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill10Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill10Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill10Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill10lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill8lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText10, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText10, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill10lvl < skill10lvlmax && skill8lvl >= 1 && KilledSkeletron && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill10lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill11
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill11X, skill11Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill11Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill11Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill11Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill11lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill9lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText11, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText11, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill11lvl < skill11lvlmax && skill9lvl >= 1 && KilledWoF && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill11lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill12
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill12X, skill12Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill12Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill12Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill12Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill12lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill10lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText12, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText12, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill12lvl < skill12lvlmax && skill10lvl >= 1 && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill12lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                    BlockChanceForSkills += 5;
                }
            }
            #endregion
            #region skill13
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill13X, skill13Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill13Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill13Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill13Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill13lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill11lvl == 0 && skill12lvl == 0)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText13, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill13lvl < skill13lvlmax && (skill11lvl > 0 || skill12lvl > 0) && KilledAnyMechBoss && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill13lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill14
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill14X, skill14Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill14Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill14Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill14Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(7)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(7)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill33lvl == 0)
                {


                    if (skill14lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill13lvl < skill13lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText14, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText14, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledPlantera)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill14lvl < skill14lvlmax && skill13lvl >= 1 && KilledAnyMechBoss && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill14lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText14_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);


            }
            #endregion
            #region skill15
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill15X, skill15Y), 56, 56))
            {
                float cantupgradepos = 0f;
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill15Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill15Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill15Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(12)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(12)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth)).Y;
                cantupgradepos = offset;
                if (skill33lvl == 0)
                {

                    if (skill15lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill14lvl < skill14lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledCultist)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill15lvl < skill15lvlmax && skill14lvl >= 1 && KilledCultist && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill15lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill16
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill16X, skill16Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill16Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill16Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, FinalSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(FinalSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.Yellow, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill16Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                float cantupgradepos = offset;
                if (skill35lvl < 1)
                {
                    if (skill16lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 9 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9))).Y * 0.9f;
                        if (skill13lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText16, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledCultist)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

                if (Main.mouseLeft && Main.mouseLeftRelease && skill16lvl < skill16lvlmax && skill35lvl < 1 && skill13lvl >= 1 && KilledCultist && SkillPoints >= 9)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill16lvl++;
                    SkillPoints -= 9; SpendedPoints += 9;
                    BlockChanceForSkills += 7;
                }
            }
            #endregion
            #region skill17
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill17X, skill17Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill17Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill17Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill17Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText17, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText17).Y * 0.9f;
                switch (skill17lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DamageReflectionBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DamageReflectionBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill2lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText17_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText17_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DamageReflectionBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DamageReflectionBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.Bismuth.SPRequired").Value,Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DamageReflectionBonus").Value, Convert.ToString(7))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.DamageReflectionBonus").Value, Convert.ToString(7))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }

                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }


                if (Main.mouseLeft && Main.mouseLeftRelease && skill17lvl < skill17lvlmax && skill2lvl >= 1)
                {
                    if (skill17lvl == 0 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill17lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill17lvl == 1 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill17lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill17lvl == 2 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill17lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }

                }
            }
            #endregion
            #region skill18
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill18X, skill18Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill18Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill18Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill18Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill18lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill1lvl < skill1lvlmax)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText18, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(fullText18).Y * 0.9f;
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill18lvl < skill18lvlmax && skill1lvl >= 1 && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill18lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill19
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill19X, skill19Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill19Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill19Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill19Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                float cantupgradepos = offset;

                if (skill20lvl == 0)
                {
                    if (skill19lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill18lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText19, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText19, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledEoC)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText19_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

                if (Main.mouseLeft && Main.mouseLeftRelease && skill19lvl < skill19lvlmax && skill18lvl >= 1 && KilledEoC && skill20lvl < 1 && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill19lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill20
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill20X, skill20Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill20Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill20Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill20Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                float cantupgradepos = offset;

                if (skill19lvl == 0)
                {
                    if (skill20lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill18lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledEoC)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

                if (Main.mouseLeft && Main.mouseLeftRelease && skill20lvl < skill20lvlmax && skill18lvl >= 1 && KilledEoC && skill19lvl < 1 && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill20lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill21
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill21X, skill21Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill21Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill21Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill21Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText21, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText21).Y * 0.9f;
                switch (skill21lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill19lvl == 0 && skill20lvl == 0)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText21_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText21_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(8))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(8))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 6:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 7:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeSpeedBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 6 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledCultist)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill21lvl < skill21lvlmax && (skill19lvl > 0 || skill20lvl > 0))
                {
                    if (skill21lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill21lvl == 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill21lvl == 2 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill21lvl == 3 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill21lvl == 4 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill21lvl == 5 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill21lvl == 6 && KilledGolem && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                    else if (skill21lvl == 7 && KilledCultist && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill21lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
            }
            #endregion
            #region skill22
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill22X, skill22Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill22Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill22Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill22Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(10))), maxwidth)).Y;
                float cantupgradepos = 0f;
                cantupgradepos = offset;

                if (skill4lvl == 0)
                {
                    if (skill22lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill21lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText22, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWormorBrain)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill22lvl < skill22lvlmax && skill21lvl >= 1 && KilledWormorBrain && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill22lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill23
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill23X, skill23Y), 56, 56))
            {
                float cantupgradepos = 0f;
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill23Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill23Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill23Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(10))), maxwidth)).Y;
                cantupgradepos = offset;
                if (skill4lvl == 0)
                {

                    if (skill23lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill22lvl < skill22lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText23, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText23, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWoF)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill23lvl < skill5lvlmax && skill22lvl >= 1 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill23lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText23_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill24
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill24X, skill24Y), 56, 56))
            {
                float cantupgradepos = 0f;
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill24Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill24Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill24Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(10)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(10)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(10))), maxwidth)).Y;
                cantupgradepos = offset;
                if (skill4lvl == 0)
                {

                    if (skill24lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill23lvl < skill23lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText24, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText24, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledPlantera)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill24lvl < skill24lvlmax && skill23lvl >= 1 && KilledPlantera && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill24lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText24_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill25
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill25X, skill25Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill25Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill25Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill25Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText25, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText25).Y * 0.9f;
                switch (skill25lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill21lvl == 0)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText25_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText25_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.Bismuth.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.MeleeDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledCultist)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill25lvl < skill25lvlmax && skill21lvl >= 1)
                {
                    if (skill25lvl == 0 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill25lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill25lvl == 1 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill25lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill25lvl == 2 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill25lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill25lvl == 3 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill25lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill25lvl == 4 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill25lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill25lvl == 5 && KilledCultist && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill25lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill26
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill26X, skill26Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill26Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill26Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill26Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill26lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill25lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText26, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText26, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill26lvl < skill26lvlmax && skill25lvl >= 1 && KilledSkeletron && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill26lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill27
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill27X, skill27Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill27Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill27Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill27Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill27lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill26lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText27, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText27, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill27lvl < skill27lvlmax && skill26lvl >= 1 && KilledWoF && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill27lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }

            #endregion
            #region skill28
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill28X, skill28Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill28Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill28Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill28Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill28lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill26lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText28, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText28, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill28lvl < skill28lvlmax && skill26lvl >= 1 && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill28lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill29
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill29X, skill29Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill29Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill29Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill29Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill29lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill28lvl < 1 && skill27lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText29, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText29, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill29lvl < skill29lvlmax && (skill28lvl >= 1 || skill27lvl >= 1) && KilledAnyMechBoss && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill29lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill30
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill30X, skill30Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill30Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill30Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill30Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill30lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill27lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText30, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText30, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill30lvl < skill30lvlmax && skill29lvl >= 1 && KilledPlantera && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill30lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill31
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill31X, skill31Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill31Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill31Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill31Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill31lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill28lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText31, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText31, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill31lvl < skill31lvlmax && skill29lvl >= 1 && KilledPlantera && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill31lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill32
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill32X, skill32Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill32Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill32Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill32Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                bool check = skill30lvl > 0 || skill31lvl > 0;
                if (skill32lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 6 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText32, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText32, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill32lvl < skill32lvlmax && check && KilledPlantera && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill32lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill33
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill33X, skill33Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill33Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill33Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill33Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(10)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(10)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(10))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill14lvl == 0)
                {
                    if (skill33lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                        if (skill32lvl < skill32lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText33, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText33, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledGolem)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill33lvl < skill33lvlmax && skill32lvl >= 1 && KilledGolem && SkillPoints >= 5)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill33lvl++;
                        SkillPoints -= 5; SpendedPoints += 5;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText33_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill34
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill34X, skill34Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill34Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill34Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill34Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(14)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(50))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(14)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(50))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill14lvl == 0)
                {
                    if (skill34lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 7 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill33lvl < skill33lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText34, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText34, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledCultist)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill34lvl < skill34lvlmax && skill33lvl >= 1 && KilledCultist && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill34lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText34_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill35
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill35X, skill35Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill35Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill35Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, FinalSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(FinalSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.Yellow, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill35Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                float cantupgradepos = offset;
                if (skill16lvl < 1)
                {
                    if (skill35lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(8)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 8 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(8))).Y * 0.9f;
                        if (skill32lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText35, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText35, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledCultist)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText35_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                if (Main.mouseLeft && Main.mouseLeftRelease && skill35lvl < skill35lvlmax && skill32lvl >= 1 && skill16lvl < 1 && KilledCultist && SkillPoints >= 8)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill35lvl++;
                    SkillPoints -= 8; SpendedPoints += 8;
                }
            }
            #endregion
            #endregion
        }
        public void DrawRangerTree(SpriteBatch sb)
        {
            #region String Ranger
            string Skill91Name = this.GetLocalization("Skill.Ranger.Skill91Name").Value;
            string Skill92Name = this.GetLocalization("Skill.Ranger.Skill92Name").Value;
            string Skill93Name = this.GetLocalization("Skill.Ranger.Skill93Name").Value;
            string Skill94Name = this.GetLocalization("Skill.Ranger.Skill94Name").Value;
            string Skill95Name = this.GetLocalization("Skill.Ranger.Skill95Name").Value;
            string Skill96Name = this.GetLocalization("Skill.Ranger.Skill96Name").Value;
            string Skill97Name = this.GetLocalization("Skill.Ranger.Skill97Name").Value;
            string Skill98Name = this.GetLocalization("Skill.Ranger.Skill98Name").Value;
            string Skill99Name = this.GetLocalization("Skill.Ranger.Skill99Name").Value;
            string Skill100Name = this.GetLocalization("Skill.Ranger.Skill100Name").Value;
            string Skill101Name = this.GetLocalization("Skill.Ranger.Skill101Name").Value;
            string Skill102Name = this.GetLocalization("Skill.Ranger.Skill102Name").Value;
            string Skill103Name = this.GetLocalization("Skill.Ranger.Skill103Name").Value;
            string Skill104Name = this.GetLocalization("Skill.Ranger.Skill104Name").Value;
            string Skill105Name = this.GetLocalization("Skill.Ranger.Skill105Name").Value;
            string Skill106Name = this.GetLocalization("Skill.Ranger.Skill106Name").Value;
            string Skill107Name = this.GetLocalization("Skill.Ranger.Skill107Name").Value;
            string Skill108Name = this.GetLocalization("Skill.Ranger.Skill108Name").Value;
            string Skill110Name = this.GetLocalization("Skill.Ranger.Skill110Name").Value;
            string Skill111Name = this.GetLocalization("Skill.Ranger.Skill111Name").Value;
            string Skill112Name = this.GetLocalization("Skill.Ranger.Skill112Name").Value;
            string Skill113Name = this.GetLocalization("Skill.Ranger.Skill113Name").Value;
            string Skill114Name = this.GetLocalization("Skill.Ranger.Skill114Name").Value;
            string Skill115Name = this.GetLocalization("Skill.Ranger.Skill115Name").Value;
            string Skill116Name = this.GetLocalization("Skill.Ranger.Skill116Name").Value;
            string Skill117Name = this.GetLocalization("Skill.Ranger.Skill117Name").Value;
            string Skill118Name = this.GetLocalization("Skill.Ranger.Skill118Name").Value;
            string Skill119Name = this.GetLocalization("Skill.Ranger.Skill119Name").Value;
            string Skill120Name = this.GetLocalization("Skill.Ranger.Skill120Name").Value;
            string Skill121Name = this.GetLocalization("Skill.Ranger.Skill121Name").Value;

            string Skill91Tooltip = this.GetLocalization("Skill.Ranger.Skill91Tooltip").Value;
            string Skill92Tooltip = this.GetLocalization("Skill.Ranger.Skill92Tooltip").Value;
            string Skill93Tooltip = this.GetLocalization("Skill.Ranger.Skill93Tooltip").Value;
            string Skill94Tooltip = this.GetLocalization("Skill.Ranger.Skill94Tooltip").Value;
            string Skill95Tooltip = this.GetLocalization("Skill.Ranger.Skill95Tooltip").Value;
            string Skill96Tooltip = this.GetLocalization("Skill.Ranger.Skill96Tooltip").Value;
            string Skill97Tooltip = this.GetLocalization("Skill.Ranger.Skill97Tooltip").Value;
            string Skill98Tooltip = this.GetLocalization("Skill.Ranger.Skill98Tooltip").Value;
            string Skill99Tooltip = this.GetLocalization("Skill.Ranger.Skill99Tooltip").Value;
            string Skill100Tooltip = this.GetLocalization("Skill.Ranger.Skill100Tooltip").Value;
            string Skill101Tooltip = this.GetLocalization("Skill.Ranger.Skill101Tooltip").Value;
            string Skill102Tooltip = this.GetLocalization("Skill.Ranger.Skill102Tooltip").Value;
            string Skill103Tooltip = this.GetLocalization("Skill.Ranger.Skill103Tooltip").Value;
            string Skill104Tooltip = this.GetLocalization("Skill.Ranger.Skill104Tooltip").Value;
            string Skill105Tooltip = this.GetLocalization("Skill.Ranger.Skill105Tooltip").Value;
            string Skill106Tooltip = this.GetLocalization("Skill.Ranger.Skill106Tooltip").Value;
            string Skill107Tooltip = this.GetLocalization("Skill.Ranger.Skill107Tooltip").Value;
            string Skill108Tooltip = this.GetLocalization("Skill.Ranger.Skill108Tooltip").Value;
            string Skill110Tooltip = this.GetLocalization("Skill.Ranger.Skill110Tooltip").Value;
            string Skill111Tooltip = this.GetLocalization("Skill.Ranger.Skill111Tooltip").Value;
            string Skill112Tooltip = this.GetLocalization("Skill.Ranger.Skill112Tooltip").Value;
            string Skill113Tooltip = this.GetLocalization("Skill.Ranger.Skill113Tooltip").Value;
            string Skill114Tooltip = this.GetLocalization("Skill.Ranger.Skill114Tooltip").Value;
            string Skill115Tooltip = this.GetLocalization("Skill.Ranger.Skill115Tooltip").Value;
            string Skill116Tooltip = this.GetLocalization("Skill.Ranger.Skill116Tooltip").Value;
            string Skill117Tooltip = this.GetLocalization("Skill.Ranger.Skill117Tooltip").Value;
            string Skill118Tooltip = this.GetLocalization("Skill.Ranger.Skill118Tooltip").Value;
            string Skill119Tooltip = this.GetLocalization("Skill.Ranger.Skill119Tooltip").Value;
            string Skill120Tooltip = this.GetLocalization("Skill.Ranger.Skill120Tooltip").Value;
            string Skill121Tooltip = this.GetLocalization("Skill.Ranger.Skill121Tooltip").Value;

            string CantUpgrade = this.GetLocalization("Skill.CantUpgrade").Value;
            string ActiveSkillUpgrade = this.GetLocalization("Skill.ActiveSkillUpgrade").Value;
            string PassiveSkill = this.GetLocalization("Skill.PassiveSkill").Value;
            string SkillLevel = this.GetLocalization("Skill.SkillLevel").Value;
            string SPRequired = this.GetLocalization("Skill.SPRequired").Value;
            string UpgratedSkill = this.GetLocalization("Skill.UpgratedSkill").Value;
            string SkillRequired = this.GetLocalization("Skill.SkillRequired").Value;
            string UpgratedSkillMaxLevel = this.GetLocalization("Skill.UpgratedSkillMaxLevel").Value;
            string SkillOrRequired = this.GetLocalization("Skill.SkillOrRequired").Value;
            string RangedCritBonus = this.GetLocalization("Skill.Ranger.RangedCritBonus").Value;
            string MoneyBonus = this.GetLocalization("Skill.Ranger.MoneyBonus").Value;
            string RangedUsageBonus = this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value;
            string RangedDamageBonus = this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value;
            string ArrowVelocityBonus = this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value;
            string ArrowDamageBonus = this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value;
            string BulletDamageBonus = this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value;
            string RocketDamageBonus = this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value;
            string FinalSkill = this.GetLocalization("Skill.FinalSkill").Value;

            string ActiveSkill = this.GetLocalization("Skill.ActiveSkill").Value;
            string UniqueAbility = this.GetLocalization("Skill.UniqueAbility").Value;
            string UniqueAbilityUpgrade = this.GetLocalization("Skill.UniqueAbilityUpgrade").Value;
            string ActileSkillText = this.GetLocalization("Skill.ActileSkillText").Value;
            string SecondsDuration = this.GetLocalization("Skill.SecondsDuration").Value;
            string MinutesDuration = this.GetLocalization("Skill.MinutesDuration").Value;

            string DefeatWoB = this.GetLocalization("Skill.DefeatWoB").Value;
            string DefeatEoC = this.GetLocalization("Skill.DefeatEoC").Value;
            string DefeatSkeletron = this.GetLocalization("Skill.DefeatSkeletron").Value;
            string DefeatWoF = this.GetLocalization("Skill.DefeatWoF").Value;
            string DefeatAnyMech = this.GetLocalization("Skill.DefeatAnyMech").Value;
            string DefeatPlantera = this.GetLocalization("Skill.DefeatPlantera").Value;
            string DefeatGolem = this.GetLocalization("Skill.DefeatGolem").Value;
            string DefeatCultist = this.GetLocalization("Skill.DefeatCultist").Value;

            string fullText2 = string.Format(SkillRequired, Skill91Name);
            string fullText3 = string.Format(SkillLevel, skill93lvl, skill93lvlmax);
            string fullText3_1 = string.Format(SkillRequired, Skill92Name);
            string fullText4 = string.Format(SkillRequired, Skill93Name);
            string fullText4_1 = string.Format(CantUpgrade, Skill106Name);
            string fullText5 = string.Format(SkillRequired, Skill94Name);
            string fullText6 = string.Format(SkillRequired, Skill95Name);
            string fullText7 = string.Format(SkillRequired, Skill93Name);
            string fullText8 = string.Format(SkillLevel, skill98lvl, skill98lvlmax);
            string fullText8_1 = string.Format(SkillRequired, Skill97Name);
            string fullText9 = string.Format(SkillRequired, Skill98Name);
            string fullText10 = string.Format(SkillRequired, Skill98Name);
            string fullText11 = string.Format(SkillLevel, skill101lvl, skill101lvlmax);
            string fullText11_1 = string.Format(SkillRequired, Skill99Name);
            string fullText12 = string.Format(SkillRequired, Skill100Name);
            string fullText13 = string.Format(SkillRequired, Skill101Name);
            string fullText14 = string.Format(SkillRequired, Skill102Name);
            string fullText15 = string.Format(SkillLevel, skill105lvl, skill105lvlmax);
            string fullText15_1 = string.Format(SkillRequired, Skill92Name);
            string fullText16 = string.Format(SkillRequired, Skill105Name);
            string fullText16_1 = string.Format(CantUpgrade, Skill94Name);
            string fullText17 = string.Format(SkillRequired, Skill106Name);
            string fullText18 = string.Format(SkillRequired, Skill107Name);
            string fullText19 = string.Format(SkillRequired, Skill105Name);
            string fullText20 = string.Format(SkillRequired, Skill110Name);
            string fullText21 = string.Format(SkillLevel, skill114lvl, skill114lvlmax);
            string fullText21_1 = string.Format(SkillRequired, Skill111Name);
            string fullText22 = string.Format(SkillRequired, Skill112Name);
            string fullText23 = string.Format(SkillRequired, Skill113Name);
            string fullText24 = string.Format(SkillLevel, skill117lvl, skill117lvlmax);
            string fullText24_1 = string.Format(SkillRequired, Skill114Name);
            string fullText25 = string.Format(SkillLevel, skill118lvl, skill118lvlmax);
            string fullText25_1 = string.Format(SkillRequired, Skill115Name);
            string fullText26 = string.Format(SkillLevel, skill119lvl, skill119lvlmax);
            string fullText26_1 = string.Format(SkillRequired, Skill116Name);
            string fullText27 = string.Format(SkillOrRequired, Skill117Name, Skill118Name, Skill119Name);
            string fullText28 = string.Format(SkillOrRequired, Skill103Name, Skill104Name, Skill120Name);
            #endregion
            bool MouseInFrame = Main.mouseX > Quests.FrameStart.X && Main.mouseX < Quests.FrameStart.X + Quests.FrameWidth && Main.mouseY > Quests.FrameStart.Y && Main.mouseY < Quests.FrameStart.Y + Quests.FrameHeight;
            #region update position
            skill91X = (int)(Quests.treecoord.X + 282);
            skill91Y = (int)(Quests.treecoord.Y + 6);
            skill92X = (int)(Quests.treecoord.X + 282);
            skill92Y = (int)(Quests.treecoord.Y + 94);
            skill93X = (int)(Quests.treecoord.X + 208);
            skill93Y = (int)(Quests.treecoord.Y + 172);
            skill94X = (int)(Quests.treecoord.X + 108);
            skill94Y = (int)(Quests.treecoord.Y + 184);
            skill95X = (int)(Quests.treecoord.X + 26);
            skill95Y = (int)(Quests.treecoord.Y + 240);
            skill96X = (int)(Quests.treecoord.X + 6);
            skill96Y = (int)(Quests.treecoord.Y + 372);
            skill97X = (int)(Quests.treecoord.X + 196);
            skill97Y = (int)(Quests.treecoord.Y + 272);
            skill98X = (int)(Quests.treecoord.X + 148);
            skill98Y = (int)(Quests.treecoord.Y + 380);
            skill99X = (int)(Quests.treecoord.X + 54);
            skill99Y = (int)(Quests.treecoord.Y + 506);
            skill100X = (int)(Quests.treecoord.X + 152);
            skill100Y = (int)(Quests.treecoord.Y + 506);
            skill101X = (int)(Quests.treecoord.X + 34);
            skill101Y = (int)(Quests.treecoord.Y + 610);
            skill102X = (int)(Quests.treecoord.X + 172);
            skill102Y = (int)(Quests.treecoord.Y + 610);
            skill103X = (int)(Quests.treecoord.X + 14);
            skill103Y = (int)(Quests.treecoord.Y + 714);
            skill104X = (int)(Quests.treecoord.X + 192);
            skill104Y = (int)(Quests.treecoord.Y + 714);
            skill105X = (int)(Quests.treecoord.X + 358);
            skill105Y = (int)(Quests.treecoord.Y + 172);
            skill106X = (int)(Quests.treecoord.X + 470);
            skill106Y = (int)(Quests.treecoord.Y + 172);
            skill107X = (int)(Quests.treecoord.X + 528);
            skill107Y = (int)(Quests.treecoord.Y + 252);
            skill108X = (int)(Quests.treecoord.X + 528);
            skill108Y = (int)(Quests.treecoord.Y + 340);
            skill110X = (int)(Quests.treecoord.X + 358);
            skill110Y = (int)(Quests.treecoord.Y + 262);
            skill111X = (int)(Quests.treecoord.X + 276);
            skill111Y = (int)(Quests.treecoord.Y + 320);
            skill112X = (int)(Quests.treecoord.X + 358);
            skill112Y = (int)(Quests.treecoord.Y + 350);
            skill113X = (int)(Quests.treecoord.X + 440);
            skill113Y = (int)(Quests.treecoord.Y + 320);
            skill114X = (int)(Quests.treecoord.X + 268);
            skill114Y = (int)(Quests.treecoord.Y + 420);
            skill115X = (int)(Quests.treecoord.X + 358);
            skill115Y = (int)(Quests.treecoord.Y + 438);
            skill116X = (int)(Quests.treecoord.X + 448);
            skill116Y = (int)(Quests.treecoord.Y + 420);
            skill117X = (int)(Quests.treecoord.X + 276);
            skill117Y = (int)(Quests.treecoord.Y + 520);
            skill118X = (int)(Quests.treecoord.X + 358);
            skill118Y = (int)(Quests.treecoord.Y + 526);
            skill119X = (int)(Quests.treecoord.X + 440);
            skill119Y = (int)(Quests.treecoord.Y + 520);
            skill120X = (int)(Quests.treecoord.X + 358);
            skill120Y = (int)(Quests.treecoord.Y + 640);
            skill121X = (int)(Quests.treecoord.X + 202);
            skill121Y = (int)(Quests.treecoord.Y + 866);
           
            #endregion
            #region update colors
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill92X, skill92Y), 56, 56) || skill91lvl >= 1)
            {
                skill92color = Color.White;
            }
            else
                skill92color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill93X, skill93Y), 56, 56) || skill92lvl >= 1)
            {
                skill93color = Color.White;
            }
            else
                skill93color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill94X, skill94Y), 56, 56) || skill93lvl >= 1)
            {
                skill94color = Color.White;
            }
            else
                skill94color = Color.Gray;
            if (skill106lvl >= 1)
                skill94color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill95X, skill95Y), 56, 56) || skill94lvl >= 1)
            {
                skill95color = Color.White;
            }
            else
                skill95color = Color.Gray;
            if (skill106lvl >= 1)
                skill95color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill96X, skill96Y), 56, 56) || skill95lvl >= 1)
            {
                skill96color = Color.White;
            }
            else
                skill96color = Color.Gray;
            if (skill106lvl >= 1)
                skill96color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill97X, skill97Y), 56, 56) || skill93lvl >= 1)
            {
                skill97color = Color.White;
            }
            else
                skill97color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill98X, skill98Y), 56, 56) || skill97lvl >= 1)
            {
                skill98color = Color.White;
            }
            else
                skill98color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill99X, skill99Y), 56, 56) || skill98lvl >= 1)
            {
                skill99color = Color.White;
            }
            else
                skill99color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill100X, skill100Y), 56, 56) || skill98lvl >= 1)
            {
                skill100color = Color.White;
            }
            else
                skill100color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill101X, skill101Y), 56, 56) || skill99lvl >= 1)
            {
                skill101color = Color.White;
            }
            else
                skill101color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill102X, skill102Y), 56, 56) || skill100lvl >= 1)
            {
                skill102color = Color.White;
            }
            else
                skill102color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill103X, skill103Y), 56, 56) || skill101lvl >= 1)
            {
                skill103color = Color.White;
            }
            else
                skill103color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill104X, skill104Y), 56, 56) || skill102lvl >= 1)
            {
                skill104color = Color.White;
            }
            else
                skill104color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill105X, skill105Y), 56, 56) || skill92lvl >= 1)
            {
                skill105color = Color.White;
            }
            else
                skill105color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill106X, skill106Y), 56, 56) || skill105lvl >= 1)
            {
                skill106color = Color.White;
            }
            else
                skill106color = Color.Gray;
            if (skill94lvl >= 1)
                skill106color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill107X, skill107Y), 56, 56) || skill106lvl >= 1)
            {
                skill107color = Color.White;
            }
            else
                skill107color = Color.Gray;
            if (skill94lvl >= 1)
                skill107color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill108X, skill108Y), 56, 56) || skill107lvl >= 1)
            {
                skill108color = Color.White;
            }
            else
                skill108color = Color.Gray;
            if (skill94lvl >= 1)
                skill108color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill110X, skill110Y), 56, 56) || skill105lvl >= 1)
            {
                skill110color = Color.White;
            }
            else
                skill110color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill111X, skill111Y), 56, 56) || skill110lvl >= 1)
            {
                skill111color = Color.White;
            }
            else
                skill111color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill112X, skill112Y), 56, 56) || skill110lvl >= 1)
            {
                skill112color = Color.White;
            }
            else
                skill112color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill113X, skill113Y), 56, 56) || skill110lvl >= 1)
            {
                skill113color = Color.White;
            }
            else
                skill113color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill114X, skill114Y), 56, 56) || skill111lvl >= 1)
            {
                skill114color = Color.White;
            }
            else
                skill114color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill115X, skill115Y), 56, 56) || skill112lvl >= 1)
            {
                skill115color = Color.White;
            }
            else
                skill115color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill116X, skill116Y), 56, 56) || skill113lvl >= 1)
            {
                skill116color = Color.White;
            }
            else
                skill116color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill117X, skill117Y), 56, 56) || skill114lvl >= 1)
            {
                skill117color = Color.White;
            }
            else
                skill117color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill118X, skill118Y), 56, 56) || skill115lvl >= 1)
            {
                skill118color = Color.White;
            }
            else
                skill118color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill119X, skill119Y), 56, 56) || skill116lvl >= 1)
            {
                skill119color = Color.White;
            }
            else
                skill119color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill120X, skill120Y), 56, 56))
            {
                skill120color = Color.White;
            }
            else
                skill120color = Color.Gray;
            if (skill117lvl >= 1 || skill118lvl >= 1 || skill119lvl >= 1)
            {
                skill120color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill121X, skill121Y), 56, 56))
            {
                skill121color = Color.White;
            }
            else
                skill121color = Color.Gray;
            if (skill103lvl >= 1 || skill104lvl >= 1 || skill120lvl >= 1)
            {
                skill121color = Color.White;
            }
            #endregion
            #region skills draw         
            Quests.DrawPart(sb, skill91texture, new Vector2(skill91X, skill91Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill91color);
            Quests.DrawPart(sb, skill92texture, new Vector2(skill92X, skill92Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill92color);
            Quests.DrawPart(sb, skill93texture, new Vector2(skill93X, skill93Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill93color);
            Quests.DrawPart(sb, skill94texture, new Vector2(skill94X, skill94Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill94color);
            Quests.DrawPart(sb, skill95texture, new Vector2(skill95X, skill95Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill95color);
            Quests.DrawPart(sb, skill96texture, new Vector2(skill96X, skill96Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill96color);
            Quests.DrawPart(sb, skill97texture, new Vector2(skill97X, skill97Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill97color);
            Quests.DrawPart(sb, skill98texture, new Vector2(skill98X, skill98Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill98color);
            Quests.DrawPart(sb, skill99texture, new Vector2(skill99X, skill99Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill99color);
            Quests.DrawPart(sb, skill100texture, new Vector2(skill100X, skill100Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill100color);
            Quests.DrawPart(sb, skill101texture, new Vector2(skill101X, skill101Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill101color);
            Quests.DrawPart(sb, skill102texture, new Vector2(skill102X, skill102Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill102color);
            Quests.DrawPart(sb, skill103texture, new Vector2(skill103X, skill103Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill103color);
            Quests.DrawPart(sb, skill104texture, new Vector2(skill104X, skill104Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill104color);
            Quests.DrawPart(sb, skill105texture, new Vector2(skill105X, skill105Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill105color);
            Quests.DrawPart(sb, skill106texture, new Vector2(skill106X, skill106Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill106color);
            Quests.DrawPart(sb, skill107texture, new Vector2(skill107X, skill107Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill107color);
            Quests.DrawPart(sb, skill108texture, new Vector2(skill108X, skill108Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill108color);
            Quests.DrawPart(sb, skill110texture, new Vector2(skill110X, skill110Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill110color);
            Quests.DrawPart(sb, skill111texture, new Vector2(skill111X, skill111Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill111color);
            Quests.DrawPart(sb, skill112texture, new Vector2(skill112X, skill112Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill112color);
            Quests.DrawPart(sb, skill113texture, new Vector2(skill113X, skill113Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill113color);
            Quests.DrawPart(sb, skill114texture, new Vector2(skill114X, skill114Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill114color);
            Quests.DrawPart(sb, skill115texture, new Vector2(skill115X, skill115Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill115color);
            Quests.DrawPart(sb, skill116texture, new Vector2(skill116X, skill116Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill116color);
            Quests.DrawPart(sb, skill117texture, new Vector2(skill117X, skill117Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill117color);
            Quests.DrawPart(sb, skill118texture, new Vector2(skill118X, skill118Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill118color);
            Quests.DrawPart(sb, skill119texture, new Vector2(skill119X, skill119Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill119color);
            Quests.DrawPart(sb, skill120texture, new Vector2(skill120X, skill120Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill120color);
            Quests.DrawPart(sb, skill121texture, new Vector2(skill121X, skill121Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill121color);
            #endregion
            #region update border
            if (skill91lvl == skill91lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill91X - 6, skill91Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill92lvl == skill92lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill92X - 6, skill92Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill93lvl == skill93lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill93X - 6, skill93Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill94lvl == skill94lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill94X - 6, skill94Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill95lvl == skill95lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill95X - 6, skill95Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill96lvl == skill96lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill96X - 6, skill96Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill97lvl == skill97lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill97X - 6, skill97Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill98lvl == skill98lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill98X - 6, skill98Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill99lvl == skill99lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill99X - 6, skill99Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill100lvl == skill100lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill100X - 6, skill100Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill101lvl == skill101lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill101X - 6, skill101Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill102lvl == skill102lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill102X - 6, skill102Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill103lvl == skill103lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill103X - 6, skill103Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill104lvl == skill104lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill104X - 6, skill104Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill105lvl == skill105lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill105X - 6, skill105Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill106lvl == skill106lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill106X - 6, skill106Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill107lvl == skill107lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill107X - 6, skill107Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill108lvl == skill108lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill108X - 6, skill108Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill110lvl == skill110lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill110X - 6, skill110Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill111lvl == skill111lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill111X - 6, skill111Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill112lvl == skill112lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill112X - 6, skill112Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill113lvl == skill113lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill113X - 6, skill113Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill114lvl == skill114lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill114X - 6, skill114Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill115lvl == skill115lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill115X - 6, skill115Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill116lvl == skill116lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill116X - 6, skill116Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill117lvl == skill117lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill117X - 6, skill117Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill118lvl == skill118lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill118X - 6, skill118Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill119lvl == skill119lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill119X - 6, skill119Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill120lvl == skill120lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill120X - 6, skill120Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill121lvl == skill121lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill121X - 6, skill121Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);

            if (skill94lvl == skill94lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill106X, skill106Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill107X, skill107Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill108X, skill108Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill106lvl == skill106lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill94X, skill94Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill95X, skill95Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill96X, skill96Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            #endregion
            #region skill mouse over and click
            #region skill91
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill91X, skill91Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill91Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill91Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill91Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill91lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;                   
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill91lvl < skill91lvlmax && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill91lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill92
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill92X, skill92Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill92Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill92Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill92Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill92lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill91lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText2, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText2, maxwidth)).Y * 0.9f;
                    }                
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill92lvl < skill92lvlmax && skill91lvl >= 1 && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill92lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill93
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill93X, skill93Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill93Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill93Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill93Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText3, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText3).Y * 0.9f;
                switch (skill93lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill92lvl == 0)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Language.GetTextValue("Mods.Bismuth.MeleeSpeedBonus", Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, Language.GetTextValue("Mods.Bismuth.MeleeSpeedBonus", Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedCritBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }                  
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }               
                if (Main.mouseLeft && Main.mouseLeftRelease && skill93lvl < skill93lvlmax && skill92lvl >= 1)
                {
                    if (skill93lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill93lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill93lvl == 1 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill93lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill93lvl == 2 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill93lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill93lvl == 3 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill93lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill93lvl == 4 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill93lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill94
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill94X, skill94Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill94Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill94Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill94Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill106lvl == 0)
                {

                    if (skill94lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill93lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText4, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWormorBrain)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);


                if (Main.mouseLeft && Main.mouseLeftRelease && skill94lvl < skill94lvlmax && skill93lvl >= 1 && KilledWormorBrain && SkillPoints >= 3 && skill106lvl < 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill94lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill95
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill95X, skill95Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill95Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill95Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill95Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill106lvl == 0)
                {
                    if (skill95lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill94lvl < skill94lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText5, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText5, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWoF)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                   


                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                if (Main.mouseLeft && Main.mouseLeftRelease && skill95lvl < skill95lvlmax && skill94lvl >= 1 && KilledWoF && SkillPoints >= 2 && skill106lvl < 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill95lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill96
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill96X, skill96Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill96Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill96Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill96Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill106lvl == 0)
                {
                    if (skill96lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(6)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 6 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(6))).Y * 0.9f;
                        if (skill95lvl < skill95lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText6, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledPlantera)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

                if (Main.mouseLeft && Main.mouseLeftRelease && skill96lvl < skill96lvlmax && skill95lvl >= 1 && KilledPlantera && SkillPoints >= 6 && skill106lvl < 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill96lvl++;
                    SkillPoints -= 6; SpendedPoints += 6;
                }
            }
            #endregion skill96
            #region skill97
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill97X, skill97Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill97Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill97Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill97Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill97lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill93lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText7, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledEoC)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill97lvl < skill97lvlmax && skill93lvl >= 1 && KilledEoC && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill97lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill98
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill98X, skill98Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill98Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill98Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill98Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText8, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText8).Y * 0.9f;

                switch (skill98lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.MoneyBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.MoneyBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill97lvl < skill97lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText8_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText8_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.MoneyBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.MoneyBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value,Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.MoneyBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.MoneyBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }

                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill98lvl < skill98lvlmax && skill97lvl >= 1)
                {
                    if (skill98lvl == 0 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill98lvl++;
                        SkillPoints--; SpendedPoints++;
                    }
                    else if (skill98lvl == 1 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill98lvl++;
                        SkillPoints--; SpendedPoints++;
                    }
                    else if (skill98lvl == 2 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill98lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
            }
            #endregion
            #region skill99
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill99X, skill99Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill99Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill99Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill99Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill99lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill98lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText9, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText9, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill99lvl < skill99lvlmax && skill98lvl >= 1 && KilledWoF && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill99lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill100
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill100X, skill100Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill100Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill100Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill100Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill100lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill98lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText10, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText10, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill100lvl < skill100lvlmax && skill98lvl >= 1 && KilledWoF && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill100lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                   // DodgeChanceForSkills += 4;
                }
            }
            #endregion
            #region skill101
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill101X, skill101Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill101Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill101Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill101Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Language.GetTextValue("Mods.Bismuth.SkillLevel", skill101lvl, skill101lvlmax), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.SkillLevel", skill101lvl, skill101lvlmax)).Y * 0.9f;

                switch (skill101lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill99lvl < skill99lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText11_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText11_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value, Convert.ToString(15))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedUsageBonus").Value, Convert.ToString(15))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill101lvl < skill101lvlmax && skill99lvl >= 1)
                {
                    if (skill101lvl == 0 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill101lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill101lvl == 1 && KilledPlantera && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill101lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill101lvl == 2 && KilledGolem && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill101lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
            }
            #endregion
            #region skill102 
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill102X, skill102Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill102Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill102Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill102Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill102lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill100lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText12, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText12, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill102lvl < skill102lvlmax && skill100lvl >= 1 && KilledAnyMechBoss && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill102lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill103
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill103X, skill103Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill103Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill103Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill103Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill103lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill101lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText13, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill103lvl < skill103lvlmax && skill101lvl >= 1 && KilledPlantera && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill103lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill104
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill104X, skill104Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill104Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill104Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill104Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill104lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill102lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText14, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText14, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill104lvl < skill104lvlmax && skill102lvl >= 1 && KilledPlantera && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill104lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                    DodgeChanceForSkills += 6;
                }
            }
            #endregion
            #region skill105
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill105X, skill105Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill105Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill105Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill105Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText15, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText15).Y * 0.9f;
                switch (skill105lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill92lvl < skill92lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RangedDamageBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill105lvl < skill105lvlmax && skill92lvl >= 1)
                {
                    if (skill105lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill105lvl++;
                        SkillPoints--; SpendedPoints++;
                    }
                    else if (skill105lvl == 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill105lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill105lvl == 2 && KilledSkeletron && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill105lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
            }
            #endregion
            #region skill106
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill106X, skill106Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill106Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill106Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill106Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill94lvl == 0)
                {
                    if (skill106lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill105lvl < skill105lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText16, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWormorBrain)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill106lvl < skill106lvlmax && skill105lvl >= 1 && KilledWormorBrain && SkillPoints >= 2 && skill94lvl < 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill106lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

               
            }
            #endregion
            #region skill107
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill107X, skill107Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill107Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill107Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais,Skill107Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill94lvl == 0)
                {
                    if (skill107lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill106lvl < skill106lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText17, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText17, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWoF)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill107lvl < skill107lvlmax && skill106lvl >= 1 && KilledWoF && SkillPoints >= 2 && skill94lvl < 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill107lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);


              
            }
            #endregion
            #region skill108
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill108X, skill108Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill108Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill108Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill108Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill94lvl == 0)
                {


                    if (skill108lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill107lvl < skill107lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText18, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText18, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledCultist)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill108lvl < skill108lvlmax && skill107lvl >= 1 && KilledGolem && SkillPoints >= 4 && skill94lvl < 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill108lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion      
            #region skill110
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill110X, skill110Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill110Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill110Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill110Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill110lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill105lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText19, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText19, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill110lvl < skill110lvlmax && skill105lvl >= 1 && KilledWormorBrain && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill110lvl++;
                    SkillPoints -= 1;
                }
            }
            #endregion
            #region skill111
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill111X, skill111Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill111Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill111Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill111Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill111lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill110lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill111lvl < skill111lvlmax && skill110lvl >= 1 && KilledSkeletron && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill111lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill112
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill112X, skill112Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill112Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill112Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill112Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill112lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill110lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill112lvl < skill112lvlmax && skill110lvl >= 1 && KilledSkeletron && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill112lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill113
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill113X, skill113Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill113Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill113Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill113Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill113lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill110lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill113lvl < skill113lvlmax && skill110lvl >= 1 && KilledSkeletron && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill113lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill114
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill114X, skill114Y), 56, 56))
            {

                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill114Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill114Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill114Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText21, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText21).Y * 0.9f;

                switch (skill114lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value, Convert.ToString(15))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value, Convert.ToString(15))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill111lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText21_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText21_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value, Convert.ToString(20))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value, Convert.ToString(20))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value, Convert.ToString(25))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowVelocityBonus").Value, Convert.ToString(25))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
                
                if (Main.mouseLeft && Main.mouseLeftRelease && skill114lvl < skill114lvlmax && skill111lvl >= 1)
                {
                    if (skill114lvl == 0 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill114lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill114lvl == 1 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill114lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill114lvl == 2 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill114lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
            }
            #endregion
            #region skill115
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill115X, skill115Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill115Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill115Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill115Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill115lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill112lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText22, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill115lvl < skill115lvlmax && skill112lvl >= 1 && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill115lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill116
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill116X, skill116Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill116Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill116Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill116Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill116lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill113lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText23, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText23, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill116lvl < skill116lvlmax && skill113lvl >= 1 && KilledWoF && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill116lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill117
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill117X, skill117Y), 56, 56))
            {

                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill117Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill117Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill117Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText24, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText24).Y * 0.9f;

                 switch (skill117lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill114lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText24_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText24_1, maxwidth)).Y * 0.9f;
                            }             
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value, Convert.ToString(9))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.ArrowDamageBonus").Value, Convert.ToString(9))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill117lvl < skill117lvlmax && skill114lvl >= 1)
                {
                    if (skill117lvl == 0 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill117lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill117lvl == 1 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill117lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill117lvl == 2 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill117lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill118
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill118X, skill118Y), 56, 56))
            {

                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill118Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill118Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill118Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText25, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText25).Y * 0.9f;

                switch (skill118lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill115lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText25_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText25_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value, Convert.ToString(9))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.BulletDamageBonus").Value, Convert.ToString(9))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }

                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill118lvl < skill118lvlmax && skill115lvl >= 1)
                {
                    if (skill118lvl == 0 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill118lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill118lvl == 1 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill118lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill118lvl == 2 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill118lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill119
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill119X, skill119Y), 56, 56))
            {

                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill119Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill119Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill119Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText26, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText26).Y * 0.9f;

                switch (skill119lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill116lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText26_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText26_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value, Convert.ToString(9))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Ranger.RocketDamageBonus").Value, Convert.ToString(9))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }

                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }

              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill119lvl < skill119lvlmax && skill116lvl >= 1)
                {
                    if (skill119lvl == 0 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill119lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill119lvl == 1 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill119lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill119lvl == 2 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill119lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill120
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill120X, skill120Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill120Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill120Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill120Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6))), maxwidth)).Y;
                float cantupgradepos = offset;
                bool check = skill117lvl > 0 || skill118lvl > 0 || skill119lvl > 0;


                if (skill120lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(6)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 6 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(6))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText27, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais,fullText27, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill120lvl < skill120lvlmax && check && KilledGolem && SkillPoints >= 6)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill120lvl++;
                    SkillPoints -= 6; SpendedPoints += 6;
                }
             
            }
            #endregion
            #region skill121
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill121X, skill121Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill121Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill121Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, FinalSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(FinalSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.Yellow, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill121Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                bool check = skill103lvl > 0 || skill104lvl > 0 || skill120lvl > 0;
                if (skill121lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 9 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText28, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText28, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledCultist)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill121lvl < skill121lvlmax && check && KilledCultist && SkillPoints >= 9)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill121lvl++;
                    SkillPoints -= 9; SpendedPoints += 9;
                }
            }
            #endregion
            #endregion
        }
        public void DrawWizardTree(SpriteBatch sb)
        {
            #region String Wizard
            string Skill2Name = this.GetLocalization("Skill.Skill2Name").Value;
            string Skill36Name = this.GetLocalization("Skill.Wizard.Skill36Name").Value;
            string Skill37Name = this.GetLocalization("Skill.Wizard.Skill37Name").Value;
            string Skill38Name = this.GetLocalization("Skill.Wizard.Skill38Name").Value;
            string Skill39Name = this.GetLocalization("Skill.Wizard.Skill39Name").Value;
            string Skill40Name = this.GetLocalization("Skill.Wizard.Skill40Name").Value;
            string Skill41Name = this.GetLocalization("Skill.Wizard.Skill41Name").Value;
            string Skill42Name = this.GetLocalization("Skill.Wizard.Skill42Name").Value;
            string Skill43Name = this.GetLocalization("Skill.Wizard.Skill43Name").Value;
            string Skill44Name = this.GetLocalization("Skill.Wizard.Skill44Name").Value;
            string Skill45Name = this.GetLocalization("Skill.Wizard.Skill45Name").Value;
            string Skill46Name = this.GetLocalization("Skill.Wizard.Skill46Name").Value;
            string Skill47Name = this.GetLocalization("Skill.Wizard.Skill47Name").Value;
            string Skill48Name = this.GetLocalization("Skill.Wizard.Skill48Name").Value;
            string Skill49Name = this.GetLocalization("Skill.Wizard.Skill49Name").Value;
            string Skill50Name = this.GetLocalization("Skill.Wizard.Skill50Name").Value;
            string Skill51Name = this.GetLocalization("Skill.Wizard.Skill51Name").Value;
            string Skill53Name = this.GetLocalization("Skill.Wizard.Skill53Name").Value;
            string Skill54Name = this.GetLocalization("Skill.Wizard.Skill54Name").Value;
            string Skill55Name = this.GetLocalization("Skill.Wizard.Skill55Name").Value;
            string Skill56Name = this.GetLocalization("Skill.Wizard.Skill56Name").Value;
            string Skill57Name = this.GetLocalization("Skill.Wizard.Skill57Name").Value;
            string Skill58Name = this.GetLocalization("Skill.Wizard.Skill58Name").Value;
            string Skill59Name = this.GetLocalization("Skill.Wizard.Skill59Name").Value;
            string Skill60Name = this.GetLocalization("Skill.Wizard.Skill60Name").Value;
            string Skill61Name = this.GetLocalization("Skill.Wizard.Skill61Name").Value;
            string Skill62Name = this.GetLocalization("Skill.Wizard.Skill62Name").Value;
            string Skill63Name = this.GetLocalization("Skill.Wizard.Skill63Name").Value;
            string Skill64Name = this.GetLocalization("Skill.Wizard.Skill64Name").Value;

            string Skill36Tooltip = this.GetLocalization("Skill.Wizard.Skill36Tooltip").Value;
            string Skill37Tooltip = this.GetLocalization("Skill.Wizard.Skill37Tooltip").Value;
            string Skill38Tooltip = this.GetLocalization("Skill.Wizard.Skill38Tooltip").Value;
            string Skill39Tooltip = this.GetLocalization("Skill.Wizard.Skill39Tooltip").Value;
            string Skill40Tooltip = this.GetLocalization("Skill.Wizard.Skill40Tooltip").Value;
            string Skill41Tooltip = this.GetLocalization("Skill.Wizard.Skill41Tooltip").Value;
            string Skill42Tooltip = this.GetLocalization("Skill.Wizard.Skill42Tooltip").Value;
            string Skill43Tooltip = this.GetLocalization("Skill.Wizard.Skill43Tooltip").Value;
            string Skill44Tooltip = this.GetLocalization("Skill.Wizard.Skill44Tooltip").Value;
            string Skill45Tooltip = this.GetLocalization("Skill.Wizard.Skill45Tooltip").Value;
            string Skill46Tooltip = this.GetLocalization("Skill.Wizard.Skill46Tooltip").Value;
            string Skill47Tooltip = this.GetLocalization("Skill.Wizard.Skill47Tooltip").Value;
            string Skill48Tooltip = this.GetLocalization("Skill.Wizard.Skill48Tooltip").Value;
            string Skill49Tooltip = this.GetLocalization("Skill.Wizard.Skill49Tooltip").Value;
            string Skill50Tooltip = this.GetLocalization("Skill.Wizard.Skill50Tooltip").Value;
            string Skill51Tooltip = this.GetLocalization("Skill.Wizard.Skill51Tooltip").Value;
            string Skill53Tooltip = this.GetLocalization("Skill.Wizard.Skill53Tooltip").Value;
            string Skill54Tooltip = this.GetLocalization("Skill.Wizard.Skill54Tooltip").Value;
            string Skill55Tooltip = this.GetLocalization("Skill.Wizard.Skill55Tooltip").Value;
            string Skill56Tooltip = this.GetLocalization("Skill.Wizard.Skill56Tooltip").Value;
            string Skill57Tooltip = this.GetLocalization("Skill.Wizard.Skill57Tooltip").Value;
            string Skill58Tooltip = this.GetLocalization("Skill.Wizard.Skill58Tooltip").Value;
            string Skill59Tooltip = this.GetLocalization("Skill.Wizard.Skill59Tooltip").Value;
            string Skill60Tooltip = this.GetLocalization("Skill.Wizard.Skill60Tooltip").Value;
            string Skill61Tooltip = this.GetLocalization("Skill.Wizard.Skill61Tooltip").Value;
            string Skill62Tooltip = this.GetLocalization("Skill.Wizard.Skill62Tooltip").Value;
            string Skill63Tooltip = this.GetLocalization("Skill.Wizard.Skill63Tooltip").Value;
            string Skill64Tooltip = this.GetLocalization("Skill.Wizard.Skill64Tooltip").Value;

            string CantUpgrade = this.GetLocalization("Skill.CantUpgrade").Value;
            string ActiveSkillUpgrade = this.GetLocalization("Skill.ActiveSkillUpgrade").Value;
            string PassiveSkill = this.GetLocalization("Skill.PassiveSkill").Value;
            string SkillLevelBonus = this.GetLocalization("Skill.SkillLevelBonus").Value;
            string MinionDamageBonus = this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value;
            string MinionNumberBonus = this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value;
            string ManaCostBonus = this.GetLocalization("Skill.Wizard.ManaCostBonus").Value;
            string MagicDamageBonus = this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value;
            string ManaRegenBonus = this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value;
            string SkillLevel = this.GetLocalization("Skill.SkillLevel").Value;
            string SPRequired = this.GetLocalization("Skill.SPRequired").Value;
            string UpgratedSkill = this.GetLocalization("Skill.UpgratedSkill").Value;
            string SkillRequired = this.GetLocalization("Skill.SkillRequired").Value;
            string UpgratedSkillMaxLevel = this.GetLocalization("Skill.UpgratedSkillMaxLevel").Value;
            string SkillOrRequired = this.GetLocalization("Skill.SkillOrRequired").Value;
            string FinalSkill = this.GetLocalization("Skill.FinalSkill").Value;

            string ActiveSkill = this.GetLocalization("Skill.ActiveSkill").Value;
            string ActileSkillText = this.GetLocalization("Skill.ActileSkillText").Value;
            string SecondsDuration = this.GetLocalization("Skill.SecondsDuration").Value;
            string MinutesDuration = this.GetLocalization("Skill.MinutesDuration").Value;

            string DefeatWoB = this.GetLocalization("Skill.DefeatWoB").Value;
            string DefeatEoC = this.GetLocalization("Skill.DefeatEoC").Value;
            string DefeatSkeletron = this.GetLocalization("Skill.DefeatSkeletron").Value;
            string DefeatWoF = this.GetLocalization("Skill.DefeatWoF").Value;
            string DefeatAnyMech = this.GetLocalization("Skill.DefeatAnyMech").Value;
            string DefeatPlantera = this.GetLocalization("Skill.DefeatPlantera").Value;
            string DefeatGolem = this.GetLocalization("Skill.DefeatGolem").Value;
            string DefeatCultist = this.GetLocalization("Skill.DefeatCultist").Value;

            string fullText2 = string.Format(SkillRequired, Skill36Name);
            string fullText3 = string.Format(SkillRequired, Skill37Name);
            string fullText4 = string.Format(SkillRequired, Skill38Name);
            string fullText4_1 = string.Format(CantUpgrade, Skill51Name);
            string fullText5 = string.Format(SkillRequired, Skill39Name);
            string fullText5_1 = string.Format(CantUpgrade, Skill51Name);
            string fullText6 = string.Format(SkillRequired, Skill38Name);
            string fullText7 = string.Format(SkillRequired, Skill38Name);
            string fullText8 = string.Format(SkillLevel, skill43lvl, skill43lvlmax);
            string fullText9 = string.Format(SkillOrRequired, Skill41Name, Skill42Name);
            string fullText10 = string.Format(SkillLevel, skill44lvl, skill44lvlmax);
            string fullText10_1 = string.Format(SkillRequired, Skill43Name);
            string fullText11 = string.Format(SkillRequired, Skill44Name);
            string fullText12 = string.Format(SkillRequired, Skill45Name);
            string fullText12_1 = string.Format(CantUpgrade, Skill47Name);
            string fullText13 = string.Format(SkillRequired, Skill45Name);
            string fullText13_1 = string.Format(CantUpgrade, Skill46Name);
            string fullText14 = string.Format(SkillOrRequired, Skill46Name, Skill47Name);
            string fullText15 = string.Format(SkillLevel, skill49lvl, skill49lvlmax);
            string fullText15_1 = string.Format(SkillRequired, Skill2Name);
            string fullText16 = string.Format(SkillRequired, Skill49Name);
            string fullText17 = string.Format(SkillRequired, Skill50Name);
            string fullText17_1 = string.Format(CantUpgrade, Skill39Name);
            string fullText18 = string.Format(SkillLevel, skill53lvl, skill53lvlmax);
            string fullText18_1 = string.Format(SkillRequired, Skill50Name);
            string fullText19 = string.Format(SkillRequired, Skill53Name);
            string fullText20 = string.Format(SkillLevel, skill55lvl, skill55lvlmax);
            string fullText20_1 = string.Format(SkillRequired, Skill53Name);
            string fullText21 = string.Format(SkillRequired, Skill54Name);
            string fullText22 = string.Format(SkillRequired, Skill55Name);
            string fullText23 = string.Format(SkillRequired, Skill56Name);
            string fullText24 = string.Format(SkillRequired, Skill57Name);
            string fullText25 = string.Format(SkillOrRequired, Skill58Name, Skill59Name);
            string fullText26 = string.Format(SkillRequired, Skill60Name);
            string fullText27 = string.Format(SkillRequired, Skill61Name);
            string fullText28 = string.Format(SkillRequired, Skill60Name);
            string fullText29 = string.Format(SkillOrRequired, Skill48Name, Skill63Name);
            #endregion
            bool MouseInFrame = Main.mouseX > Quests.FrameStart.X && Main.mouseX < Quests.FrameStart.X + Quests.FrameWidth && Main.mouseY > Quests.FrameStart.Y && Main.mouseY < Quests.FrameStart.Y + Quests.FrameHeight;
            #region update position
            skill36X = (int)(Quests.treecoord.X + 336);
            skill36Y = (int)(Quests.treecoord.Y + 6);
            skill37X = (int)(Quests.treecoord.X + 336);
            skill37Y = (int)(Quests.treecoord.Y + 104);
            skill38X = (int)(Quests.treecoord.X + 230);
            skill38Y = (int)(Quests.treecoord.Y + 136);
            skill39X = (int)(Quests.treecoord.X + 104);
            skill39Y = (int)(Quests.treecoord.Y + 184);
            skill40X = (int)(Quests.treecoord.X + 6);
            skill40Y = (int)(Quests.treecoord.Y + 212);
            skill41X = (int)(Quests.treecoord.X + 184);
            skill41Y = (int)(Quests.treecoord.Y + 268);
            skill42X = (int)(Quests.treecoord.X + 278);
            skill42Y = (int)(Quests.treecoord.Y + 268);
            skill43X = (int)(Quests.treecoord.X + 230);
            skill43Y = (int)(Quests.treecoord.Y + 360);
            skill44X = (int)(Quests.treecoord.X + 218);
            skill44Y = (int)(Quests.treecoord.Y + 474);
            skill45X = (int)(Quests.treecoord.X + 206);
            skill45Y = (int)(Quests.treecoord.Y + 596);
            skill46X = (int)(Quests.treecoord.X + 160);
            skill46Y = (int)(Quests.treecoord.Y + 688);
            skill47X = (int)(Quests.treecoord.X + 256);
            skill47Y = (int)(Quests.treecoord.Y + 688);
            skill48X = (int)(Quests.treecoord.X + 284);
            skill48Y = (int)(Quests.treecoord.Y + 792);
            skill49X = (int)(Quests.treecoord.X + 442);
            skill49Y = (int)(Quests.treecoord.Y + 136);
            skill50X = (int)(Quests.treecoord.X + 472);
            skill50Y = (int)(Quests.treecoord.Y + 234);
            skill51X = (int)(Quests.treecoord.X + 584);
            skill51Y = (int)(Quests.treecoord.Y + 266);
            skill53X = (int)(Quests.treecoord.X + 486);
            skill53Y = (int)(Quests.treecoord.Y + 334);
            skill54X = (int)(Quests.treecoord.X + 396);
            skill54Y = (int)(Quests.treecoord.Y + 392);
            skill55X = (int)(Quests.treecoord.X + 578);
            skill55Y = (int)(Quests.treecoord.Y + 392);
            skill56X = (int)(Quests.treecoord.X + 408);
            skill56Y = (int)(Quests.treecoord.Y + 506);
            skill57X = (int)(Quests.treecoord.X + 568);
            skill57Y = (int)(Quests.treecoord.Y + 506);
            skill58X = (int)(Quests.treecoord.X + 420);
            skill58Y = (int)(Quests.treecoord.Y + 620);
            skill59X = (int)(Quests.treecoord.X + 556);
            skill59Y = (int)(Quests.treecoord.Y + 620);
            skill60X = (int)(Quests.treecoord.X + 486);
            skill60Y = (int)(Quests.treecoord.Y + 724);
            skill61X = (int)(Quests.treecoord.X + 582);
            skill61Y = (int)(Quests.treecoord.Y + 782);
            skill62X = (int)(Quests.treecoord.X + 634);
            skill62Y = (int)(Quests.treecoord.Y + 884);
            skill63X = (int)(Quests.treecoord.X + 498);
            skill63Y = (int)(Quests.treecoord.Y + 838);
            skill64X = (int)(Quests.treecoord.X + 466);
            skill64Y = (int)(Quests.treecoord.Y + 936);
            #endregion
            #region update colors 
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill37X, skill37Y), 56, 56) || skill36lvl >= 1)
            {
                skill37color = Color.White;
            }
            else
                skill37color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill38X, skill38Y), 56, 56) || skill37lvl >= 1)
            {
                skill38color = Color.White;
            }
            else
                skill38color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill39X, skill39Y), 56, 56) || skill38lvl >= 1)
            {
                skill39color = Color.White;
            }
            else
                skill39color = Color.Gray;
            if (skill51lvl >= 1)
                skill39color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill40X, skill40Y), 56, 56) || skill39lvl >= 1)
            {
                skill40color = Color.White;
            }
            else
                skill40color = Color.Gray;
            if (skill51lvl >= 1)
                skill40color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill41X, skill41Y), 56, 56) || skill38lvl >= 1)
            {
                skill41color = Color.White;
            }
            else
                skill41color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill42X, skill42Y), 56, 56) || skill38lvl >= 1)
            {
                skill42color = Color.White;
            }
            else
                skill42color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill43X, skill43Y), 56, 56))
            {
                skill43color = Color.White;
            }
            else
                skill43color = Color.Gray;
            if (skill41lvl >= 1 || skill42lvl >= 1)
            {
                skill43color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill44X, skill44Y), 56, 56) || skill43lvl >= 1)
            {
                skill44color = Color.White;
            }
            else
                skill44color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill45X, skill45Y), 56, 56) || skill44lvl >= 1)
            {
                skill45color = Color.White;
            }
            else
                skill45color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill46X, skill46Y), 56, 56) || skill45lvl >= 1)
            {
                skill46color = Color.White;
            }
            else
                skill46color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill47X, skill47Y), 56, 56) || skill45lvl >= 1)
            {
                skill47color = Color.White;
            }
            else
                skill47color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill48X, skill48Y), 56, 56))
            {
                skill48color = Color.White;
            }
            else
                skill48color = Color.Gray;
            if (skill46lvl >= 1 || skill47lvl >= 1)
            {
                skill48color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill49X, skill49Y), 56, 56) || skill37lvl >= 1)
            {
                skill49color = Color.White;
            }
            else
                skill49color = Color.Gray;            

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill50X, skill50Y), 56, 56) || skill49lvl >= 1)
            {
                skill50color = Color.White;
            }
            else
                skill50color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill51X, skill51Y), 56, 56) || skill50lvl >= 1)
            {
                skill51color = Color.White;
            }
            else
                skill51color = Color.Gray;
            if (skill39lvl >= 1)
                skill51color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill53X, skill53Y), 56, 56) || skill50lvl >= 1)
            {
                skill53color = Color.White;
            }
            else
                skill53color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill54X, skill54Y), 56, 56) || skill53lvl >= 1)
            {
                skill54color = Color.White;
            }
            else
                skill54color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill55X, skill55Y), 56, 56) || skill53lvl >= 1)
            {
                skill55color = Color.White;
            }
            else
                skill55color = Color.Gray;
           
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill56X, skill56Y), 56, 56) || skill54lvl >= 1)
            {
                skill56color = Color.White;
            }
            else
                skill56color = Color.Gray;         

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill57X, skill57Y), 56, 56) || skill55lvl >= 1)
            {
                skill57color = Color.White;
            }
            else
                skill57color = Color.Gray;           

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill58X, skill58Y), 56, 56) || skill56lvl >= 1)
            {
                skill58color = Color.White;
            }
            else
                skill58color = Color.Gray;           

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill59X, skill59Y), 56, 56) || skill57lvl >= 1)
            {
                skill59color = Color.White;
            }
            else
                skill59color = Color.Gray;          

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill60X, skill60Y), 56, 56))
            {
                skill60color = Color.White;
            }
            else
                skill60color = Color.Gray;
            if (skill58lvl >= 1 || skill59lvl >= 1)
            {
                skill60color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill61X, skill61Y), 56, 56) || skill60lvl >= 1)
            {
                skill61color = Color.White;
            }
            else
                skill61color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill62X, skill62Y), 56, 56) || skill61lvl >= 1)
            {
                skill62color = Color.White;
            }
            else
                skill62color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill63X, skill63Y), 56, 56) || skill60lvl >= 1)
            {
                skill63color = Color.White;
            }
            else
                skill63color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill64X, skill64Y), 56, 56))
            {
                skill64color = Color.White;
            }
            else
                skill64color = Color.Gray;
            if (skill63lvl >= 1 || skill48lvl >= 1)
            {
                skill64color = Color.White;
            }

            #endregion
            #region skills draw
            Quests.DrawPart(sb, skill36texture, new Vector2(skill36X, skill36Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill36color);
            Quests.DrawPart(sb, skill37texture, new Vector2(skill37X, skill37Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill37color);
            Quests.DrawPart(sb, skill38texture, new Vector2(skill38X, skill38Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill38color);
            Quests.DrawPart(sb, skill39texture, new Vector2(skill39X, skill39Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill39color);
            Quests.DrawPart(sb, skill40texture, new Vector2(skill40X, skill40Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill40color);
            Quests.DrawPart(sb, skill41texture, new Vector2(skill41X, skill41Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill41color);
            Quests.DrawPart(sb, skill42texture, new Vector2(skill42X, skill42Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill42color);
            Quests.DrawPart(sb, skill43texture, new Vector2(skill43X, skill43Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill43color);
            Quests.DrawPart(sb, skill44texture, new Vector2(skill44X, skill44Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill44color);
            Quests.DrawPart(sb, skill45texture, new Vector2(skill45X, skill45Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill45color);
            Quests.DrawPart(sb, skill46texture, new Vector2(skill46X, skill46Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill46color);
            Quests.DrawPart(sb, skill47texture, new Vector2(skill47X, skill47Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill47color);
            Quests.DrawPart(sb, skill48texture, new Vector2(skill48X, skill48Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill48color);
            Quests.DrawPart(sb, skill49texture, new Vector2(skill49X, skill49Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill49color);
            Quests.DrawPart(sb, skill50texture, new Vector2(skill50X, skill50Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill50color);
            Quests.DrawPart(sb, skill51texture, new Vector2(skill51X, skill51Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill51color);
            Quests.DrawPart(sb, skill53texture, new Vector2(skill53X, skill53Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill53color);
            Quests.DrawPart(sb, skill54texture, new Vector2(skill54X, skill54Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill54color);
            Quests.DrawPart(sb, skill55texture, new Vector2(skill55X, skill55Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill55color);
            Quests.DrawPart(sb, skill56texture, new Vector2(skill56X, skill56Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill56color);
            Quests.DrawPart(sb, skill57texture, new Vector2(skill57X, skill57Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill57color);
            Quests.DrawPart(sb, skill58texture, new Vector2(skill58X, skill58Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill58color);
            Quests.DrawPart(sb, skill59texture, new Vector2(skill59X, skill59Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill59color);
            Quests.DrawPart(sb, skill60texture, new Vector2(skill60X, skill60Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill60color);
            Quests.DrawPart(sb, skill61texture, new Vector2(skill61X, skill61Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill61color);
            Quests.DrawPart(sb, skill62texture, new Vector2(skill62X, skill62Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill62color);
            Quests.DrawPart(sb, skill63texture, new Vector2(skill63X, skill63Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill63color);
            Quests.DrawPart(sb, skill64texture, new Vector2(skill64X, skill64Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill64color);
            #endregion
            #region update border
            if (skill36lvl == skill36lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill36X - 6, skill36Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill37lvl == skill37lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill37X - 6, skill37Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill38lvl == skill38lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill38X - 6, skill38Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill39lvl == skill39lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill39X - 6, skill39Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill40lvl == skill40lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill40X - 6, skill40Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill41lvl == skill41lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill41X - 6, skill41Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill42lvl == skill42lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill42X - 6, skill42Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill43lvl == skill43lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill43X - 6, skill43Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill44lvl == skill44lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill44X - 6, skill44Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill45lvl == skill45lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill45X - 6, skill45Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill46lvl == skill46lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill46X - 6, skill46Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill47lvl == skill47lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill47X - 6, skill47Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill48lvl == skill48lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill48X - 6, skill48Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill49lvl == skill49lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill49X - 6, skill49Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill50lvl == skill50lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill50X - 6, skill50Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill51lvl == skill51lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill51X - 6, skill51Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill53lvl == skill53lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill53X - 6, skill53Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill54lvl == skill54lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill54X - 6, skill54Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill55lvl == skill55lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill55X - 6, skill55Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill56lvl == skill56lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill56X - 6, skill56Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill57lvl == skill57lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill57X - 6, skill57Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill58lvl == skill58lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill58X - 6, skill58Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill59lvl == skill59lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill59X - 6, skill59Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill60lvl == skill60lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill60X - 6, skill60Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill61lvl == skill61lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill61X - 6, skill61Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill62lvl == skill62lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill62X - 6, skill62Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill63lvl == skill63lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill63X - 6, skill63Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill64lvl == skill64lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill64X - 6, skill64Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill46lvl == skill46lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill47X, skill47Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill47lvl == skill47lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill46X, skill46Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill51lvl == skill51lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill39X, skill39Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill40X, skill40Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill39lvl == skill39lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill51X, skill51Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            #endregion
            #region skill mouse over and click
            #region skill36
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill36X, skill36Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill36Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill36Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill36Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill36lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill36lvl < skill36lvlmax && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill36lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill37
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill37X, skill37Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill37Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill37Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill37Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill37lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill36lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText2, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText2, maxwidth)).Y * 0.9f;
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill37lvl < skill37lvlmax && skill36lvl >= 1 && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill37lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill38
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill38X, skill38Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill38Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill38Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill38Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill38lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill37lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledEoC)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill38lvl < skill38lvlmax && skill37lvl >= 1 && KilledEoC && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill38lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                   
                }
            }
            #endregion
            #region skill39
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill39X, skill39Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill39Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill39Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill39Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(45)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(45)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill51lvl == 0)
                {
                    if (skill39lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill38lvl < skill38lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText4, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWormorBrain)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill39lvl < skill39lvlmax && skill38lvl >= 1 && KilledWormorBrain && SkillPoints >= 3 && skill51lvl < 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill39lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);          
            }
            #endregion
            #region skill40
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill40X, skill40Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill40Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill40Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill40Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(55)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(55)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;
                if (skill51lvl == 0)
                {
                    if (skill40lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                        if (skill39lvl < skill39lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText5, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText5, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledPlantera)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill40lvl < skill40lvlmax && skill39lvl >= 1 && KilledPlantera && SkillPoints >= 5)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill40lvl++;
                        SkillPoints -= 5; SpendedPoints += 5;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText5_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);  
            }
            #endregion
            #region skill41
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill41X, skill41Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill41Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill41Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill41Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill41lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill38lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText6, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill41lvl < skill41lvlmax && skill38lvl >= 1 && KilledWormorBrain && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill41lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill42
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill42X, skill42Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill42Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill42Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill42Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill42lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill38lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText7, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill42lvl < skill42lvlmax && skill38lvl >= 1 && KilledWormorBrain && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill42lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill43
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill43X, skill43Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill43Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill43Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill43Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText8, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText8).Y * 0.9f;

                switch (skill43lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value,Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill41lvl == 0 && skill42lvl == 0)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText9, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText9, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value,Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value,Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill43lvl < skill43lvlmax && (skill41lvl > 0 || skill42lvl > 0))
                {
                    if (skill43lvl == 0 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill43lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill43lvl == 1 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill43lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill43lvl == 2 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill43lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill43lvl == 3 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill43lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill43lvl == 4 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill43lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill43lvl == 5 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill43lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }

            #endregion
            #region skill44
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill44X, skill44Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill44Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill44Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill44Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText10, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText10).Y * 0.9f;

                switch (skill44lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(1))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(1))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (skill43lvl < skill43lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText10_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText10_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(1))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(1))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MinionNumberBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledCultist)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }

            

                if (Main.mouseLeft && Main.mouseLeftRelease && skill44lvl < skill44lvlmax && skill43lvl >= 1)
                {
                    if (skill44lvl == 0 && KilledSkeletron && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill44lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill44lvl == 1 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill44lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill44lvl == 2 && KilledPlantera && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill44lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                    else if (skill44lvl == 3 && KilledCultist && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill44lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }

                }
            }
            #endregion
            #region skill45
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill45X, skill45Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill45Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill45Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill45Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill45lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill44lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText11, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText11, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill45lvl < skill45lvlmax && skill44lvl >= 1 && KilledWoF && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill45lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill46
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill46X, skill46Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill46Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill46Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill46Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                float cantupgradepos = offset;
                if (skill47lvl < 1)
                {
                    if (skill46lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill45lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText12, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText12, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledAnyMechBoss)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText12_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                if (Main.mouseLeft && Main.mouseLeftRelease && skill46lvl < skill46lvlmax && skill45lvl >= 1 && KilledAnyMechBoss && skill47lvl < 1 && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill46lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }

            }
            #endregion
            #region skill47
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill47X, skill47Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill47Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill47Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill47Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                float cantupgradepos = offset;
                if (skill46lvl < 1)
                {
                    if (skill47lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill45lvl < 1)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText13, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledAnyMechBoss)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                if (Main.mouseLeft && Main.mouseLeftRelease && skill47lvl < skill47lvlmax && skill45lvl >= 1 && KilledAnyMechBoss && skill46lvl < 1 && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill47lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill48
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill48X, skill48Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill48Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill48Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill48Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                bool temp = skill47lvl >= 1 || skill46lvl >= 1;
                if (skill48lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 6 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (!temp)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText14, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText14, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill48lvl < skill48lvlmax && temp && KilledPlantera && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill48lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill49
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill49X, skill49Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill49Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill49Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais,Skill49Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText15, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText15).Y * 0.9f;

                switch (skill49lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill37lvl < skill37lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(7))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(7))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(8))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(8))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaCostBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }

            
                if (Main.mouseLeft && Main.mouseLeftRelease && skill49lvl < skill49lvlmax && skill37lvl >= 1)
                {
                    if (skill49lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill49lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill49lvl == 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill49lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill49lvl == 2 && KilledSkeletron && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill49lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill49lvl == 3 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill49lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill49lvl == 4 && KilledAnyMechBoss && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill49lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill49lvl == 5 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill49lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill50
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill50X, skill50Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill50Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill50Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill50Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill50lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill49lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText16, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill50lvl < skill50lvlmax && skill49lvl >= 1 && KilledWormorBrain && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill50lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill51
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill51X, skill51Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill51Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill51Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill51Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(45)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(45)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill39lvl == 0)
                {
                    if (skill51lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill50lvl < skill50lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText17, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText17, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledSkeletron)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill51lvl < skill51lvlmax && skill50lvl >= 1 && KilledSkeletron && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill51lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText17_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);                
            }
            #endregion
            #region skill53
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill53X, skill53Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill53Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill53Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill53Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText18, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText18).Y * 0.9f;

                switch (skill53lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill50lvl < skill50lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText18_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText18_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.MagicDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledCultist)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                if (Main.mouseLeft && Main.mouseLeftRelease && skill53lvl < skill53lvlmax && skill50lvl >= 1)
                {
                    if (skill53lvl == 0 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill53lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill53lvl == 1 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill53lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill53lvl == 2 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill53lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill53lvl == 3 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill53lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill53lvl == 4 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill53lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill53lvl == 5 && KilledCultist && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill53lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill54
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill54X, skill54Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill54Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill54Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill54Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill54lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill53lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText19, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText19, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill54lvl < skill54lvlmax && skill53lvl >= 1 && KilledSkeletron && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill54lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
               
            }
            #endregion
            #region skill55
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill55X, skill55Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill55Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill55Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill55Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText20, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText20).Y * 0.9f;

                switch (skill55lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value, Convert.ToString(1.3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value, Convert.ToString(1.3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill53lvl < skill53lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value, Convert.ToString(1.5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value, Convert.ToString(1.5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Wizard.ManaRegenBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }

               
                if (Main.mouseLeft && Main.mouseLeftRelease && skill55lvl < skill55lvlmax && skill53lvl >= 1)
                {
                    if (skill55lvl == 0 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill55lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill55lvl == 1 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill55lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill55lvl == 2 && KilledGolem && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill55lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }

                }
            }
            #endregion
            #region skill56
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill56X, skill56Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill56Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill56Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill56Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill56lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill54lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText21, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText21, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill56lvl < skill56lvlmax && skill54lvl >= 1 && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill56lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
             
            }
            #endregion
            #region skill57
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill57X, skill57Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill57Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill57Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill57Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill57lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill55lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText22, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill57lvl < skill57lvlmax && skill55lvl >= 1 && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill57lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
             
            }
            #endregion
            #region skill58
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill58X, skill58Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill58Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill58Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill58Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill58lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill56lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText23, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText23, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill58lvl < skill58lvlmax && skill56lvl >= 1 && KilledAnyMechBoss && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill58lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
             
            }
            #endregion
            #region skill59
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill59X, skill59Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill59Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill59Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill59Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill59lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill57lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText24, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText24, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill59lvl < skill59lvlmax && skill57lvl >= 1 && KilledAnyMechBoss && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill59lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }              
            }
            #endregion
            #region skill60
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill60X, skill60Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill60Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill60Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill60Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill60lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill58lvl < 1 && skill59lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText25, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText25, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill60lvl < skill60lvlmax && (skill58lvl >= 1 || skill59lvl >= 1) && KilledPlantera && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill60lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }              
            }
            #endregion
            #region skill61
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill61X, skill61Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill61Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill61Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill61Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(18)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(18)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4))), maxwidth)).Y;
                if (skill61lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill60lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText26, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText26, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill61lvl < skill61lvlmax && skill60lvl >= 1 && KilledGolem && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill61lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill62
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill62X, skill62Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill62Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill62Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill62Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(40)), maxwidth)).Y;
                if (skill62lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 8 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill61lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText27, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText27, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledCultist)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill62lvl < skill62lvlmax && skill61lvl >= 1 && KilledCultist && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill62lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill63
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill63X, skill63Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill63Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill63Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill63Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill63lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(6)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 6 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(6))).Y * 0.9f;
                    if (skill60lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText28, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText28, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill63lvl < skill63lvlmax && skill60lvl >= 1 && KilledGolem && SkillPoints >= 6)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill63lvl++;
                    SkillPoints -= 6; SpendedPoints += 6;
                }
            }
            #endregion
            #region skill64
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill64X, skill64Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill64Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill64Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, FinalSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(FinalSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.Yellow, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill64Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                bool temp = skill48lvl >= 1 || skill63lvl >= 1;
                if (skill64lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 9 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9))).Y * 0.9f;
                    if (!temp)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText29, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText29, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledCultist)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill64lvl < skill64lvlmax && temp && KilledCultist && SkillPoints >= 9)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill64lvl++;
                    SkillPoints -= 9; SpendedPoints += 9;
                }
            }
            #endregion
            #endregion
        }
        public void DrawThrowerTree(SpriteBatch sb)
        {
			#region Thrower's String
			string Skill122Name = this.GetLocalization("Skill.Thrower.Skill122Name").Value;
            string Skill123Name = this.GetLocalization("Skill.Thrower.Skill123Name").Value;
            string Skill124Name = this.GetLocalization("Skill.Thrower.Skill124Name").Value;
            string Skill125Name = this.GetLocalization("Skill.Thrower.Skill125Name").Value;
            string Skill126Name = this.GetLocalization("Skill.Thrower.Skill126Name").Value;
            string Skill127Name = this.GetLocalization("Skill.Thrower.Skill127Name").Value;
            string Skill128Name = this.GetLocalization("Skill.Thrower.Skill128Name").Value;
            string Skill129Name = this.GetLocalization("Skill.Thrower.Skill129Name").Value;
            string Skill130Name = this.GetLocalization("Skill.Thrower.Skill130Name").Value;
            string Skill131Name = this.GetLocalization("Skill.Thrower.Skill131Name").Value;
            string Skill132Name = this.GetLocalization("Skill.Thrower.Skill132Name").Value;
            string Skill133Name = this.GetLocalization("Skill.Thrower.Skill133Name").Value;
            string Skill134Name = this.GetLocalization("Skill.Thrower.Skill134Name").Value;
            string Skill135Name = this.GetLocalization("Skill.Thrower.Skill135Name").Value;
            string Skill136Name = this.GetLocalization("Skill.Thrower.Skill136Name").Value;
            string Skill137Name = this.GetLocalization("Skill.Thrower.Skill137Name").Value;
            string Skill138Name = this.GetLocalization("Skill.Thrower.Skill138Name").Value;
            string Skill139Name = this.GetLocalization("Skill.Thrower.Skill139Name").Value;
            string Skill140Name = this.GetLocalization("Skill.Thrower.Skill140Name").Value;
            string Skill141Name = this.GetLocalization("Skill.Thrower.Skill141Name").Value;
            string Skill142Name = this.GetLocalization("Skill.Thrower.Skill142Name").Value;
            string Skill143Name = this.GetLocalization("Skill.Thrower.Skill143Name").Value;
            string Skill144Name = this.GetLocalization("Skill.Thrower.Skill144Name").Value;
            string Skill146Name = this.GetLocalization("Skill.Thrower.Skill146Name").Value;
            string Skill147Name = this.GetLocalization("Skill.Thrower.Skill147Name").Value;

            string Skill122Tooltip = this.GetLocalization("Skill.Thrower.Skill122Tooltip").Value;
            string Skill123Tooltip = this.GetLocalization("Skill.Thrower.Skill123Tooltip").Value;
            string Skill124Tooltip = this.GetLocalization("Skill.Thrower.Skill124Tooltip").Value;
            string Skill125Tooltip = this.GetLocalization("Skill.Thrower.Skill125Tooltip").Value;
            string Skill126Tooltip = this.GetLocalization("Skill.Thrower.Skill126Tooltip").Value;
            string Skill127Tooltip = this.GetLocalization("Skill.Thrower.Skill127Tooltip").Value;
            string Skill128Tooltip = this.GetLocalization("Skill.Thrower.Skill128Tooltip").Value;
            string Skill129Tooltip = this.GetLocalization("Skill.Thrower.Skill129Tooltip").Value;
            string Skill130Tooltip = this.GetLocalization("Skill.Thrower.Skill130Tooltip").Value;
            string Skill131Tooltip = this.GetLocalization("Skill.Thrower.Skill131Tooltip").Value;
            string Skill132Tooltip = this.GetLocalization("Skill.Thrower.Skill132Tooltip").Value;
            string Skill133Tooltip = this.GetLocalization("Skill.Thrower.Skill133Tooltip").Value;
            string Skill134Tooltip = this.GetLocalization("Skill.Thrower.Skill134Tooltip").Value;
            string Skill135Tooltip = this.GetLocalization("Skill.Thrower.Skill135Tooltip").Value;
            string Skill136Tooltip = this.GetLocalization("Skill.Thrower.Skill136Tooltip").Value;
            string Skill137Tooltip = this.GetLocalization("Skill.Thrower.Skill137Tooltip").Value;
            string Skill138Tooltip = this.GetLocalization("Skill.Thrower.Skill138Tooltip").Value;
            string Skill139Tooltip = this.GetLocalization("Skill.Thrower.Skill139Tooltip").Value;
            string Skill140Tooltip = this.GetLocalization("Skill.Thrower.Skill140Tooltip").Value;
            string Skill141Tooltip = this.GetLocalization("Skill.Thrower.Skill141Tooltip").Value;
            string Skill142Tooltip = this.GetLocalization("Skill.Thrower.Skill142Tooltip").Value;
            string Skill143Tooltip = this.GetLocalization("Skill.Thrower.Skill143Tooltip").Value;
            string Skill144Tooltip = this.GetLocalization("Skill.Thrower.Skill144Tooltip").Value;
            string Skill146Tooltip = this.GetLocalization("Skill.Thrower.Skill146Tooltip").Value;
            string Skill147Tooltip = this.GetLocalization("Skill.Thrower.Skill147Tooltip").Value;

            string CantUpgrade = this.GetLocalization("Skill.CantUpgrade").Value;
            string ActiveSkillUpgrade = this.GetLocalization("Skill.ActiveSkillUpgrade").Value;
            string PassiveSkill = this.GetLocalization("Skill.PassiveSkill").Value;
            string SkillLevel = this.GetLocalization("Skill.SkillLevel").Value;
            string SPRequired = this.GetLocalization("Skill.SPRequired").Value;
            string UpgratedSkill = this.GetLocalization("Skill.UpgratedSkill").Value;
            string SkillRequired = this.GetLocalization("Skill.SkillRequired").Value;
            string UpgratedSkillMaxLevel = this.GetLocalization("Skill.UpgratedSkillMaxLevel").Value;
            string SkillOrRequired = this.GetLocalization("Skill.SkillOrRequired").Value;
            string ThrownVelocityBonus = this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value;
            string ThrownDamageBonus = this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value;
            string FinalSkill = this.GetLocalization("Skill.FinalSkill").Value;

            string ActiveSkill = this.GetLocalization("Skill.ActiveSkill").Value;
            string UniqueAbility = this.GetLocalization("Skill.UniqueAbility").Value;
            string UniqueAbilityUpgrade = this.GetLocalization("Skill.UniqueAbilityUpgrade").Value;
            string ActileSkillText = this.GetLocalization("Skill.ActileSkillText").Value;
            string SecondsDuration = this.GetLocalization("Skill.SecondsDuration").Value;
            string MinutesDuration = this.GetLocalization("Skill.MinutesDuration").Value;

            string DefeatWoB = this.GetLocalization("Skill.DefeatWoB").Value;
            string DefeatEoC = this.GetLocalization("Skill.DefeatEoC").Value;
            string DefeatSkeletron = this.GetLocalization("Skill.DefeatSkeletron").Value;
            string DefeatWoF = this.GetLocalization("Skill.DefeatWoF").Value;
            string DefeatAnyMech = this.GetLocalization("Skill.DefeatAnyMech").Value;
            string DefeatPlantera = this.GetLocalization("Skill.DefeatPlantera").Value;
            string DefeatGolem = this.GetLocalization("Skill.DefeatGolem").Value;
            string DefeatCultist = this.GetLocalization("Skill.DefeatCultist").Value;

            string fullText2 = string.Format(SkillRequired, Skill122Name);
            string fullText3 = string.Format(SkillRequired, Skill123Name);
            string fullText4 = string.Format(SkillRequired, Skill124Name);
            string fullText5 = string.Format(SkillRequired, Skill125Name);
            string fullText4_1 = string.Format(CantUpgrade, Skill127Name);
            string fullText6 = string.Format(SkillRequired, Skill123Name);
            string fullText6_1 = string.Format(CantUpgrade, Skill124Name);
            string fullText7 = string.Format(SkillRequired, Skill127Name);
            string fullText8 = string.Format(SkillRequired, Skill128Name);
            string fullText9 = string.Format(SkillLevel, skill130lvl, skill130lvlmax);
            string fullText10 = string.Format(SkillLevel, skill131lvl, skill131lvlmax);
            string fullText11 = string.Format(SkillOrRequired, Skill130Name, Skill131Name);
            string fullText12 = string.Format(SkillRequired, Skill132Name);
            string fullText13 = string.Format(SkillRequired, Skill133Name);
            string fullText14 = string.Format(SkillOrRequired, Skill134Name, Skill135Name);
            string fullText15 = string.Format(SkillRequired, Skill136Name);
            string fullText16 = string.Format(SkillRequired, Skill137Name);
            string fullText17 = string.Format(SkillRequired, Skill138Name);
            string fullText18 = string.Format(SkillRequired, Skill139Name);
            string fullText19 = string.Format(SkillRequired, Skill140Name);
            string fullText20 = string.Format(SkillRequired, Skill142Name);
            string fullText21 = string.Format(SkillRequired, Skill136Name);
            string fullText22 = string.Format(SkillOrRequired, Skill143Name, Skill144Name);
            #endregion
            bool MouseInFrame = Main.mouseX > Quests.FrameStart.X && Main.mouseX < Quests.FrameStart.X + Quests.FrameWidth && Main.mouseY > Quests.FrameStart.Y && Main.mouseY < Quests.FrameStart.Y + Quests.FrameHeight;
            #region update position
            skill122X = (int)(Quests.treecoord.X + 168);
            skill122Y = (int)(Quests.treecoord.Y + 6);
            skill123X = (int)(Quests.treecoord.X + 168);
            skill123Y = (int)(Quests.treecoord.Y + 108);
            skill124X = (int)(Quests.treecoord.X + 38);
            skill124Y = (int)(Quests.treecoord.Y + 174);
            skill125X = (int)(Quests.treecoord.X + 22);
            skill125Y = (int)(Quests.treecoord.Y + 280);
            skill126X = (int)(Quests.treecoord.X + 6);
            skill126Y = (int)(Quests.treecoord.Y + 386);
            skill127X = (int)(Quests.treecoord.X + 298);
            skill127Y = (int)(Quests.treecoord.Y + 174);
            skill128X = (int)(Quests.treecoord.X + 314);
            skill128Y = (int)(Quests.treecoord.Y + 280);
            skill129X = (int)(Quests.treecoord.X + 332);
            skill129Y = (int)(Quests.treecoord.Y + 386);
            skill130X = (int)(Quests.treecoord.X + 118);
            skill130Y = (int)(Quests.treecoord.Y + 206);
            skill131X = (int)(Quests.treecoord.X + 216);
            skill131Y = (int)(Quests.treecoord.Y + 206);
            skill132X = (int)(Quests.treecoord.X + 168);
            skill132Y = (int)(Quests.treecoord.Y + 304);
            skill133X = (int)(Quests.treecoord.X + 168);
            skill133Y = (int)(Quests.treecoord.Y + 398);
            skill134X = (int)(Quests.treecoord.X + 86);
            skill134Y = (int)(Quests.treecoord.Y + 450);
            skill135X = (int)(Quests.treecoord.X + 250);
            skill135Y = (int)(Quests.treecoord.Y + 450);
            skill136X = (int)(Quests.treecoord.X + 168);
            skill136Y = (int)(Quests.treecoord.Y + 552);
            skill137X = (int)(Quests.treecoord.X + 86);
            skill137Y = (int)(Quests.treecoord.Y + 606);
            skill138X = (int)(Quests.treecoord.X + 168);
            skill138Y = (int)(Quests.treecoord.Y + 648);
            skill139X = (int)(Quests.treecoord.X + 252);
            skill139Y = (int)(Quests.treecoord.Y + 606);
            skill140X = (int)(Quests.treecoord.X + 86);
            skill140Y = (int)(Quests.treecoord.Y + 694);
            skill141X = (int)(Quests.treecoord.X + 168);
            skill141Y = (int)(Quests.treecoord.Y + 744);
            skill142X = (int)(Quests.treecoord.X + 252);
            skill142Y = (int)(Quests.treecoord.Y + 694);
            skill143X = (int)(Quests.treecoord.X + 86);
            skill143Y = (int)(Quests.treecoord.Y + 790);
            skill144X = (int)(Quests.treecoord.X + 250);
            skill144Y = (int)(Quests.treecoord.Y + 790);
            skill146X = (int)(Quests.treecoord.X + 332);
            skill146Y = (int)(Quests.treecoord.Y + 554);
            skill147X = (int)(Quests.treecoord.X + 168);
            skill147Y = (int)(Quests.treecoord.Y + 834);        

            #endregion
            #region update colors
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill123X, skill123Y), 56, 56) || skill122lvl >= 1)
            {
                skill123color = Color.White;
            }
            else
                skill123color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill124X, skill124Y), 56, 56) || skill123lvl >= 1)
            {
                skill124color = Color.White;
            }
            else
                skill124color = Color.Gray;
            if (skill127lvl >= 1)
                skill124color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill125X, skill125Y), 56, 56) || skill124lvl >= 1)
            {
                skill125color = Color.White;
            }
            else
                skill125color = Color.Gray;
            if (skill127lvl >= 1)
                skill125color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill126X, skill126Y), 56, 56) || skill125lvl >= 1)
            {
                skill126color = Color.White;
            }
            else
                skill126color = Color.Gray;
            if (skill127lvl >= 1)
                skill126color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill127X, skill127Y), 56, 56) || skill123lvl >= 1)
            {
                skill127color = Color.White;
            }
            else
                skill127color = Color.Gray;
            if (skill124lvl >= 1)
                skill127color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill128X, skill128Y), 56, 56) || skill127lvl >= 1)
            {
                skill128color = Color.White;
            }
            else
                skill128color = Color.Gray;
            if (skill124lvl >= 1)
                skill128color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill129X, skill129Y), 56, 56) || skill128lvl >= 1)
            {
                skill129color = Color.White;
            }
            else
                skill129color = Color.Gray;
            if (skill124lvl >= 1)
                skill129color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill130X, skill130Y), 56, 56) || skill123lvl >= 1)
            {
                skill130color = Color.White;
            }
            else
                skill130color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill131X, skill131Y), 56, 56) || skill123lvl >= 1)
            {
                skill131color = Color.White;
            }
            else
                skill131color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill132X, skill132Y), 56, 56))
            {
                skill132color = Color.White;
            }
            else
                skill132color = Color.Gray;
            if (skill131lvl > 0 || skill130lvl > 0)
                skill132color = Color.White;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill133X, skill133Y), 56, 56) || skill132lvl >= 1)
            {
                skill133color = Color.White;
            }
            else
                skill133color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill134X, skill134Y), 56, 56) || skill133lvl >= 1)
            {
                skill134color = Color.White;
            }
            else
                skill134color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill135X, skill135Y), 56, 56) || skill133lvl >= 1)
            {
                skill135color = Color.White;
            }
            else
                skill135color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill136X, skill136Y), 56, 56))
            {
                skill136color = Color.White;
            }
            else
                skill136color = Color.Gray;
            if (skill134lvl > 0 || skill135lvl > 0)
                skill136color = Color.White;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill137X, skill137Y), 56, 56) || skill136lvl >= 1)
            {
                skill137color = Color.White;
            }
            else
                skill137color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill138X, skill138Y), 56, 56) || skill136lvl >= 1)
            {
                skill138color = Color.White;
            }
            else
                skill138color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill139X, skill139Y), 56, 56) || skill136lvl >= 1)
            {
                skill139color = Color.White;
            }
            else
                skill139color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill140X, skill140Y), 56, 56) || skill137lvl >= 1)
            {
                skill140color = Color.White;
            }
            else
                skill140color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill141X, skill141Y), 56, 56) || skill138lvl >= 1)
            {
                skill141color = Color.White;
            }
            else
                skill141color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill142X, skill142Y), 56, 56) || skill139lvl >= 1)
            {
                skill142color = Color.White;
            }
            else
                skill142color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill143X, skill143Y), 56, 56) || skill140lvl >= 1)
            {
                skill143color = Color.White;
            }
            else
                skill143color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill144X, skill144Y), 56, 56) || skill142lvl >= 1)
            {
                skill144color = Color.White;
            }
            else
                skill144color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill146X, skill146Y), 56, 56) || skill136lvl >= 1)
            {
                skill146color = Color.White;
            }
            else
                skill146color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill147X, skill147Y), 56, 56))
            {
                skill147color = Color.White;
            }
            else
                skill147color = Color.Gray;
            if (skill143lvl > 0 || skill144lvl > 0)
                skill147color = Color.White;
            #endregion
            #region skills draw
            Quests.DrawPart(sb, skill122texture, new Vector2(skill122X, skill122Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill122color);
            Quests.DrawPart(sb, skill123texture, new Vector2(skill123X, skill123Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill123color);
            Quests.DrawPart(sb, skill124texture, new Vector2(skill124X, skill124Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill124color);
            Quests.DrawPart(sb, skill125texture, new Vector2(skill125X, skill125Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill125color);
            Quests.DrawPart(sb, skill126texture, new Vector2(skill126X, skill126Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill126color);
            Quests.DrawPart(sb, skill127texture, new Vector2(skill127X, skill127Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill127color);
            Quests.DrawPart(sb, skill128texture, new Vector2(skill128X, skill128Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill128color);
            Quests.DrawPart(sb, skill129texture, new Vector2(skill129X, skill129Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill129color);
            Quests.DrawPart(sb, skill130texture, new Vector2(skill130X, skill130Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill130color);
            Quests.DrawPart(sb, skill131texture, new Vector2(skill131X, skill131Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill131color);
            Quests.DrawPart(sb, skill132texture, new Vector2(skill132X, skill132Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill132color);
            Quests.DrawPart(sb, skill133texture, new Vector2(skill133X, skill133Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill133color);
            Quests.DrawPart(sb, skill134texture, new Vector2(skill134X, skill134Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill134color);
            Quests.DrawPart(sb, skill135texture, new Vector2(skill135X, skill135Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill135color);
            Quests.DrawPart(sb, skill136texture, new Vector2(skill136X, skill136Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill136color);
            Quests.DrawPart(sb, skill137texture, new Vector2(skill137X, skill137Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill137color);
            Quests.DrawPart(sb, skill138texture, new Vector2(skill138X, skill138Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill138color);
            Quests.DrawPart(sb, skill139texture, new Vector2(skill139X, skill139Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill139color);
            Quests.DrawPart(sb, skill140texture, new Vector2(skill140X, skill140Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill140color);
            Quests.DrawPart(sb, skill141texture, new Vector2(skill141X, skill141Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill141color);
            Quests.DrawPart(sb, skill142texture, new Vector2(skill142X, skill142Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill142color);
            Quests.DrawPart(sb, skill143texture, new Vector2(skill143X, skill143Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill143color);
            Quests.DrawPart(sb, skill144texture, new Vector2(skill144X, skill144Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill144color);
            Quests.DrawPart(sb, skill146texture, new Vector2(skill146X, skill146Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill146color);
            Quests.DrawPart(sb, skill147texture, new Vector2(skill147X, skill147Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill147color);

            #endregion
            #region update border
            if (skill122lvl == skill122lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill122X - 6, skill122Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill123lvl == skill123lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill123X - 6, skill123Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill124lvl == skill124lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill124X - 6, skill124Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill125lvl == skill125lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill125X - 6, skill125Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill126lvl == skill126lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill126X - 6, skill126Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill127lvl == skill127lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill127X - 6, skill127Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill128lvl == skill128lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill128X - 6, skill128Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill129lvl == skill129lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill129X - 6, skill129Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill130lvl == skill130lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill130X - 6, skill130Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill131lvl == skill131lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill131X - 6, skill131Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill132lvl == skill132lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill132X - 6, skill132Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill133lvl == skill133lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill133X - 6, skill133Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill134lvl == skill134lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill134X - 6, skill134Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill135lvl == skill135lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill135X - 6, skill135Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill136lvl == skill136lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill136X - 6, skill136Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill137lvl == skill137lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill137X - 6, skill137Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill138lvl == skill138lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill138X - 6, skill138Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill139lvl == skill139lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill139X - 6, skill139Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill140lvl == skill140lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill140X - 6, skill140Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill141lvl == skill141lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill141X - 6, skill141Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill142lvl == skill142lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill142X - 6, skill142Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill143lvl == skill143lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill143X - 6, skill143Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill144lvl == skill144lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill144X - 6, skill144Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill146lvl == skill146lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill146X - 6, skill146Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill147lvl == skill147lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill147X - 6, skill147Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill124lvl == skill124lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill127X, skill127Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill128X, skill128Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill129X, skill129Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill127lvl == skill127lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill124X, skill124Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill125X, skill125Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill126X, skill126Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            #endregion
            #region skill mouse over and click
            #region skill122
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill122X, skill122Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill122Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill122Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill122Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill122lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;                 
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill122lvl < skill122lvlmax && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill122lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill123
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill123X, skill123Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill123Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill123Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill123Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill123lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill122lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText2, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText2, maxwidth)).Y * 0.9f;
                    }               
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill123lvl < skill123lvlmax && skill122lvl >= 1 && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill123lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill124
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill124X, skill124Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill124Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill124Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill124Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill127lvl == 0)
                {


                    if (skill124lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill123lvl < skill123lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledEoC)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill124lvl < skill124lvlmax && skill123lvl >= 1 && KilledEoC && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill124lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
            }
            #endregion
            #region skill125
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill125X, skill125Y), 56, 56))
            {
                 sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill125Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill125Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill125Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(1)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(5))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill127lvl == 0)
                {


                    if (skill125lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                        if (skill124lvl < skill124lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText4, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWormorBrain)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill125lvl < skill125lvlmax && skill124lvl >= 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill125lvl++;
                        SkillPoints -= 1;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

             
            }
            #endregion
            #region skill126
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill126X, skill126Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill126Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill126Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill126Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill127lvl == 0)
                {


                    if (skill126lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                        if (skill125lvl < skill125lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText5, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText5, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledWoF)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill126lvl < skill126lvlmax && skill125lvl >= 1 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill126lvl++;
                        SkillPoints -= 1;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

              
            }
            #endregion
            #region skill127
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill127X, skill127Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill127Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill127Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill127Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(12)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(12)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill124lvl == 0)
                {
                    if (skill127lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                        if (skill123lvl < skill123lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText6, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledEoC)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill127lvl < skill127lvlmax && skill123lvl >= 1 && KilledEoC && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill127lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);              
            }
            #endregion
            #region skill128
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill128X, skill128Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill128Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill128Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill128Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill124lvl == 0)
                {

                    if (skill128lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill127lvl < skill127lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText7, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledSkeletron)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill128lvl < skill128lvlmax && skill127lvl >= 1 && KilledSkeletron && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill128lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

              
            }
            #endregion
            #region skill129
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill129X, skill129Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill129Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill129Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill129Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(28)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(28)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(2)) + " " + string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(30))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill124lvl == 0)
                {

                    if (skill129lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill128lvl < skill128lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText8, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText8, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledPlantera)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }

                    if (Main.mouseLeft && Main.mouseLeftRelease && skill129lvl < skill129lvlmax && skill128lvl >= 1 && KilledPlantera && SkillPoints >= 4)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill129lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

             
            }
            #endregion
            #region skill130
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill130X, skill130Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill130Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill130Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill130Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText9, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText9).Y * 0.9f;
                switch (skill130lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill123lvl < skill123lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(7))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(7))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(8))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(8))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(10))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(10))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(12))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(12))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(15))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(15))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 6:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(18))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownVelocityBonus").Value, Convert.ToString(18))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
              
                
                if (Main.mouseLeft && Main.mouseLeftRelease && skill130lvl < skill130lvlmax && skill123lvl >= 1)
                {
                    if (skill130lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints--; SpendedPoints++;
                    }
                    else if (skill130lvl == 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill130lvl == 2 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill130lvl == 3 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill130lvl == 4 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill130lvl == 5 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill130lvl == 6 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill130lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill131
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill131X, skill131Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill131Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill131Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill131Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText10, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText10).Y * 0.9f;

                switch (skill131lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill123lvl < skill123lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value,  string.Format(this.GetLocalization("Skill.Thrower.ThrownDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
               
                if (Main.mouseLeft && Main.mouseLeftRelease && skill131lvl < skill131lvlmax && skill123lvl >= 1)
                {
                    if (skill131lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill131lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill131lvl == 1 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill131lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill131lvl == 2 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill131lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill131lvl == 3 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill131lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill131lvl == 4 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill131lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill131lvl == 5 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill131lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill132
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill132X, skill132Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill132Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill132Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill132Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                bool check = skill130lvl > 0 || skill131lvl > 0;
               if (skill132lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText11, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText11, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill132lvl < skill132lvlmax && check && KilledWormorBrain && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill132lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill133
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill133X, skill133Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill133Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill133Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill133Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill133lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill132lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText12, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText12, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill133lvl < skill133lvlmax && skill132lvl > 0 && KilledSkeletron && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill133lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill134
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill134X, skill134Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill134Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill134Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill134Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill134lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill133lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText13, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill134lvl < skill134lvlmax && skill133lvl > 0 && KilledWoF && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill134lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill135
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill135X, skill135Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill135Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill135Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill135Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill135lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill133lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText13, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill135lvl < skill135lvlmax && skill133lvl > 0 && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill135lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill136
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill136X, skill136Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill136Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill136Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill136Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                bool check = skill134lvl > 0 || skill135lvl > 0;
                if (skill136lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText14, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText14, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill136lvl < skill136lvlmax && check && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill136lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                    ReflectChanceForSkills += 35;
                }
            }
            #endregion
            #region skill137
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill137X, skill137Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill137Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill137Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill137Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill137lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill136lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill137lvl < skill137lvlmax && skill136lvl > 0 && KilledAnyMechBoss && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill137lvl++;
                    SkillPoints -= 1;
                }
            }
            #endregion
            #region skill138
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill138X, skill138Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill138Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill138Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill138Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill138lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill136lvl < skill136lvlmax)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill138lvl < skill138lvlmax && skill136lvl >= 1 && KilledPlantera && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill138lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }

               
            }
            #endregion
            #region skill139
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill139X, skill139Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill139Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill139Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill139Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill139lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill136lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill139lvl < skill139lvlmax && skill136lvl > 0 && KilledAnyMechBoss && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill139lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill140
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill140X, skill140Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill140Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill140Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill140Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill140lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill137lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText16, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill140lvl < skill140lvlmax && skill137lvl > 0 && KilledPlantera && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill140lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill141
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill141X, skill141Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill141Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Language.GetTextValue("Mods.Bismuth.Skill141Name")).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill141Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill141lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill138lvl < skill138lvlmax)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText17, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText17, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill141lvl < skill141lvlmax && skill138lvl >= 1 && KilledGolem && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill141lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill142
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill142X, skill142Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill142Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill142Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill142Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill142lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill139lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText18, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText18, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill142lvl < skill142lvlmax && skill139lvl >= 1 && KilledPlantera && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill142lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill143
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill143X, skill143Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill143Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill143Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill143Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill143lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill140lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText19, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText19, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill143lvl < skill143lvlmax && skill140lvl >= 1 && KilledGolem && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill143lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill144
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill144X, skill144Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill144Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill144Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill144Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill144lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill142lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill144lvl < skill144lvlmax && skill142lvl >= 1 && KilledGolem && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill144lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill146
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill146X, skill146Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill146Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill146Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill146Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill146lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(8)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 8 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(8))).Y * 0.9f;
                    if (skill136lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText21, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText21, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledGolem)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill146lvl < skill146lvlmax && skill136lvl >= 1 && KilledGolem && SkillPoints >= 8)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill146lvl++;
                    SkillPoints -= 8; SpendedPoints += 8;
                }
            }
            #endregion
            #region skill147
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill147X, skill147Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill147Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill147Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, FinalSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(FinalSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.Yellow, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill147Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                bool check = skill143lvl > 0 || skill144lvl > 0;
                if (skill147lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 9 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(9))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText22, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledCultist)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill147lvl < skill147lvlmax && check && KilledCultist && SkillPoints >= 9)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill147lvl++;
                    SkillPoints -= 9; SpendedPoints += 9;
                }
            }
            #endregion
            #endregion
        }
        public void DrawAssassinTree(SpriteBatch sb)
        {
            #region String Assassin
            string Skill65Name = this.GetLocalization("Skill.Assassin.Skill65Name").Value;
            string Skill66Name = this.GetLocalization("Skill.Assassin.Skill66Name").Value;
            string Skill67Name = this.GetLocalization("Skill.Assassin.Skill67Name").Value;
            string Skill68Name = this.GetLocalization("Skill.Assassin.Skill68Name").Value;
            string Skill69Name = this.GetLocalization("Skill.Assassin.Skill69Name").Value;
            string Skill70Name = this.GetLocalization("Skill.Assassin.Skill70Name").Value;
            string Skill71Name = this.GetLocalization("Skill.Assassin.Skill71Name").Value;
            string Skill72Name = this.GetLocalization("Skill.Assassin.Skill72Name").Value;
            string Skill73Name = this.GetLocalization("Skill.Assassin.Skill73Name").Value;
            string Skill75Name = this.GetLocalization("Skill.Assassin.Skill75Name").Value;
            string Skill76Name = this.GetLocalization("Skill.Assassin.Skill76Name").Value;
            string Skill77Name = this.GetLocalization("Skill.Assassin.Skill77Name").Value;
            string Skill78Name = this.GetLocalization("Skill.Assassin.Skill78Name").Value;
            string Skill79Name = this.GetLocalization("Skill.Assassin.Skill79Name").Value;
            string Skill80Name = this.GetLocalization("Skill.Assassin.Skill80Name").Value;
            string Skill81Name = this.GetLocalization("Skill.Assassin.Skill81Name").Value;
            string Skill82Name = this.GetLocalization("Skill.Assassin.Skill82Name").Value;
            string Skill83Name = this.GetLocalization("Skill.Assassin.Skill83Name").Value;
            string Skill84Name = this.GetLocalization("Skill.Assassin.Skill84Name").Value;
            string Skill85Name = this.GetLocalization("Skill.Assassin.Skill85Name").Value;
            string Skill86Name = this.GetLocalization("Skill.Assassin.Skill86Name").Value;
            string Skill87Name = this.GetLocalization("Skill.Assassin.Skill87Name").Value;
            string Skill88Name = this.GetLocalization("Skill.Assassin.Skill88Name").Value;
            string Skill89Name = this.GetLocalization("Skill.Assassin.Skill89Name").Value;
            string Skill90Name = this.GetLocalization("Skill.Assassin.Skill90Name").Value;

            string Skill65Tooltip = this.GetLocalization("Skill.Assassin.Skill65Tooltip").Value;
            string Skill66Tooltip = this.GetLocalization("Skill.Assassin.Skill66Tooltip").Value;
            string Skill67Tooltip = this.GetLocalization("Skill.Assassin.Skill67Tooltip").Value;
            string Skill68Tooltip = this.GetLocalization("Skill.Assassin.Skill68Tooltip").Value;
            string Skill69Tooltip = this.GetLocalization("Skill.Assassin.Skill69Tooltip").Value;
            string Skill70Tooltip = this.GetLocalization("Skill.Assassin.Skill70Tooltip").Value;
            string Skill71Tooltip = this.GetLocalization("Skill.Assassin.Skill71Tooltip").Value;
            string Skill72Tooltip = this.GetLocalization("Skill.Assassin.Skill72Tooltip").Value;
            string Skill73Tooltip = this.GetLocalization("Skill.Assassin.Skill73Tooltip").Value;
            string Skill75Tooltip = this.GetLocalization("Skill.Assassin.Skill75Tooltip").Value;
            string Skill76Tooltip = this.GetLocalization("Skill.Assassin.Skill76Tooltip").Value;
            string Skill77Tooltip = this.GetLocalization("Skill.Assassin.Skill77Tooltip").Value;
            string Skill78Tooltip = this.GetLocalization("Skill.Assassin.Skill78Tooltip").Value;
            string Skill79Tooltip = this.GetLocalization("Skill.Assassin.Skill79Tooltip").Value;
            string Skill80Tooltip = this.GetLocalization("Skill.Assassin.Skill80Tooltip").Value;
            string Skill81Tooltip = this.GetLocalization("Skill.Assassin.Skill81Tooltip").Value;
            string Skill82Tooltip = this.GetLocalization("Skill.Assassin.Skill82Tooltip").Value;
            string Skill83Tooltip = this.GetLocalization("Skill.Assassin.Skill83Tooltip").Value;
            string Skill84Tooltip = this.GetLocalization("Skill.Assassin.Skill84Tooltip").Value;
            string Skill85Tooltip = this.GetLocalization("Skill.Assassin.Skill85Tooltip").Value;
            string Skill86Tooltip = this.GetLocalization("Skill.Assassin.Skill86Tooltip").Value;
            string Skill87Tooltip = this.GetLocalization("Skill.Assassin.Skill87Tooltip").Value;
            string Skill88Tooltip = this.GetLocalization("Skill.Assassin.Skill88Tooltip").Value;
            string Skill89Tooltip = this.GetLocalization("Skill.Assassin.Skill89Tooltip").Value;
            string Skill90Tooltip = this.GetLocalization("Skill.Assassin.Skill90Tooltip").Value;

            string CantUpgrade = this.GetLocalization("Skill.CantUpgrade").Value;
            string ActiveSkillUpgrade = this.GetLocalization("Skill.ActiveSkillUpgrade").Value;
            string PassiveSkill = this.GetLocalization("Skill.PassiveSkill").Value;
            string SkillLevel = this.GetLocalization("Skill.SkillLevel").Value;
            string SPRequired = this.GetLocalization("Skill.SPRequired").Value;
            string UpgratedSkill = this.GetLocalization("Skill.UpgratedSkill").Value;
            string SkillRequired = this.GetLocalization("Skill.SkillRequired").Value;
            string UpgratedSkillMaxLevel = this.GetLocalization("Skill.UpgratedSkillMaxLevel").Value;
            string SkillOrRequired = this.GetLocalization("Skill.SkillOrRequired").Value;
            string MoveSpeedBonus = this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value;
            string AllCritBonus = this.GetLocalization("Skill.Assassin.AllCritBonus").Value;
            string AssassinDamageBonus = this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value;
            string FinalSkill = this.GetLocalization("Skill.FinalSkill").Value;

            string ActiveSkill = this.GetLocalization("Skill.ActiveSkill").Value;
            string UniqueAbility = this.GetLocalization("Skill.UniqueAbility").Value;
            string UniqueAbilityUpgrade = this.GetLocalization("Skill.UniqueAbilityUpgrade").Value;
            string ActileSkillText = this.GetLocalization("Skill.ActileSkillText").Value;
            string SecondsDuration = this.GetLocalization("Skill.SecondsDuration").Value;
            string MinutesDuration = this.GetLocalization("Skill.MinutesDuration").Value;

            string DefeatWoB = this.GetLocalization("Skill.DefeatWoB").Value;
            string DefeatEoC = this.GetLocalization("Skill.DefeatEoC").Value;
            string DefeatSkeletron = this.GetLocalization("Skill.DefeatSkeletron").Value;
            string DefeatWoF = this.GetLocalization("Skill.DefeatWoF").Value;
            string DefeatAnyMech = this.GetLocalization("Skill.DefeatAnyMech").Value;
            string DefeatPlantera = this.GetLocalization("Skill.DefeatPlantera").Value;
            string DefeatGolem = this.GetLocalization("Skill.DefeatGolem").Value;
            string DefeatCultist = this.GetLocalization("Skill.DefeatCultist").Value;

            string fullText2 = string.Format(SkillRequired, Skill65Name);
            string fullText3 = string.Format(SkillRequired, Skill66Name);
            string fullText4 = string.Format(SkillLevel, skill68lvl, skill68lvlmax);
            string fullText4_1 = string.Format(SkillRequired, Skill66Name);
            string fullText5 = string.Format(SkillRequired, Skill68Name);
            string fullText6 = string.Format(SkillRequired, Skill69Name);
            string fullText7 = string.Format(SkillRequired, Skill70Name);
            string fullText8 = string.Format(SkillRequired, Skill68Name);
            string fullText9 = string.Format(SkillRequired, Skill72Name);
            string fullText10 = string.Format(SkillRequired, Skill73Name);
            string fullText11 = string.Format(SkillLevel, skill76lvl, skill76lvlmax);
            string fullText11_1 = string.Format(SkillRequired, Skill68Name);
            string fullText12 = string.Format(SkillLevel, skill77lvl, skill77lvlmax);
            string fullText12_1 = string.Format(SkillRequired, Skill76Name);
            string fullText13 = string.Format(SkillRequired, Skill77Name);
            string fullText14 = string.Format(SkillRequired, Skill77Name);
            string fullText15 = string.Format(SkillRequired, Skill78Name);
            string fullText16 = string.Format(SkillRequired, Skill79Name);
            string fullText17 = string.Format(SkillOrRequired, Skill80Name, Skill81Name);
            string fullText18 = string.Format(SkillRequired, Skill83Name);
            string fullText19 = string.Format(SkillRequired, Skill82Name);
            string fullText20 = string.Format(SkillRequired, Skill85Name);
            string fullText20_1 = string.Format(CantUpgrade, Skill89Name);
            string fullText21 = string.Format(SkillRequired, Skill86Name);
            string fullText21_1 = string.Format(CantUpgrade, Skill89Name);
            string fullText22 = string.Format(SkillRequired, Skill87Name);
            string fullText22_1 = string.Format(CantUpgrade, Skill89Name);
            string fullText23 = string.Format(SkillRequired, Skill85Name);
            string fullText23_1 = string.Format(CantUpgrade, Skill86Name);
            string fullText24 = string.Format(SkillRequired, Skill85Name);
            #endregion
            bool MouseInFrame = Main.mouseX > Quests.FrameStart.X && Main.mouseX < Quests.FrameStart.X + Quests.FrameWidth && Main.mouseY > Quests.FrameStart.Y && Main.mouseY < Quests.FrameStart.Y + Quests.FrameHeight;
            #region update position
            skill65X = (int)(Quests.treecoord.X + 310);
            skill65Y = (int)(Quests.treecoord.Y + 6);
            skill66X = (int)(Quests.treecoord.X + 310);
            skill66Y = (int)(Quests.treecoord.Y + 98);
            skill67X = (int)(Quests.treecoord.X + 404);
            skill67Y = (int)(Quests.treecoord.Y + 118);
            skill68X = (int)(Quests.treecoord.X + 310);
            skill68Y = (int)(Quests.treecoord.Y + 190);
            skill69X = (int)(Quests.treecoord.X + 428);
            skill69Y = (int)(Quests.treecoord.Y + 220);
            skill70X = (int)(Quests.treecoord.X + 532);
            skill70Y = (int)(Quests.treecoord.Y + 272);
            skill71X = (int)(Quests.treecoord.X + 646);
            skill71Y = (int)(Quests.treecoord.Y + 288);
            skill72X = (int)(Quests.treecoord.X + 224);
            skill72Y = (int)(Quests.treecoord.Y + 252);
            skill73X = (int)(Quests.treecoord.X + 208);
            skill73Y = (int)(Quests.treecoord.Y + 364);
            skill75X = (int)(Quests.treecoord.X + 102);
            skill75Y = (int)(Quests.treecoord.Y + 380);
            skill76X = (int)(Quests.treecoord.X + 310);
            skill76Y = (int)(Quests.treecoord.Y + 286);
            skill77X = (int)(Quests.treecoord.X + 310);
            skill77Y = (int)(Quests.treecoord.Y + 378);
            skill78X = (int)(Quests.treecoord.X + 248);
            skill78Y = (int)(Quests.treecoord.Y + 476);
            skill79X = (int)(Quests.treecoord.X + 372);
            skill79Y = (int)(Quests.treecoord.Y + 476);
            skill80X = (int)(Quests.treecoord.X + 222);
            skill80Y = (int)(Quests.treecoord.Y + 578);
            skill81X = (int)(Quests.treecoord.X + 396);
            skill81Y = (int)(Quests.treecoord.Y + 578);
            skill82X = (int)(Quests.treecoord.X + 312);
            skill82Y = (int)(Quests.treecoord.Y + 678);
            skill83X = (int)(Quests.treecoord.X + 102);
            skill83Y = (int)(Quests.treecoord.Y + 28);
            skill84X = (int)(Quests.treecoord.X + 102);
            skill84Y = (int)(Quests.treecoord.Y + 118);
            skill85X = (int)(Quests.treecoord.X + 312);
            skill85Y = (int)(Quests.treecoord.Y + 768);
            skill86X = (int)(Quests.treecoord.X + 210);
            skill86Y = (int)(Quests.treecoord.Y + 794);
            skill87X = (int)(Quests.treecoord.X + 108);
            skill87Y = (int)(Quests.treecoord.Y + 818);
            skill88X = (int)(Quests.treecoord.X + 6);
            skill88Y = (int)(Quests.treecoord.Y + 844);
            skill89X = (int)(Quests.treecoord.X + 414);
            skill89Y = (int)(Quests.treecoord.Y + 794);
            skill90X = (int)(Quests.treecoord.X + 312);
            skill90Y = (int)(Quests.treecoord.Y + 858);
         
            #endregion
            #region update colors
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill66X, skill66Y), 56, 56) || skill65lvl >= 1)
            {
                skill66color = Color.White;
            }
            else
                skill66color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill67X, skill67Y), 56, 56) || skill66lvl >= 1)
            {
                skill67color = Color.White;
            }
            else
                skill67color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill68X, skill68Y), 56, 56) || skill66lvl >= 1)
            {
                skill68color = Color.White;
            }
            else
                skill68color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill69X, skill69Y), 56, 56) || skill68lvl >= 1)
            {
                skill69color = Color.White;
            }
            else
                skill69color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill70X, skill70Y), 56, 56) || skill69lvl >= 1)
            {
                skill70color = Color.White;
            }
            else
                skill70color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill71X, skill71Y), 56, 56) || skill70lvl >= 1)
            {
                skill71color = Color.White;
            }
            else
                skill71color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill72X, skill72Y), 56, 56) || skill68lvl >= 1)
            {
                skill72color = Color.White;
            }
            else
                skill72color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill73X, skill73Y), 56, 56) || skill72lvl >= 1)
            {
                skill73color = Color.White;
            }
            else
                skill73color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill75X, skill75Y), 56, 56) || skill73lvl >= 1)
            {
                skill75color = Color.White;
            }
            else
                skill75color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill76X, skill76Y), 56, 56) || skill68lvl >= 1)
            {
                skill76color = Color.White;
            }
            else
                skill76color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill77X, skill77Y), 56, 56) || skill76lvl >= 1)
            {
                skill77color = Color.White;
            }
            else
                skill77color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill78X, skill78Y), 56, 56) || skill77lvl >= 1)
            {
                skill78color = Color.White;
            }
            else
                skill78color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill79X, skill79Y), 56, 56) || skill77lvl >= 1)
            {
                skill79color = Color.White;
            }
            else
                skill79color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill80X, skill80Y), 56, 56) || skill78lvl >= 1)
            {
                skill80color = Color.White;
            }
            else
                skill80color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill81X, skill81Y), 56, 56) || skill79lvl >= 1)
            {
                skill81color = Color.White;
            }
            else
                skill81color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill82X, skill82Y), 56, 56))
            {
                skill82color = Color.White;
            }
            else
                skill82color = Color.Gray;
            if (skill80lvl >= 1 || skill81lvl >= 1)
            {
                skill82color = Color.White;
            }

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill84X, skill84Y), 56, 56) || skill83lvl >= 1)
            {
                skill84color = Color.White;
            }
            else
                skill84color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill85X, skill85Y), 56, 56) || skill82lvl >= 1)
            {
                skill85color = Color.White;
            }
            else
                skill85color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill86X, skill86Y), 56, 56) || skill85lvl >= 1)
            {
                skill86color = Color.White;
            }
            else
                skill86color = Color.Gray;
            if (skill89lvl >= 1)
                skill86color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill87X, skill87Y), 56, 56) || skill86lvl >= 1)
            {
                skill87color = Color.White;
            }
            else
                skill87color = Color.Gray;
            if (skill89lvl >= 1)
                skill87color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill88X, skill88Y), 56, 56) || skill87lvl >= 1)
            {
                skill88color = Color.White;
            }
            else
                skill88color = Color.Gray;
            if (skill89lvl >= 1)
                skill88color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill89X, skill89Y), 56, 56) || skill85lvl >= 1)
            {
                skill89color = Color.White;
            }
            else
                skill89color = Color.Gray;
            if (skill86lvl >= 1)
                skill89color = Color.Gray;

            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill90X, skill90Y), 56, 56) || skill85lvl >= 1)
            {
                skill90color = Color.White;
            }
            else
                skill90color = Color.Gray;
            #endregion
            #region skills draw           
            Quests.DrawPart(sb, skill65texture, new Vector2(skill65X, skill65Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill65color);
            Quests.DrawPart(sb, skill66texture, new Vector2(skill66X, skill66Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill66color);
            Quests.DrawPart(sb, skill67texture, new Vector2(skill67X, skill67Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill67color);
            Quests.DrawPart(sb, skill68texture, new Vector2(skill68X, skill68Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill68color);
            Quests.DrawPart(sb, skill69texture, new Vector2(skill69X, skill69Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill69color);
            Quests.DrawPart(sb, skill70texture, new Vector2(skill70X, skill70Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill70color);
            Quests.DrawPart(sb, skill71texture, new Vector2(skill71X, skill71Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill71color);
            Quests.DrawPart(sb, skill72texture, new Vector2(skill72X, skill72Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill72color);
            Quests.DrawPart(sb, skill73texture, new Vector2(skill73X, skill73Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill73color);
            Quests.DrawPart(sb, skill75texture, new Vector2(skill75X, skill75Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill75color);
            Quests.DrawPart(sb, skill76texture, new Vector2(skill76X, skill76Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill76color);
            Quests.DrawPart(sb, skill77texture, new Vector2(skill77X, skill77Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill77color);
            Quests.DrawPart(sb, skill78texture, new Vector2(skill78X, skill78Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill78color);
            Quests.DrawPart(sb, skill79texture, new Vector2(skill79X, skill79Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill79color);
            Quests.DrawPart(sb, skill80texture, new Vector2(skill80X, skill80Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill80color);
            Quests.DrawPart(sb, skill81texture, new Vector2(skill81X, skill81Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill81color);
            Quests.DrawPart(sb, skill82texture, new Vector2(skill82X, skill82Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill82color);
            Quests.DrawPart(sb, skill83texture, new Vector2(skill83X, skill83Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill83color);
            Quests.DrawPart(sb, skill84texture, new Vector2(skill84X, skill84Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill84color);
            Quests.DrawPart(sb, skill85texture, new Vector2(skill85X, skill85Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill85color);
            Quests.DrawPart(sb, skill86texture, new Vector2(skill86X, skill86Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill86color);
            Quests.DrawPart(sb, skill87texture, new Vector2(skill87X, skill87Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill87color);
            Quests.DrawPart(sb, skill88texture, new Vector2(skill88X, skill88Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill88color);
            Quests.DrawPart(sb, skill89texture, new Vector2(skill89X, skill89Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill89color);
            Quests.DrawPart(sb, skill90texture, new Vector2(skill90X, skill90Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, skill90color);
            #endregion
            #region update border
            if (skill65lvl == skill65lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill65X - 6, skill65Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill66lvl == skill66lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill66X - 6, skill66Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill67lvl == skill67lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill67X - 6, skill67Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill68lvl == skill68lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill68X - 6, skill68Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill69lvl == skill69lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill69X - 6, skill69Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill70lvl == skill70lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill70X - 6, skill70Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill71lvl == skill71lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill71X - 6, skill71Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill72lvl == skill72lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill72X - 6, skill72Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill73lvl == skill73lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill73X - 6, skill73Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill75lvl == skill75lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill75X - 6, skill75Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill76lvl == skill76lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill76X - 6, skill76Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill77lvl == skill77lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill77X - 6, skill77Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill78lvl == skill78lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill78X - 6, skill78Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill79lvl == skill79lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill79X - 6, skill79Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill80lvl == skill80lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill80X - 6, skill80Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill81lvl == skill81lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill81X - 6, skill81Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill82lvl == skill82lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill82X - 6, skill82Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill83lvl == skill83lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill83X - 6, skill83Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill84lvl == skill84lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill84X - 6, skill84Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill85lvl == skill85lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill85X - 6, skill85Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White); 
            if (skill86lvl == skill86lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill86X - 6, skill86Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill87lvl == skill87lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill87X - 6, skill87Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill88lvl == skill88lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill88X - 6, skill88Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill89lvl == skill89lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill89X - 6, skill89Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill90lvl == skill90lvlmax)
                Quests.DrawPart(sb, UpdatedSkill, new Vector2(skill90X - 6, skill90Y - 6), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            if (skill86lvl == skill86lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill89X, skill89Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            if (skill89lvl == skill89lvlmax)
            {
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill86X, skill86Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill87X, skill87Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
                Quests.DrawPart(sb, ClosedSkill, new Vector2(skill88X, skill88Y), Quests.FrameStart, Quests.FrameWidth, Quests.FrameHeight, Color.White);
            }
            #endregion
            #region skill mouse over and click
            #region skill65
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill65X, skill65Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill65Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill65Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill65Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill65lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;               
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill65lvl < skill65lvlmax && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill65lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill66
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill66X, skill66Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill66Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill66Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill66Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill66lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill65lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText2, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText2, maxwidth)).Y * 0.9f;                    
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill66lvl < skill66lvlmax && skill65lvl >= 1 && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill66lvl++;
                    SkillPoints--; SpendedPoints++;
                }
            }
            #endregion
            #region skill67
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill67X, skill67Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill67Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill67Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill67Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill67lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill66lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText3, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText3, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill67lvl < skill67lvlmax && skill66lvl >= 1 && KilledWormorBrain && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill67lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill68
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill68X, skill68Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill68Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill68Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill68Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText4, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText4).Y * 0.9f;

                switch (skill68lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill66lvl < skill66lvlmax)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText4_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText4_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledEoC)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value,  Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWormorBrain)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, 1), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, 1), maxwidth)).Y * 0.9f;
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(6))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(6))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(9))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(9))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 6:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(11))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.MoveSpeedBonus").Value, Convert.ToString(11))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
            
                if (Main.mouseLeft && Main.mouseLeftRelease && skill68lvl < skill68lvlmax && skill66lvl >= 1)
                {
                    if (skill68lvl == 0 && KilledEoC && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints--; SpendedPoints++;
                    }
                    else if (skill68lvl == 1 && KilledWormorBrain && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill68lvl == 2 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill68lvl == 3 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill68lvl == 4 && KilledAnyMechBoss && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill68lvl == 5 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill68lvl == 6 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill68lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill69
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill69X, skill69Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill69Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill69Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill69Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(12))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(4)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(12))), maxwidth)).Y;

                if (skill69lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill68lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText5, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText5, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledEoC)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatEoC, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill69lvl < skill69lvlmax && skill68lvl >= 1 && KilledEoC && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill69lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill70
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill70X, skill70Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill70Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill70Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill70Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(12))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(12))), maxwidth)).Y;

                if (skill70lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill69lvl < skill69lvlmax)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText6, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText6, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWormorBrain)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoB, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill70lvl < skill70lvlmax && skill69lvl >= 1 && KilledWormorBrain && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill70lvl++;
                    SkillPoints -= 1;
                }

               
            }
            #endregion
            #region skill71
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill71X, skill71Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill71Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill71Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill71Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(12))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(6)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(12))), maxwidth)).Y;

                if (skill71lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill70lvl < skill70lvlmax)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText7, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText7, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }
                if (Main.mouseLeft && Main.mouseLeftRelease && skill71lvl < skill71lvlmax && skill70lvl >= 1 && KilledSkeletron && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill71lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }

             
            }
            #endregion
            #region skill72
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill72X, skill72Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill72Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill72Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UniqueAbility, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(UniqueAbility).X / 2) * 0.85f, Main.mouseY + 44, new Color(80, 18, 141), Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill72Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill72lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                    if (skill68lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText8, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText8, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledSkeletron)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill72lvl < skill72lvlmax && skill68lvl >= 1 && KilledSkeletron && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill72lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill73
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill73X, skill73Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill73Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill73Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UniqueAbilityUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(UniqueAbilityUpgrade).X / 2) * 0.85f, Main.mouseY + 44, new Color(120, 28, 213), Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill73Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill73lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill72lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText9, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText9, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill73lvl < skill73lvlmax && skill72lvl >= 1 && KilledWoF && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill73lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion      
            #region skill75
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill75X, skill75Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill75Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill75Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UniqueAbilityUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(UniqueAbilityUpgrade).X / 2) * 0.85f, Main.mouseY + 44, new Color(120, 28, 213), Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill75Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                if (skill75lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill73lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText10, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText10, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill75lvl < skill75lvlmax && skill73lvl > 0 && KilledPlantera && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill75lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill76
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill76X, skill76Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill76Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill76Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill76Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText11, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText11).Y * 0.9f;

                switch (skill76lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, 2), maxwidth)).Y * 0.9f;
                            if (skill68lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText11_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText11_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(7))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AllCritBonus").Value, Convert.ToString(7))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
             
                if (Main.mouseLeft && Main.mouseLeftRelease && skill76lvl < skill76lvlmax && skill68lvl >= 1)
                {
                    if (skill76lvl == 0 && KilledSkeletron && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill76lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill76lvl == 1 && KilledWoF && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill76lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill76lvl == 2 && KilledAnyMechBoss && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill76lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill76lvl == 3 && KilledPlantera && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill76lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill76lvl == 4 && KilledGolem && SkillPoints >= 5)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill76lvl++;
                        SkillPoints -= 5; SpendedPoints += 5;
                    }
                }
            }
            #endregion
            #region skill77
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill77X, skill77Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill77Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill77Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill77Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, fullText12, Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(fullText12).Y * 0.9f;
                switch (skill77lvl)
                {
                    case 0:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(2))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(2))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (skill76lvl < 1)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText12_1, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText12_1, maxwidth)).Y * 0.9f;
                            }
                            if (!KilledSkeletron)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatSkeletron, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 1:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledWoF)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 2:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(3))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth)).Y * 0.9f;
                            if (!KilledAnyMechBoss)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 3:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(4))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(4))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth)).Y * 0.9f;
                            if (!KilledPlantera)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 4:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledGolem)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    case 5:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(5))), maxwidth), Main.mouseX + 44, offset + 4, Color.White, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SkillLevelBonus").Value, string.Format(this.GetLocalization("Skill.Assassin.AssassinDamageBonus").Value, Convert.ToString(5))), maxwidth)).Y * 0.9f;
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth)).Y * 0.9f;
                            if (!KilledCultist)
                            {
                                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            }
                            break;
                        }
                    default:
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth), Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, UpgratedSkillMaxLevel, maxwidth)).Y * 0.9f;
                            break;
                        }
                }
               
                if (Main.mouseLeft && Main.mouseLeftRelease && skill77lvl < skill77lvlmax && skill76lvl >= 1)
                {
                    if (skill77lvl == 0 && KilledSkeletron && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill77lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill77lvl == 1 && KilledWoF && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill77lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill77lvl == 2 && KilledAnyMechBoss && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill77lvl++;
                        SkillPoints -= 1;
                    }
                    else if (skill77lvl == 3 && KilledPlantera && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill77lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                    else if (skill77lvl == 4 && KilledGolem && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill77lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                    else if (skill77lvl == 5 && KilledCultist && SkillPoints >= 3)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill77lvl++;
                        SkillPoints -= 3; SpendedPoints += 3;
                    }
                }
            }
            #endregion
            #region skill78
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill78X, skill78Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill78Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill78Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill78Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                if (skill78lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill77lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText13, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText13, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill78lvl < skill78lvlmax && skill77lvl >= 1 && KilledWoF && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill78lvl++;
                    SkillPoints -= 1;
                }
            }
            #endregion
            #region skill79
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill79X, skill79Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill79Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill79Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill79Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                if (skill79lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (skill77lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText14, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText14, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill79lvl < skill79lvlmax && skill77lvl >= 1 && KilledWoF && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill79lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill80 
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill80X, skill80Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill80Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill80Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill80Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;

                if (skill80lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill78lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText15, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText15, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill80lvl < skill80lvlmax && skill78lvl >= 1 && KilledAnyMechBoss && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill80lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }

            }
            #endregion
            #region skill81
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill81X, skill81Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill81Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill81Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill81Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                if (skill81lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                    if (skill79lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText16, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText16, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledAnyMechBoss)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatAnyMech, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill81lvl < skill81lvlmax && skill79lvl >= 1 && KilledAnyMechBoss && SkillPoints >= 1)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill81lvl++;
                    SkillPoints -= 1;
                }
            }
            #endregion
            #region skill82
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill82X, skill82Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill82Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill82Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill82Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                bool check = skill80lvl >= 1 || skill81lvl >= 1;
                if (skill82lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 3 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(3))).Y * 0.9f;
                    if (!check)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais,fullText17, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText17, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill82lvl < skill82lvlmax && check && KilledPlantera && SkillPoints >= 3)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill82lvl++;
                    SkillPoints -= 3; SpendedPoints += 3;
                }
            }
            #endregion
            #region skill83
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill83X, skill83Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill83Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill83Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill83Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                if (skill83lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;                    
                    if (!KilledWoF)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais,DefeatWoF, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill83lvl < skill83lvlmax && KilledWoF && SkillPoints >= 4)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill83lvl++;
                    SkillPoints -= 4; SpendedPoints += 4;
                }
            }
            #endregion
            #region skill84
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill84X, skill84Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill84Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill84Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill84Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;



                if (skill84lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                    if (skill83lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText18, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText18, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill84lvl < skill84lvlmax && skill83lvl > 0 && KilledPlantera && SkillPoints >= 2)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill84lvl++;
                    SkillPoints -= 2; SpendedPoints += 2;
                }
            }
            #endregion
            #region skill85            
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill85X, skill85Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill85Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill85Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, PassiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(PassiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.LightGreen, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill85Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                if (skill85lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 5 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(5))).Y * 0.9f;
                    if (skill82lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText19, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText19, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledPlantera)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatPlantera, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill85lvl < skill85lvlmax && skill82lvl >= 1 && KilledPlantera && SkillPoints >= 5)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill85lvl++;
                    SkillPoints -= 5; SpendedPoints += 5;
                }
            }
            #endregion
            #region skill86
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill86X, skill86Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill86Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill86Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill86Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(15)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(15)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill89lvl == 0)
                {

                    if (skill86lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill85lvl < skill85lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText20, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledGolem)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }
                    if (Main.mouseLeft && Main.mouseLeftRelease && skill86lvl < skill86lvlmax && skill85lvl >= 1 && KilledGolem && SkillPoints >= 4 && skill89lvl < 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill86lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText20_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

              
            }
            #endregion
            #region skill87
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill87X, skill87Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill87Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill87Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill87Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(20)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill89lvl == 0)
                {


                    if (skill87lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 2 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(2))).Y * 0.9f;
                        if (skill86lvl < skill86lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText21, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText21, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledGolem)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill87lvl < skill87lvlmax && skill86lvl >= 1 && KilledGolem && SkillPoints >= 2)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill87lvl++;
                        SkillPoints -= 2; SpendedPoints += 2;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText21_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);

           
            }
            #endregion
            #region skill88
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill88X, skill88Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill88Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill88Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkillUpgrade, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkillUpgrade).X / 2) * 0.85f, Main.mouseY + 44, Color.OrangeRed, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill88Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(25)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill89lvl == 0)
                {


                    if (skill88lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 1 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(1))).Y * 0.9f;
                        if (skill87lvl < skill87lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText22, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledCultist)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill88lvl < skill88lvlmax && skill87lvl >= 1 && KilledCultist && SkillPoints >= 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill88lvl++;
                        SkillPoints -= 1;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText22_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);


            
            }
            #endregion
            #region skill89
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill89X, skill89Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill89Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill89Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, ActiveSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(ActiveSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.DarkOrange, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill89Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(48)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth), Main.mouseX + 44, offset + 4, Color.LightSkyBlue, Color.Black, new Vector2(), 0.9f);
                offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.ActileSkillText").Value, string.Format(this.GetLocalization("Skill.SecondsDuration").Value, Convert.ToString(48)), string.Format(this.GetLocalization("Skill.MinutesDuration").Value, Convert.ToString(3))), maxwidth)).Y;
                float cantupgradepos = offset;

                if (skill86lvl == 0)
                {


                    if (skill89lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 4 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(4))).Y * 0.9f;
                        if (skill85lvl < skill85lvlmax)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText23, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                            offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText23, maxwidth)).Y * 0.9f;
                        }
                        if (!KilledGolem)
                        {
                            Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatGolem, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        }
                    }
                    else
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                    }



                    if (Main.mouseLeft && Main.mouseLeftRelease && skill89lvl < skill89lvlmax && skill85lvl >= 1 && KilledGolem && SkillPoints >= 4 && skill86lvl < 1)
                    {
                        SoundEngine.PlaySound(SoundID.MenuOpen);
                        skill89lvl++;
                        SkillPoints -= 4; SpendedPoints += 4;
                    }
                }
                else
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText23_1, maxwidth), Main.mouseX + 44, cantupgradepos + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
              
            }
            #endregion
            #region skill90
            if (MouseInFrame && CheckPointInRect(new Vector2(Main.mouseX, Main.mouseY), new Vector2(skill90X, skill90Y), 56, 56))
            {
                sb.Draw(skillinfopanel, new Rectangle(Main.mouseX + 4, Main.mouseY + 8, skillinfopanel.Width, skillinfopanel.Height), null, Color.White, 0f, new Vector2(), SpriteEffects.None, 0f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, Skill90Name, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(Skill90Name).X / 2), Main.mouseY + 24, Color.White, Color.Black, new Vector2(), 1f);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, FinalSkill, Main.mouseX + 226 - (Bismuth.Adonais.MeasureString(FinalSkill).X / 2) * 0.85f, Main.mouseY + 44, Color.Yellow, Color.Black, new Vector2(), 0.85f);
                string info = StringBreak(Bismuth.Adonais, Skill90Tooltip, maxwidth);
                Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, info, Main.mouseX + 44, Main.mouseY + 80, Color.White, Color.Black, new Vector2(), 0.9f);
                float offset = Main.mouseY + 80 + Bismuth.Adonais.MeasureString(info).Y * 0.9f;


                if (skill90lvl < 1)
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(8)), maxwidth), Main.mouseX + 44, offset + 4, SkillPoints >= 8 ? Color.LightGreen : Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(string.Format(this.GetLocalization("Skill.SPRequired").Value, Convert.ToString(8))).Y * 0.9f;
                    if (skill85lvl < 1)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, fullText24, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                        offset += 4 + Bismuth.Adonais.MeasureString(StringBreak(Bismuth.Adonais, fullText24, maxwidth)).Y * 0.9f;
                    }
                    if (!KilledCultist)
                    {
                        Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, StringBreak(Bismuth.Adonais, DefeatCultist, maxwidth), Main.mouseX + 44, offset + 4, Color.PaleVioletRed, Color.Black, new Vector2(), 0.9f);
                    }
                }
                else
                {
                    Utils.DrawBorderStringFourWay(sb, Bismuth.Adonais, UpgratedSkill, Main.mouseX + 44, offset + 4, Color.ForestGreen, Color.Black, new Vector2(), 0.9f);
                    offset += 4 + Bismuth.Adonais.MeasureString(UpgratedSkill).Y * 0.9f;
                }

                if (Main.mouseLeft && Main.mouseLeftRelease && skill90lvl < skill90lvlmax && skill85lvl > 0 && KilledCultist && SkillPoints >= 8)
                {
                    SoundEngine.PlaySound(SoundID.MenuOpen);
                    skill90lvl++;
                    SkillPoints -= 8; SpendedPoints += 8;
                }
            }
            #endregion
            #endregion
        }
        #endregion
        public override void ModifyHurt(ref Player.HurtModifiers modifiers)
        {   
            amuletcounter = 0;
            if (Main.rand.Next(1, 101) < (BlockChance + BlockChanceForSkills))
            {
                CombatText.NewText(new Rectangle((int)Player.position.X, (int)Player.position.Y, 10, 10), Color.Gray, "Blocked!");              
                Main.player[Main.myPlayer].immune = true;
                Main.player[Main.myPlayer].immuneTime = 40;
                if (Main.player[Main.myPlayer].longInvince)
                    Main.player[Main.myPlayer].immuneTime += 40;
                SoundEngine.PlaySound(new SoundStyle("Bismuth/Sounds/Custom/BlockSound"));
                return;
            }
            if (Main.rand.Next(1, 101) < (DodgeChance + DodgeChanceForSkills /*+ player.inventory[player.selectedItem].GetGlobalItem<GlobalItems>().dodgechance*/))
            {
                CombatText.NewText(new Rectangle((int)Player.position.X, (int)Player.position.Y, 10, 10), Color.DarkOliveGreen, "Dodged!");
                Main.player[Main.myPlayer].immune = true;
                Main.player[Main.myPlayer].immuneTime = 40;
                if (Main.player[Main.myPlayer].longInvince)
                    Main.player[Main.myPlayer].immuneTime += 40;
                SoundEngine.PlaySound(SoundID.Item7);
                return;
            }
            if (IsNaga && !Player.stoned && !Player.frostArmor)
            {
              //  Main.PlaySound(SoundID.NPCHit23, player.position);
            }
            return;
        }        
    }
}
